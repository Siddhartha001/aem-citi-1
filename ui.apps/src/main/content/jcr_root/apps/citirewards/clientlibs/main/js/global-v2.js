window.citiConfig = (function() {
    'use strict';

    var endPointHost = "../../../../js/mock-endpoints/";
    var categoryEndPointPath = "mock-category-brands/alphabetical/";
    var productListingEndPointPath = "mock-product-listing/";
    var searchResultsEndPointPath = "mock-search/";
    var mfaEndPointPath = "mock-mfa/";
    var pointsTransferDetailEndPointPath = "mock-points-transfer-detail/";
    var handlebarTemplatesDir = '../../../../templates.hbs/';

    return {
        categoryEndPointPath: categoryEndPointPath,
        endPointHost: endPointHost,
        handlebarTemplatesDir: handlebarTemplatesDir,
        productListingEndPointPath: productListingEndPointPath,
        searchResultsEndPointPath: searchResultsEndPointPath,
        mfaEndPointPath: mfaEndPointPath,
        pointsTransferDetailEndPointPath: pointsTransferDetailEndPointPath
    };
})();

/* global L */
/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

/**
 * Object shared across different countries
 */
var citiShare = (function () {
  "use strict";


  var pubsub = null;

  var Keyboard = {
    ENTER: 13,
    TAB: 9,
    ESCAPE: 27,
    SPACE: 32,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40
  };

  var Header = {
    mobileMenuInstantiated: false,
    desktopMenuInstantiated: false,
    windowWidth: window.innerWidth || $(window).width(),
    searchOpen: false,
    isResizing: false,
    openedSubNav: null,
    resizingTimeout: null,
    searchIcon: $('#desktop-header-search .control i, #mobile-header-search .control i')
  };

  //ini

  /**
   * Header and Menu Initializations
   */
  function _initializeMenu() {
    $(window).bind('resize', function () {
      Header.isResizing = true;
      Header.windowWidth = window.innerWidth || $(window).width();

      if (Header.windowWidth < 960 && !Header.mobileMenuInstantiated) {
        initMobile();
      }
      if (Header.windowWidth >= 960 && !Header.mobileMenuInstantiated) {
        initDesktop();
      }

      if ($("#header-desktop").css("display") === "block" && $(".oc-container").hasClass("oc-push")) {
        $('#menu-button').click();
      }

      if (Header.resizingTimeout) {
        clearTimeout(Header.resizingTimeout);
      }
      Header.resizingTimeout = setTimeout(function () {
        Header.isResizing = false;
      }, 2000);

    }).trigger('resize');

    setupMenus();
    setupMobileTabletSearch();
    setupAccountNameOverflow();
    setupNavigationa11y();
    setupPlaceholder();
  }

  function setupPlaceholder() {
    $('input').on('keyup focus', function () {
      $(this).prev('label').addClass('visible');
    });

    $('input').on('blur', function () {
      if ($(this).val().length <= 0) {
        $(this).prev('label').removeClass('visible');
      }
    });
  }

  /**
   * Function to determine on page load the width of the window and whether or not
   * to use the initMobile() or the initDesktop()
   *
   * @param sParam (windoWidth)
   */
  function setupMenus(sParam) {
    if (sParam < 960) {
      initMobile();
    } else {
      initDesktop();
    }
  }

  /**
   * Initializes the mobile version of the header
   */
  function initMobile() {
    setupMobileMenu();
    mobileFilterList();
    $('body').removeClass('init');
    Header.mobileMenuInstantiated = true;
  }

  /**
   * Initializes the desktop version of the header
   */
  function initDesktop() {
    $('body').addClass('init');
    setupDesktopMenu();
    Header.desktopMenuInstantiated = true;
  }

  /**
   * Setups skip naviation
   */
  function setupNavigationa11y() {
    $('.skipnav').on('click', function () {

      setTimeout(function () {
        if ($('h1').length > 0) {
          $('h1').attr('tabindex', '0').focus();
        } else {
          $('h2').attr('tabindex', '0').focus();
        }
      }, 500);
    });
  }

  /**
   * Starts the accessibleMegaMenu javascript for the header implementation
   */
  function setupDesktopMenu() {
    $('.megamenu').accessibleMegaMenu();
    // hack so that the megamenu doesn't show flash of css animation after the page loads.
    $('body').removeClass('init');
  }


  /**
   * Gets URL parameters
   *
   * @param sParam
   * @returns {string}
   */
  function _getUrlParameter(sParam) {

    if (sParam) {
      var sPageURL = window.location.search.substring(1);
      var sURLVariables = sPageURL.split('&');

      for (var i = 0; i < sURLVariables.length; i++) {

        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] === sParam) {
          return sParameterName[1];
        }
      }
    }

  }

  function mobileFilterList() {
    $(".filter-subnav-control").bind('click.citishare', function (e) {
      var $this = $(this);
      var $subnav = $('.' + $this.attr('aria-controls'));

      openSubNav($subnav, $this);

      $subnav.find('.sub-nav-back').bind('click touchend', function (e) {
        closeSubNav($subnav, $this);
        $(this).unbind('click');
        setTimeout(function () {
          $('#mobile-menu a:visible:first').focus();
        }, 25);
        e.preventDefault();
        return false;
      });

      e.preventDefault();
      return false;
    });
  }

  /**
   * Sets up the mobile menu
   */
  function setupMobileMenu() {

    $('.mobile-subnav-control').bind('click.citishare', function (e) {
      var $this = $(this);
      var $subnav = $('#' + $this.attr('aria-controls'));

      openSubNav($subnav, $this);

      $subnav.find('.sub-nav-back').bind('click touchend', function (e) {
        closeSubNav($subnav, $this);
        $(this).unbind('click');
        setTimeout(function () {
          $('#mobile-menu a:visible:first').focus();
        }, 25);
        e.preventDefault();
        return false;
      });

      e.preventDefault();
      return false;
    });

    /**
     * Triggers close search and removes padding top when
     * browser is resized to larger than tablet 960px
     *
     * Conditions: If the browser width is larger than tablet,
     * and search bar is opened (true state set in openSearch())
     */
    $(window).bind('resize', function () {
      if (Header.windowWidth > 960 && Header.searchOpen) {
        closeSearch();
      }
    });

    initMenu();
  }

  /**
   * Tablet Search Implementation
   */
  function setupMobileTabletSearch() {

    var searchForm = $('#desktop-search-form, #mobile-search-form');

    $("#desktop-header-search a, #mobile-header-search a, #desktop-header-search-form a").on('click', function (e) {
      if ($(e.currentTarget).attr('aria-controls') === "search") {
        if ($("#search").val() === "") {
          return false;
        }
      } else {
        if($("#responsive-page").val() !== "none-responsive"){
          if (Header.windowWidth < 1260) {
            searchBoxAction();
          } else {
            closeSearch();
          }
        } else {
          searchBoxAction();
        }
      }
    });
    $(window).bind('resize', function () {

      if (Header.windowWidth >= 1260) {
        $('#desktop-search-form').attr('aria-hidden', false);

        /**
         * If the search form is opened from mobile view,
         * and the browser is resized to desktop view,
         * close the opened search form.
         */
        if (searchForm.hasClass("opened")) {
          return searchForm.removeClass("opened");
        }
      } else {
        $('#desktop-search-form').attr('aria-hidden', true);
      }
    }).trigger('resize');
  }

  function searchBoxAction(){
    if (Header.searchIcon.hasClass('hide-search')) {
      openSearch();
    } else {
      closeSearch();
    }
  }
  /**
   * Opens the sub nav in mobile view
   */
  function openSubNav(subnav, subnavTitle) {
    subnav.attr('aria-expanded', true).attr('aria-hidden', false).addClass('opened');
    subnavTitle.attr('aria-expanded', true);
    subnavTitle.addClass('sub-menu-opened').attr('aria-hidden', true);
    Header.openedSubNav = subnavTitle;

    setTimeout(function () {
      $('#mobile-menu > ol > li > a').not('.sub-menu-opened').parent().each(function (i, elem) {
        $(elem).attr('aria-hidden', true);
      });
      $('#oc-trigger').attr('aria-hidden', true);
      $('.sub-nav-back:visible:first').focus();
    }, 25);
  }

  /**
   * Closes the sub nav in mobile view
   */
  function closeSubNav(subnav, subnavTitle) {
    subnav.removeClass('opened').attr('aria-expanded', false).attr('aria-hidden', true);
    subnavTitle.attr('aria-expanded', true).blur();
    $('#mobile-menu > ol > li > a').not('.sub-menu-opened').parent().each(function (i, elem) {
      $(elem).removeAttr('aria-hidden');
    });
    $('#oc-trigger').removeAttr('aria-hidden');

    subnavTitle.removeClass('sub-menu-opened');
    subnavTitle.removeAttr('aria-hidden');
    setTimeout(function () {
      Header.openedSubNav.focus();
    }, 50);
  }

  /**
   * Open search in the header when still not in mobile view
   */
  function openSearch() {
    Header.searchIcon.removeClass('hide-search');
    Header.searchOpen = true;
    Header.searchIcon.removeClass('icon_search').addClass('icon_x close-search');

    if (Header.windowWidth < 960) {
      $('main.oc-content').css({
        'padding-top': '42px'
      });
    }

    $('#mobile-header-account-info').addClass('search-open');
    $('#mobile-account-menu-logged-out').addClass('search-open');
    $('#desktop-header-search a, #desktop-header-search, #mobile-header-search a, #mobile-header-search').addClass('opened');
    $('#desktop-search-form, #mobile-search-form').addClass('opened');
    $('#desktop-search-form, #mobile-search-form').attr('aria-hidden', 'false');
    $('#desktop-search-form input, #mobile-header-search input').focus();
    setTimeout(function () {
      $('#desktop-search-form input, #mobile-header-search input').focus();
    }, 50);

    $("#mobile-header-search input").css({'padding': '0 5px', 'margin-left': '0'});
    $('.modal-points-transfer').css('top', '170px');
  }

  /**
   * Close search in the header
   */
  function closeSearch() {

    Header.searchOpen = false;
    $("#mobile-header-search input").css({'padding': '13px 16px 12px 10px', 'margin-left': '0'});
    Header.searchIcon.addClass('hide-search');
    Header.searchIcon.removeClass('icon_x').addClass('icon_search');
    $('#desktop-header-search a, #mobile-header-search a').removeClass('opened');
    $('#mobile-header-account-info').removeClass('search-open');
    $('#mobile-account-menu-logged-out').removeClass('search-open');
    $('main.oc-content').css({
      'padding-top': 0
    });
    $('#desktop-search-form, #mobile-search-form').removeClass('opened');
    $('#desktop-header-search input, #mobile-header-search input').blur();
    $('#desktop-header-search a, #mobile-header-search a').blur();
    $('#desktop-search-form, #mobile-search-form').attr('aria-hidden', 'true');
    $('#desktop-search-form input, #mobile-header-search input').unbind('blur');
    $("#mobile-header-search input").css({'padding': '0'});
    $(window).unbind('keyup');
    $('.modal-points-transfer').css('top', '138px');
  }


  /**
   * Account Name overflow function
   */
  function setupAccountNameOverflow() {

    // Desktop name
    var height = '30px';
    var $name = $('#account-menu-logged-in .greeting');
    var $points = $('#account-menu-logged-in .points');
    var $parent = $('#account-menu-logged-in > a');
    if ($name.length <= 0) {
      return false;
    }

    $name.bind('change', function () {
      console.log($name.text().length);
    });

    var len = $name.text().length;

    var elem = $name.get(0);
    //if text is overflowing container
    if (len < 36) {
      $name.css({
        'font-size': '13px'
      });
      $points.css({
        'font-size': '13px'
      });
    }
    if (elem.offsetWidth < elem.scrollWidth) {


      if (len >= 37 && len < 86) {
        $name.css({
          'height': 'auto',
          'padding-right': '7px',
          'white-space': 'normal',
          'word-break': 'break-word'
        });
        $parent.css({
          'padding': '6px 10px 3px 10px'
        });
        $points.css({
          'font-size': '11px'
        });

      }
      //two lines needs dotdotdot
      if (len >= 86) {

        $parent.css({
          'padding': '5px 10px'
        });
        $name.css({
          'height': '25px',
          'font-size': '9px',
          'padding-right': '7px'
        });

        $name.dotdotdot();
        $('#account-menu-logged-in').hover(
          function () {
            $name.css({
              'height': 'auto',
              'margin-bottom': '10px',
              'font-size': '11px'
            });
            $name.trigger("originalContent", function (content) {
              $name.empty().append(content);
            });
          },
          function () {
            $name.css({
              'height': height
            });
            $name.dotdotdot();
          }
        );
      }

    }

    // Mobile name
    var $mobileGreeting = $('#mobile-header-account-info .greeting');
    if ($mobileGreeting.length > 0 && $mobileGreeting.text().length > 64) {
      $mobileGreeting.css({
        height: '40px',
        'word-wrap': 'break-word'
      });
      $mobileGreeting.dotdotdot({
        watch: true
      });
    }

  }

  /**
   * Initializes and resets the menu for mobile only
   */
  function initMenu() {

    var $menu = $('#mobile-menu');
    var $menuTrigger = $('#oc-trigger');
    var $trigger = $('#menu-button');
    var isOpen = false;

    $trigger.attr('aria-expanded', 'false');
    $trigger.attr('aria-label', 'Menu');
    $trigger.attr('aria-controls', 'mobile-menu');

    $menu.attr('aria-hidden', 'true');
    $menu.attr('aria-labelledby', 'menu-button');

    var $container = $('#oc-container');


    function resetMenu() {
      $menuTrigger.find('> a, > div').not('#menu-button').removeAttr('aria-hidden');
      $trigger.attr('aria-expanded', 'false');
      $menu.attr('aria-hidden', 'true');
      $container.removeClass('oc-menu-open');
      $container.removeClass('oc-push');
      isOpen = false;
      $trigger.removeClass('opened');
      $trigger.attr('aria-expanded', 'false');
      $menu.attr('aria-hidden', 'true');
      $menu.attr('aria-expanded', 'false');
      $('#menu-button').blur();
      $('.oc-content').removeAttr('aria-hidden');
      $('#footer').removeAttr('aria-hidden');
      $('.back-to-top').removeAttr('aria-hidden');
      $trigger.attr('aria-label', 'Menu');
    }

    function bodyClickFn() {
      if (isOpen) {
        resetMenu();
      }
    }


    $('#mobile-menu a:last').bind('blur', function () {
      $trigger.focus();
    });
    $trigger.bind('blur', function () {
      if ($('.oc-menu-open').length > 0) {
        $('#mobile-menu a:first').focus();
      }
    });

    $('#menu-button').bind('click touchstart', function (ev) {
      if (isOpen) {
        resetMenu();
        return false;
      }
      isOpen = true;
      $menuTrigger.find('> a, > div').not('#menu-button').attr('aria-hidden', true);
      ev.stopPropagation();
      ev.preventDefault();

      $trigger.attr('aria-label', 'Close Menu');
      $trigger.addClass('opened');
      $trigger.attr('aria-expanded', 'true');
      $menu.removeAttr('aria-hidden');
      $menu.attr('aria-expanded', 'true');
      $('.oc-content').attr('aria-hidden', true);
      $('#footer').attr('aria-hidden', true);
      $('.back-to-top').attr('aria-hidden', true);
      setTimeout(function () {
        $('#mobile-menu a:visible:first').focus();
      }, 25);

      $container.addClass('oc-container'); // clear
      $container.addClass('oc-push');
      $container.addClass('oc-menu-open');

      $('.oc-content').bind('click touchstart', bodyClickFn);
    });


    // Handle 'esc' event
    // Keyboard Tweaks via Scott Vinkle
    var escapeMenu = function (ev) {
      if (ev.which === Keyboard.ESCAPE) {
        ev.stopPropagation();
        ev.preventDefault();
        resetMenu();
        $trigger.focus();
      }
    };

    $trigger.bind('keydown', function (ev) {
      escapeMenu(ev);
    });

    $menu.bind('keydown', function (ev) {
      escapeMenu(ev);
    });
  }

  /**
   * Gets parameter by name
   *
   * @param name
   * @returns {string}
   */
  function _getParameterByName(name) {

    var formattedName = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"),
      regex = new RegExp("[\\?&]" + formattedName + "=([^&#]*)"),
      results = regex.exec(location.search);

    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  /**
   * Sets up section sub-navs (i.e. travel section cars/hotels/points)
   */
  function _setupSectionSubNavs() {

    var defaultTab = 0;
    // look for default tab class
    if ($('#travel-tabs .default-tab').length > 0) {
      defaultTab = $('#travel-tabs .default-tab').index();
    }

    if ($('#travel-tabs .ui-state-active').length > 0) {
      defaultTab = $('#travel-tabs .ui-state-active').index();
    }

    $('#travel-tabs li').not('.activated').remove();

    $("#travel-tabs").tabs({
      active: defaultTab
    });
  }

  /**
   * Sets up travel validation
   */
  function _setupTravelValidation() {

    $('.sub-section').each(function (i, elem) {
      var $section = $(elem);
      var $inputs = $section.find('input[type="text"]');
      var $errorMessage = $section.find('.error-message').attr('tabindex', 0);


      function validateSection(e) {

        $('.has-error').removeClass('has-error');
        $section.removeClass('has-error');
        var errors = false;
        var errorElements = [];

        //test inputs
        $inputs.each(function (i, elem) {
          if ($(elem).val() === '') {
            errors = true;
            errorElements.push(elem);
          }
        });

        if (errors) {
          $section.addClass('has-error');
          $.each(errorElements, function (i, elem) {
            $(elem).bind('change keyup selectmenuchange', validateSection).addClass('has-error');
          });

          if (e.type === "click") {
            $errorMessage.focus().bind('blur', function () {
              $inputs.first().focus();
            });
          }
          e.preventDefault();
          return false;
        }

      }//end a.btn click event

      $section.find('a.btn').bind('click', validateSection);

    });
  }

  /**
   * Enables functionality for showing/hiding sub sections based upon sub section navs
   */
  function _showHideSubSections() {

    $("li[role='tab']").click(function () {

      $("li[role='tab']:not(this)").attr("aria-selected", "false");
      $(this).attr("aria-selected", "true");

      var tabpanid = $(this).attr("aria-controls");
      var tabpan = $("#" + tabpanid);

      $("div[role='tabpanel']:not(tabpan)").attr("aria-hidden", "true");
      $("div[role='tabpanel']:not(tabpan)").addClass("hidden");

      tabpan.removeClass("hidden");
      tabpan.attr("aria-hidden", "false");
    });
  }

  /**
   * Sets up jquery-ui select menu for select elements (points transfer dropdowns)
   */
  function _selectMenuForElement() {

    $('.dropdown:not(.desktop-filter)').find('select').each(function (i, elem) {
      var $elem = $(elem);
      var settings = {
        width: '100%',
        icons: {
          button: 'icon icon_caret-down'
        }
      };

      if ($elem.attr('data-placeholder')) {
        settings['placeholder'] = $elem.attr('data-placeholder');
      }
      $elem.selectmenu(settings);

      $(window).bind('resize', function () {
        $elem.selectmenu('close');
      });
    });

  }


  /**
   * Adds style for activated menu item
   */
  function _addStyleActivatedMenuItem() {

    $('.main-menu .menu-list > ul').each(function (i, elem) {

      if ($(elem).find('li.activated').length === 1) {
        $(elem).find('li.activated, li.activated > a').css({'border-bottom': '0px solid transparent'});
      }
    });
  }

  /**
   * Adds keyboard accessibility by adding the enter key to the basic click event.
   */
  function _addKeyboardEnterKey() {

    $("li[role='tab']").keydown(function (ev) {

      if (ev.which === Keyboard.ENTER) {
        $(this).click();
      }
    });
  }

  /**
   * _addKeyboardArrowNavigation Implements arrow key access of a jQuery list element.
   * Assumes SlickJS carousel markup if 'slick-slide' is present.
   * @param {Object} $listElement [description]
   * @param {String} itemSelector [description]
   * @param {String} linkSelector [description]
   */
  function _addKeyboardArrowNavigation($listElement, itemSelector, linkSelector) {
    function _helperGetNext($element) {
      return $element.next();
    }

    function _helperGetPrev($element) {
      return $element.prev();
    }

    function _helperGetFirst($element) {
      return $element.parentsUntil('slick-sider').find('.slick-active').first();
    }

    function _helperGetLast($element) {
      return $element.parentsUntil('slick-slider').find('.slick-active').last();
    }

    $listElement.keydown(function (event) {
      var $currentSelection = $(this).find('.active').not('.slick-cloned');
      var $newSelectionContainer = $currentSelection.closest(itemSelector);
      var $activeSlideContainer = $newSelectionContainer.closest('.slick-active') || null;
      var $gotoSlideContainer;
      var $newSelection;

      switch (event.which) {
        case Keyboard.RIGHT:
        case Keyboard.UP:
          // SlideJS carousel detected
          if ($activeSlideContainer.length) {
            $gotoSlideContainer = _helperGetNext($activeSlideContainer);

            // Only select the next active visible slide in the carousel, otherwise move to the first one.
            if (!$gotoSlideContainer.hasClass('slick-active')) {
              $gotoSlideContainer = _helperGetFirst($newSelectionContainer);
            }
            $newSelection = $gotoSlideContainer.find(linkSelector);
          }

          // No SlideJS
          else {
            $newSelection = $currentSelection.closest(itemSelector).next().find(linkSelector);
          }
          break;

        case Keyboard.LEFT:
        case Keyboard.DOWN:
          // SlideJS carousel detected
          if ($activeSlideContainer.length) {
            $gotoSlideContainer = _helperGetPrev($activeSlideContainer);

            // Only select the previous active visible slide in the carousel, otherwise move to the last one.
            if (!$gotoSlideContainer.hasClass('slick-active')) {
              $gotoSlideContainer = _helperGetLast($newSelectionContainer);
            }
            $newSelection = $gotoSlideContainer.find(linkSelector);
          }

          // No SlideJS
          else {
            $newSelection = $currentSelection.closest(itemSelector).prev().find(linkSelector);
          }
          break;

        case Keyboard.ENTER:
          $currentSelection.click();
          event.stopPropagation();
          break;
      }

      // We are at the end of the list.
      if (($newSelection && $newSelection.length === 0) || ($newSelection === undefined)) {
        $newSelection = $currentSelection;
      }

      // Toggle active classes.
      $currentSelection.removeClass('active');
      $newSelection.addClass('active');
    });
  }

  /**
   * Adds keyboard function that pressing an arrow left or arrow right from the tabs toggel the tabs.
   */
  function _addKeyboardLeftRightToggle() {

    $("li[role='tab']").keydown(function (ev) {
      var goto;

      if (ev.which === Keyboard.LEFT) {
        goto = $(this).prev();

        if (goto.length === 0) {
          goto = $('.section-sub-nav ul > li[role="tab"]:last');
        }
      }

      if (ev.which === Keyboard.RIGHT) {
        goto = $(this).next();
        if (goto.length === 0) {
          goto = $('.section-sub-nav ul > li[role="tab"]:first');
        }
      }

      if (goto !== undefined && goto.length > 0) {
        goto.attr("aria-selected", "true").focus();
        $(this).attr("aria-selected", "false");

        var tabpanid = $("li[aria-selected='true']").attr("aria-controls");
        var tabpan = $("#" + tabpanid);
        $("div[role='tabpanel']:not(tabpan)").attr("aria-hidden", "true");
        $("div[role='tabpanel']:not(tabpan)").addClass("hidden");

        tabpan.attr("aria-hidden", "false");
        tabpan.removeClass("hidden");
      }

    });
  }

  /**
   * Legacy accessible modal
   */
  function _getAccessibleModalById() {
    var element;
    var modalObj = [];
    var modalId = [];
    var elements = $('[data-modal-id]');
    if (elements.length) {
      elements.each(function (i, el) {
        element = $(el);
        modalId[i] = element.data('modal-id');
        element.bind('click', function (e) {
          e.preventDefault();
          if ($(this).attr('disabled')) {
            return false;
          }
          if (!modalObj[i]) {
            modalObj[i] = new citiShare.AccessibleModal({
              modal: $('#' + modalId[i]),
              previousElement: e.target
            });
          } else {
            modalObj[i].show();
          }

          return false;
        });
      });
    }
  }

  /**
   * _populateProductList - Populate product listing from an ajax endpoint
   * @param  {Object} $targetContainer [description]
   * @param  {string} templateSelector        [DOM selector for template]
   * @param  {string} productFile             [file name at endpoint]
   */
  function _populateProductList($targetContainer, templateSelector, productFile) {
    var productEndPoint = window.citiConfig.endPointHost + window.citiConfig.productListingEndPointPath + productFile;
    var source = $(templateSelector).html();
    var template = window.Handlebars.compile(source);

    var request = $.ajax({
      url: productEndPoint,
      method: 'GET',
      dataType: 'json'
    });

    request.done(function (data) {
      var output;

      data.products.forEach(function (el) {
        el.pageState = window.citiConfig.state;
        el.country = window.citiConfig.country;
      });
      output = template(data);
      $targetContainer.append(output);

      // add .horizontal-image class to images as needed
      window.setTimeout(function () {
        $('.product-list-image').each(function (i, elem) {
          if ($(elem).width() > $(elem).height()) {
            $(elem).addClass('horizontal-image');
          }
        });
      }, 500);

    });

    request.success(function () {
      // Activate pagination after product list request is successful
      citiShare.pagination.initPagination($(".product-list-item"), ".pagination", 48);
    });

    request.error(function (data) {
      console.log('ajax error:', data);
    });
  }

  /**
   * Generate a quick view section on a PLP
   * @param  {Object} $targetContainer The DOM elem that the template is going to be injected into
   * @param  {String} templateId       The selector
   * @param  {String} productFile      [description]
   * @param  {Number} productId        [description]
   * @param  {function} callback        Func to run after everything is done
   */
  function _getProductDetailItem($targetContainer, templateId, productFile, productId, callback) {
    var productEndPoint = window.citiConfig.endPointHost + window.citiConfig.productListingEndPointPath + productFile;
    var source = $(templateId).html();
    var template = window.Handlebars.compile(source);

    $.ajax({
      url: productEndPoint,
      method: 'GET',
      dataType: 'json'
    })
      .done(function (data) {

        $.each(data.products, function (key, value) {
          var output;
          //Return only the requested product by ID
          if (value.productId === productId) {
            value.productDetail.product.pageState = window.citiConfig.state;
            value.productDetail.product.country = window.citiConfig.country;
            output = template(value.productDetail);
            $targetContainer.append(output);

            if (typeof callback === "function") {
              callback();
            }

            return;
          }
        });


      })
      .fail(function (data) {
        console.log('ajax error:', data);
      });

  }

  /**
   * _populateCategoryList - Populate category list from an ajax endpoint.
   * Loads an alphabetical list of companies for the Category Landing page and navigates to a selected alphabetical list.
   *
   * @param {Object} $element      container element to be populated.
   * @param {String} selectedIndex populate a specific alphabetical list.
   *
   * the selectedEndPoint variable should resove to a string similar to  "mock-endpoints/mock-category-brands/alphabetical/b.json"
   */
  function _populateCategoryList($element, selectedIndex) {
    // Default to the beginning of the alphabetized list if no selection is passed
    var selectedEndPoint = window.citiConfig.endPointHost + window.citiConfig.categoryEndPointPath + selectedIndex + '.json';
    $.getJSON(selectedEndPoint, function (data) {
      var selectedBrandsArray = data.brands;
      _createCategoryList(selectedBrandsArray, $element);
    });
  }

  /**
   * _createCategoryList - Helper function for _populateCategoryList
   * Renders array of brands in the Category Landing page.
   *
   * @param  {Object} brandsArray [description]
   * @param  {Object} $element     jQuery object $element
   */
  function _createCategoryList(brandsArray, $element) {
    var listTemplate = '<ul class="category-list">';

    // Iterate through array of brands.
    for (var i = 0; i < brandsArray.length; i++) {
      listTemplate += '<li class="category-item">';
      listTemplate += '<a href=" ' + brandsArray[i].url + ' " class="copy text-extra-light omniture-category-list-item">' + brandsArray[i].label + '</a>';
      listTemplate += '</li>';
    }

    listTemplate += '</ul>';
    $element.html(listTemplate);
  }


  /**
   * Number stepper
   * @type {{numericStepper}}
   */
  function _numericStepperSetup() {

    var $parentEl = $(".stepper-buttons");
    var $inputStepperEl = $(".numeric-stepper > input");
    var maxQuantity = parseInt($inputStepperEl.attr("max"));
    var minQuantity = parseInt($inputStepperEl.attr("min"));
    var $decreaseButton = $("[data-stepper=decrease]");
    var $increaseButton = $("[data-stepper=increase]");
    var accessibleLiveRegion = $('.buttonset-a11y');

    var changeValue = function changeValue(e) {

      e.preventDefault();
      var getCurrentValue = parseInt($inputStepperEl.val());
      var valueAdjustment = parseInt($(this).attr("data-quantity-adjustment")) || 0; // 0 when its called from pressing enter
      var setValue = getCurrentValue + valueAdjustment;

      if (setValue <= minQuantity) {
        $decreaseButton.prop('disabled', true);
        $inputStepperEl.val(parseInt(minQuantity));
        accessibleLiveRegion.append('Quantity ' + setValue);
        return $increaseButton.prop('disabled', false);
      } else if ((setValue > minQuantity) && (setValue < maxQuantity)) {
        $decreaseButton.prop('disabled', false);
        $inputStepperEl.val(setValue);
        accessibleLiveRegion.append('Quantity ' + setValue);
        return $increaseButton.prop('disabled', false);
      } else {
        $decreaseButton.prop('disabled', false);
        $inputStepperEl.val(parseInt(maxQuantity));
        accessibleLiveRegion.append('Quantity ' + setValue);
        return $increaseButton.prop('disabled', true);
      }

    };

    // Allow numbers only (no decimal)
    $inputStepperEl.numeric({
      decimal: false,
      decimalPlaces: -1
    });

    $inputStepperEl.on('focusout keypress', function (e) {
      // on focusout or enter
      if (e.keyCode === 13 || e.type === "focusout") {
        changeValue(e);
      }
    });

    $parentEl.on("click", changeValue);
  }

  /**
   * Activate product zoom for product details page (PDP)
   * elevateZoom plugin
   * @param {Number} width window resize width
   */
  function _createZoom(width) {

    if ($('#photo').length > 0) {

      var windowWidth = window.innerWidth || $(window).width();

      var map = L.map('photo', {
        zoomControl: false,
        minZoom: 0,
        maxZoom: 4,
        scrollWheelZoom: false,
        center: [0, 0],
        zoom: windowWidth <= 767 ? 0 : 1,
        crs: L.CRS.Simple
      });

      map.touchZoom.disable();
      map.doubleClickZoom.disable();

      var image = $('#photo').data('image');
      var alt = $('#photo').data('alt');

      // dimensions of the image
      var w = $('.product-zoom.show-on-mobile-only')[0].naturalWidth * 2.25,
        h = $('.product-zoom.show-on-mobile-only')[0].naturalHeight * 2.75,
        url = image;

      if (width <= 767) {
        w = 800;
        h = 800;
      }

      // calculate the edges of the image, in coordinate space
      var southWest = map.unproject([0, h], map.getMaxZoom() - 1);
      var northEast = map.unproject([w, 0], map.getMaxZoom() - 1);
      var bounds = new L.LatLngBounds(southWest, northEast);

      // add the image overlay,
      // so that it covers the entire map
      L.imageOverlay(url, bounds).addTo(map);

      // tell leaflet that the map is exactly as big as the image
      map.setMaxBounds(bounds);

      map.on('zoomend', function () {
        if (map.getZoom() === 4) {
          $('.zoom-in').attr('disabled', 'disabled');
          $('.zoom-out').removeAttr('disabled');
          $('.zoom-out').focus();
        } else if (map.getZoom() === 0) {
          $('.zoom-out').attr('disabled', 'disabled');
          $('.zoom-in').removeAttr('disabled');
          $('.zoom-in').focus();
        }
      });

      $('.leaflet-image-layer').attr('alt', alt);

      //bind click events to the zoom in
      $('.zoom-in').bind("click keypress", function (event) {

        if (event.which === 13 || event.type === "click") {
          map.zoomIn();
          $('.zoom-out').removeAttr('disabled');
        }

      });

      //bind click events to the zoom out function
      $('.zoom-out').bind("click keypress", function () {
        if (event.which === 13 || event.type === "click") {
          map.zoomOut();
          $('.zoom-in').removeAttr('disabled');
        }
      });

      setTimeout(function () {
        $(window).on('orientationchange pageshow resize', function () {
          //$("#map").height($(window).height());
          var windowWidth = window.innerWidth || $(window).width();

          if (windowWidth <= 767) {
            map.setZoom(0);
          } else {
            map.setZoom(1);
          }

        });
      }, 1000);
    }
  }


  function _createTabs() {
    /**
     * Activate tabs on product details page (PDP)
     * Jquery UI
     */
    $(".product-detail-tabs").tabs();

    /**
     * Activate tabs on pages which have one
     * Jquery UI
     */
    $(".tabs-module").tabs();

    /**
     * Activate second tab
     */
    $(".product-detail-second-tabs").tabs({
      active: 1
    });
  }


  function _createTooltips() {

  }

  /**
   * Activate button sets
   */
  function _createButtonSets() {
    var _radioDenominationGroup = null;
    var _radioDeliveryGroup = null;

    //verify that the element exists on page.
    if ($('#buttonset-denomination').length > 0) {
      _radioDeliveryGroup = new $A.RadioGroup('buttonset-denomination', 'a.accRadio', 0, '',
        function (selectedRadioNode, radiosArray) {
          $.each(radiosArray, function (i, elem) {
            $(elem).removeClass('active');
            $(elem).removeAttr('aria-describedby');
          });
          $(selectedRadioNode).addClass('active');
          $(selectedRadioNode).attr('aria-describedby', 'denomination-errors');
          _createButtonRules();
        });

      _radioDenominationGroup = new $A.RadioGroup('buttonset-delivery', 'a.accRadio', -1, '',
        function (selectedRadioNode, radiosArray) {
          $.each(radiosArray, function (i, elem) {
            $(elem).removeClass('active');
          });
          $(selectedRadioNode).addClass('active');
          _createButtonRules();
        });

      if ($('#buttonset-delivery > a').length < 2) {
        $('#buttonset-delivery > a').first().trigger('click');
      } else {
        if ($('#buttonset-delivery > a').length > 0) {
          $('.add-to-cart').addClass('notActive');
        }
      }

      if ($('#buttonset-denomination > a').length > 4) {
        $('.buttonset-view-more').show();
        $('#buttonset-denomination > a:gt(3)').hide();
      }


    }
  }

  function _updateProductDataPDP() {
    $('#buttonset-denomination > a').on('click', function () {
      $('.price').html($(this).find('span').html());
    });
  }

  /**
   * update product and quickview name and pricing data
   */
  function _updateProductData() {
    $('body').on('click', '.js-update-product-data', function () {
      var formattedValue;
      var dataCurrencyValue = $(this).attr('data-currency-value');
      var pointsFormat = $('.js-product-price').last().text().replace(/[0-9,]/g, '').trim();

      if (dataCurrencyValue) {
        if ($('.js-product-price').last().text() !== "" && $(this).data('currency-value') !== "") {
          formattedValue = citiShare.formValidation.formatNumericValues($(this).data('currency-value'));
          $('.js-product-price').last().text(formattedValue + ' ' + pointsFormat);
        }
      }

      // AZ:: the above is overcomplicated shrugh. just replace the text within .price span
      $('.js-product-title').find('.price').html($(this).text());

      var isAnonymousText = $(this).data('anonymous');
      $('.js-product-price').last().text($(this).data('anonymous'));

      if (isAnonymousText) {
        formattedValue = citiShare.formValidation.formatNumericValues($(this).data('currency-value'));
      }

      $('.js-product-price').first().text(formattedValue + ' ' + pointsFormat).show();
      $('.text-strikeout').hide();
      $('.placeholder-copy').hide();
      $('.sale-icon').hide();
      $('.sale-ends').hide();


      var dataDefaultPrice = $(this).attr('data-default-price');
      if (dataDefaultPrice) {

        $('.js-product-price').last().text(formattedValue + ' ' + pointsFormat);
        $('.js-product-price').first().hide();
        $('.text-strikeout').show();
        $('.sale-icon').show();
        $('.placeholder-copy').show();
        $('.sale-ends').show();

      }

      // Target GR loggedin state only
      if (window.citiConfig.site === "GR") {
        $('.js-product-price').last().text($(this).data('loggedin'));
        $('.js-product-price').first().text(formattedValue + ' ' + pointsFormat).show();
        $('.js-orginal-price').hide(); // GR logged in state only logic
        $('.text-strikeout').hide();
        $('.placeholder-copy').hide();
        $('.sale-icon').hide();
        $('.sale-ends').hide();
      }
    });
  }

  /**
   * Update the quantity in the modal when add to cart in PDP
   */
  function _updateModalQty() {
    $(".add-to-cart").on("click", function () {
      var qtyValue = $(".numeric-stepper > input").val();
      $(".js-product-qty").text(qtyValue);
    });
  }

  /**
   * Sets Button Rules (PDP)
   * Jquery UI
   */
  function _createButtonRules() {
    //both subsets or groups of denomination and delivery must be selected in order to activate
    //add to cart

    //TODO MODIFY
    if ($('.buttonset').find('a.active').length === 2) {
      $('.product-form > a.btn').removeClass('notActive').removeAttr('tabindex');
    } else if ($('.buttonset').find('a.active').length === 1 && $("#buttonset-delivery").find('a.active').length === 1) {
      $('.product-form > a.btn').removeClass('notActive').removeAttr('tabindex');
    } else {
      if ($("#buttonset-delivery").length > 0) {
        $('.product-form > a.btn').addClass('notActive').attr('tabindex', '-1');
      }
    }

  }

  /**
   * Modal events related to GC and Merchandise
   */
  function _timedOverlayModals() {
    /**
     * Display overlays in anonymous state to encourage sign on
     */
    setTimeout(function () {
      $('[data-modal-id="modal-sign-on"]').trigger("click");
      $('[data-modal-id="modal-important-notice"]').trigger("click");
    }, 1000); // milliseconds

    sessionTimeOut();

    // Close modal on click button
    $(".btn-close-modal").on("click", function () {
      $('.modal-close-button').trigger("click");
    });
  }

  /**
   * Display overlays in cart for session timeout and session ended
   * After 6 minutes
   */
  function sessionTimeOut() {
    var setSessionTimeout = 2000;
    var btnsBoolean = $(".js-btn-boolean");

    // Sets timeout when inactive for 6 minutes
    setTimeout(function () {
      $('[data-modal-id="modal-session-timeout"]').trigger("click");

      $(".btn-boolean-group").on("click", function () {
        btnsBoolean.data('state', 'clicked');
        $('.modal-close-button').trigger("click");
      });

      sessionEnded();
    }, setSessionTimeout);
  }

  /**
   * Display overlays in cart for session timeout and session ended
   * After 6 minutes
   */
  function sessionEnded() {
    // Open the session ended modal
    setTimeout(function () {
      $('.modal-close-button').trigger("click");
      $('[data-modal-id="modal-session-ended"]').trigger("click");
    }, 2000);
  }

  function _initPubSub() {
    pubsub = $({});

    $.each(['on', 'off', 'trigger'], function (i, method) {
      $[method] = $.proxy(pubsub[method], pubsub);
    });
  }

  function _initPrintCta() {
    $('.print-btn').bind('click', function (event) {
      event.preventDefault();
      window.print();
    });
  }

  function _on(eventName, fn) {
    pubsub.on(eventName, fn);
  }

  function _off(eventName, fn) {
    pubsub.off(eventName, fn);
  }

  function _trigger(eventName, args) {
    pubsub.trigger(eventName, args);
  }

  /**
   * Calculate proper width for jquery ui select dropdown
   * under 360 window width.
   * There was a problem with jquery
   * ui, it didn't calculate the proper width and css couldn't
   * do the trick
   */
  function _initCalculateSelectOptionsWidth() {

    $('.ui-selectmenu-button').click(function () {

      if ($(window).width() < 359) {

        var $dropdownOptions = $('.ui-selectmenu-open').find('.ui-menu');
        var $selectWidth = $(this).width();

        $dropdownOptions.width($selectWidth);

      }

    });

  }

  /*
   * Add proper role to dropdown elements
   */
  function _adjustDropdown() {
    // Wait to make sure the dropdown are initilazed by jquery-ui
    window.setTimeout(function() {
      $('.dropdown').find('.ui-selectmenu-text').attr('role', 'textbox');
    }, 500);
  }

  function _init() {
    _initPubSub();
    _initPrintCta();
    _getAccessibleModalById();
    _initializeMenu(); //  Header and Menu Initializations
    _selectMenuForElement();
    _numericStepperSetup();
    _createTabs();
    _createZoom();
    _createTooltips();
    _createButtonSets();
    //_timedOverlayModals(); // enable when going live
    _updateProductData();
    _updateProductDataPDP();
    _updateModalQty();
    _initCalculateSelectOptionsWidth();
    _adjustDropdown();
  }

  _init();

  return {
    addKeyboardArrowNavigation: _addKeyboardArrowNavigation,
    addKeyboardEnterKey: _addKeyboardEnterKey,
    addKeyboardLeftRightToggle: _addKeyboardLeftRightToggle,
    addStyleActivatedMenuItem: _addStyleActivatedMenuItem,
    createTabs: _createTabs,
    createTooltips: _createTooltips,
    closeSearch: closeSearch,
    createButtonSets: _createButtonSets,
    createZoom: _createZoom,
    getParameterByName: _getParameterByName,
    getProductDetailItem: _getProductDetailItem,
    getUrlParameter: _getUrlParameter,
    initializeMenu: _initializeMenu,
    numericStepperSetup: _numericStepperSetup,
    populateCategoryList: _populateCategoryList,
    populateProductList: _populateProductList,
    selectMenuForElement: _selectMenuForElement,
    setupSectionSubNavs: _setupSectionSubNavs,
    setupTravelValidation: _setupTravelValidation,
    showHideSubSections: _showHideSubSections,
    timedOverlayModals: _timedOverlayModals,
    updateModalQty: _updateModalQty,
    on: _on,
    off: _off,
    trigger: _trigger
  };
})();

// Based in part on the code from: https://github.com/gdkraus/accessible-modal-dialog

/*

 ============================================
 License for Application
 ============================================

 This license is governed by United States copyright law, and with respect to matters
 of tort, contract, and other causes of action it is governed by North Carolina law,
 without regard to North Carolina choice of law provisions.  The forum for any dispute
 resolution shall be in Wake County, North Carolina.

 Redistribution and use in source and binary forms, with or without modification, are
 permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this list
 of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice, this
 list of conditions and the following disclaimer in the documentation and/or other
 materials provided with the distribution.

 3. The name of the author may not be used to endorse or promote products derived from
 this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 */

citiShare.util = (function() {
    'use strict';


    /**
     * trap tab key into passed element
     * @param  {object} obj The element that focus should be trapped within
     * @param  {Event} evt The event
     */
    function trapTabKey(obj, evt) {
        var focusableElementsString = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]";

        // if tab or shift-tab pressed
        if (evt.which === 9) {

            // get list of all children elements in given object
            var o = obj.find('*');

            // get list of focusable items
            var focusableItems;
            focusableItems = o.filter(focusableElementsString).filter(':visible');

            // get currently focused item
            var focusedItem;
            focusedItem = jQuery(':focus');

            // get the number of focusable items
            var numberOfFocusableItems;
            numberOfFocusableItems = focusableItems.length;

            // get the index of the currently focused item
            var focusedItemIndex;
            focusedItemIndex = focusableItems.index(focusedItem);

            if (evt.shiftKey) {
                //back tab
                // if focused on first item and user preses back-tab, go to the last focusable item
                if (focusedItemIndex === 0) {
                    focusableItems.get(numberOfFocusableItems - 1).focus();
                    evt.preventDefault();
                }

            } else {
                //forward tab
                // if focused on the last item and user preses tab, go to the first focusable item
                if (focusedItemIndex === numberOfFocusableItems - 1) {
                    focusableItems.get(0).focus();
                    evt.preventDefault();
                }
            }
        }
    }


    function trapEscapeKey(obj, evt) {
        // if escape pressed
        if (evt.which === 27) {
            evt.preventDefault();
            $('.js-product-detail-module .modal-close-button').click();
        }

    }

    /**
     * grab and register a handlebars template
     * @param  {string} template the name of the template to grab, without the file extension (getHandlebarPartials("something") will grab and register the "something.html" template)
     * @return {null}
     */
    function getHandlebarPartials(template){
        $.ajax({
            url: window.citiConfig.handlebarTemplatesDir + template + '.html',
            type: 'GET',
            async: false,
            dataType: 'text'
        })
        .done(function(data) {
            window.Handlebars.registerPartial(template, data);
        });
    }
    function throttle(fn, delay) {
        delay = delay ? delay : 100;
        var last = (function () {
            return +new Date();
        })(),
            timeoutId = null;

        return function () {
            var args = arguments;
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = null;
            }

            var now = (function () {
                return +new Date();
            })();
            if (now - last > delay) {
                fn.apply(this, args);
                last = now;
            } else {
                timeoutId = setTimeout(function () {
                    fn.apply(this, args);
                }, delay);
            }
        };
    }

    /**
     * render handlebars template with data
     * @param {string} source Template html
     * @param {object} data Template data
     * @return {string} Rendered template
     */
    function renderHandleBars(source, data) {
        var template = window.Handlebars.compile(source);
        return template(data);
    }

   /**
    * Will take an integer (or float) and format the number with
    * commas.
    *
    * Source: http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript/2901298#2901298
    */
    function convertToCommaFormat(number) {
        if(number !== undefined) {
            var parts = number.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            return parts.join(".");
        }
    }

    return {
        convertToCommaFormat: convertToCommaFormat,
        getHandlebarPartials: getHandlebarPartials,
        trapTabKey: trapTabKey,
        trapEscapeKey: trapEscapeKey,
        throttle: throttle,
        renderTemplate: renderHandleBars
    };
})();

/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

citiShare.formValidation = (function() {
    "use strict";
    
    var email = /^(?=[a-zA-Z0-9.!#$%&@'*+/=?^_`{|}~-]{1,254}$)[^.](?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]|([._])(?!\1)){0,62}[^.]@[^.](?!.*\.{2})([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+)([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+)[^.]|[^.]+$/g;

    var commonFormats = {
        'required' : '.+',
        'number' : '^\\d+$',
        'email' : email,
        'zip' : '^\\d{5}$'
    };
    
    /**
     * Validate input value against a regular expression
     * @param  {jQuery|String} elemOrValue What need to be validated
     * @param  {string} type   Either a type from the commonFormats object or a regexp string
     * @return {boolean}
     */
    function validateInput(elemOrValue, type) {
        var ret = false,
            val = typeof elemOrValue === 'string' ? elemOrValue : $(elemOrValue).val(),
            typeToUse = commonFormats.hasOwnProperty(type) ? commonFormats[type] : type;

        // check if type exists in types object
        // if not, assume that a regular expression
        // is being passed in and validate against that

        if(val !== undefined) {
            ret = val.match(new RegExp(typeToUse)) ? true : false;
        }

        return ret;
    }

    /**
     * Do two input values match? The world wants to know
     * @param  {jQuery}  $input1 Element number one
     * @param  {jQuery}  $input2 Element number two
     * @return {Boolean}
     */
    function isMatchingInput($input1, $input2) {
        return $($input1).val() === $($input2).val();
    }

    /**
     * Format string or number with delimiter as thousand separator (12,345)
     * @param {string} numberStr String or integer, it depend on user input, ex: (12,345 is string), (12345 is integer)
     * @param {string} delimiter String to identify the spectator between numbers; default is ','
     */
    function formatNumericValues(numberStr, delimiter) {

        var formattedDelimiter;
        var valueToString = numberStr.toString();
        var regexExp = /(\d+)(\d{3})/;

        if ( typeof delimiter  !== 'undefined' ){
            formattedDelimiter = delimiter;
        }
        else {
            formattedDelimiter = ',';
        }

        while (regexExp.test(valueToString)){
            valueToString = valueToString.replace(regexExp, '$1'+ formattedDelimiter +'$2');
        }
        return valueToString;
    }

    /**
     * Format the points input value
     */
    function formatPointsInputValue ($input) {

        formatPointsToNumberOnly($input); // Replace any non digit with " "

        $input.blur(function(){
            $(this).val(formatNumericValues($(this).val(), ",").toString());
        });
    }

    /**
     * Replace any non digit with " "
     * Input field is preserved as text field to allow ","
     * in the formatPointsInputValue function
     * @private
     */
    function formatPointsToNumberOnly ($input) {

        $input.keyup(function() {
            $(this).val(formatNumberOnly($(this).val()).toString());
        });
    }

    /**
     * Form input validation
     * @param $input
     */
    function formInputValidation ($input) {

        $input.blur(function(e) {
            e.stopPropagation();

            // Set up toggle class based on data attr validation
            var dataAttr = $(this).data("input-error");
            var $errorEL = $(".error-message[data-input-error=" + dataAttr + "]");

            // Toggle error message display property
            if ( !memberNumberValidation($input) ){
                return $errorEL.addClass("is-visible");
            }
            else {
                return $errorEL.removeClass("is-visible");
            }
        });
    }


    function showErrorForElement($element) {
        var errorMessage = $element.data('validation-required');
        if (!!errorMessage) {
            hideErrorForElement($element);
            $element.children('#contact-invalid-phone').append("<p class='error-message is-invalid'>" + errorMessage + "</p>");
        }
    }

    function hideErrorForElement($element) {
        $element.find('.error-message').remove();
    }

    /**
     * Form phone split input validation
     * @param $inputGroup
     */
    // TODO:: make it nice
    function formSplitPhoneInputValidation($inputGroup) {
        $.each($inputGroup.find('[data-validate-type="split-phone"]'), function(index, element) {
            if (!!element.value) {
                $inputGroup.removeClass('error');
                hideErrorForElement($inputGroup);
            } else {
                $inputGroup.addClass('error');
                showErrorForElement($inputGroup);
            }
        });
    }

    /**
     * Member number validation
     * @param $input
     * @returns {boolean}
     */
    function memberNumberValidation ($input) {
        return new RegExp($input.attr('data-validation-regex')).test($input.val());
    }


    /**
     * Replace any non digit character with ""
     * @private
     */
    function formatNumberOnly ($input) {
        if ( typeof $input !== "number" ){
            return $input.replace(/[^\d\.]+/g, '');
        }
    }

    /**
     * Shows remaining characters for an input field...does not actually limit the character input
     * @param  {jQuery} $input     the input field
     * @param  {jQuery} $errorElem the element that will display the updated limit
     * @param  {Number} limit      the number of characters that are allowed in the field
     * @return {null}
     */
    function limitInputbyCharacterCount($input, $errorElem, limit){
        var  charLimit = limit ? limit : $input.attr('maxlength') ? Number( $input.attr('maxlength') ) : 500 ; //todo: refactor this for readability
        if ($input.val().length < charLimit) {
            $errorElem.text( charLimit - $input.val().length + ' character(s) left'); // todo: turn this error message into a citiConfig property
            $('span.count').text(charLimit - $input.val().length + 'character(s) left'); //only for accessibility;
        } else {
            $errorElem.text('0 characters left');
            $('span.count').text(charLimit - $input.val().length + 'character(s) left');
        }
    }

    return {
        validateInput: validateInput,
        isMatchingInput: isMatchingInput,
        formatNumericValues: formatNumericValues,
        formatPointsInputValue: formatPointsInputValue,
        formatNumberOnly : formatNumberOnly,
        limitInputbyCharacterCount: limitInputbyCharacterCount,
        memberNumberValidation: memberNumberValidation,
        formInputValidation: formInputValidation,
        formSplitPhoneInputValidation: formSplitPhoneInputValidation
    };

})();


// Initializes an OAA Accessibility Slider
//
// Source: http://oaa-accessibility.org/example/32/

/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

citiShare.slider = (function() {
    "use strict";

    ////////////////////////////////////////////////////
    //
    // function slider() is a class to define an ARIA-enabled slider widget. The class
    // will create needed handles and define ARIA attributes for the slider
    //
    // @param(container_id string) container_id is the containing div for the slider
    //
    // @param(vert boolean) vert is true if the slider is vertical; false if horizontal
    //
    // @param(inc integer) inc is the increment value for the slider
    //
    // @param(jump integer) jump is the large increment value for the slider (pgUp/pgDown keys)
    //
    // @param(showVals boolean) showVals is true if the slider should display the value of the handles
    //
    // @param(range boolean) range is true if the slider is a range slider
    //
    // @param(val1 integer) val1 specifies the initial value of the slider or of the first
    //         slide handle if this is a range slider. Must be >= min.
    //
    // @param(val2 integer) val2 specifies the initial value of the second slide handle.
    //         Ignored if range is false (i.e. not a range slider). Must be <= max.
    //
    // @return N/A
    //
    function Slider(container_id, vert, min, max, inc, jump, showVals, range, val1, val2) {
        // define slider object properties
        this.keys = new KeyCodes();

        this.id = container_id;
        this.$container = $('#' + container_id);
        this.vert = vert;
        this.range = range;
        this.showVals = showVals;
        this.currency = this.$container.data('currency');

        // Store the size of the slider
        this.width = this.$container.outerWidth();
        this.height = this.$container.outerHeight();

        // Store the page position of the slider
        this.left = 0;
        this.top = 0;

        // Store the minimum and maximum and initial values
        this.min = min;
        this.max = max;
        this.inc = inc;
        this.jump = jump;
        this.val1 = val1;

        // If range is true, store the second value
        if (range === true) {
            this.val2 = val2;
        }
        /////////////// Create handles /////////////////

        this.$handle1 = undefined;
        this.$handle2 = undefined;

        if ( range === false) {
            // Create the handle
            this.$handle1 = this.createHandle(val1);
        } else {
            // create the range highlight div
            this.createRangeDiv();

            // Create the first handle
            this.$handle1 = this.createHandle(val1, 1);

            // create the second handle
            this.$handle2 = this.createHandle(val2, 2);
        }
    } // end slider constructor

    //
    // function keyCodes() is an object to contain key code values for the application
    //
    function KeyCodes() {
        // Define values for keycodes
        this.backspace  = 8;
        this.tab        = 9;
        this.enter      = 13;
        this.esc        = 27;

        this.space      = 32;
        this.pageup     = 33;
        this.pagedown   = 34;
        this.end        = 35;
        this.home       = 36;

        this.left       = 37;
        this.up         = 38;
        this.right      = 39;
        this.down       = 40;
    } // end keyCodes

    //
    // function createHandle() creates a handle for the slider. It defines ARIA attributes for
    // the handle and positions it at the specified value in the slider range. if showVals is true,
    // create and position divs to display the handle value.
    //
    // @param (val integer) val is the initial value of the handle
    //
    // @param (num integer) num is the handle number. (optional)
    //
    // @return (object) returns the object pointer of the newly created handle
    //
    Slider.prototype.createHandle = function(val, num) {
        var id = this.id + '_handle' + (num === undefined ? '' : num);
        var label = this.id + '_label' + (num === undefined ? '' : num);
        var controls = this.id + '_text' + (num === undefined ? '' : num);
        var $handle;

        var handleAttributes = {};

        if (document.getElementById(id)) {
            handleAttributes.id = id;
        }

        if (document.getElementById(label)) {
            handleAttributes['aria-labelledby'] = label;
        }

        if (document.getElementById(controls)) {
            handleAttributes['aria-controls'] = controls;
        }

        var handle = '<span id="' + id + '" class="' + (this.vert === true ? 'v':'h') +'sliderHandle" ' +
                          'role="slider" ' +
                          'aria-valuemin="' + this.min +
                          '" aria-valuemax="' + this.max;

        for (var attribute in handleAttributes) {
            if (handleAttributes.hasOwnProperty(attribute)) {
                handle += attribute + '="' + handleAttributes + '"';
            }
        }

        handle += '" tabindex="0"></span>';

        // Create the handle
        this.$container.append(handle);

        // store the handle object
        $handle = $('#' + id);

        if (this.showVals === true) {
            var valContainer = '<div id="' + id + '_val" class="' + (this.vert === true ? 'v':'h') + 'sliderValue" role="presentation"></div>';

            // Create the container.
            this.$container.append(valContainer);
        }

        // store the value object
        $handle = $('#' + id);

        // position handle
        this.positionHandle($handle, val);

        // bind handlers
        this.bindHandlers($handle);

        return $handle;
    }; // end createHandle()

    //
    // function createRangeDiv() creates a div for the highlight of a range slider. It sets the initial top or left position
    // to match that of the slider container.
    //
    // @return N/A
    //
    Slider.prototype.createRangeDiv = function() {
        var id = this.id + '_range';

        var range = '<div id="' + id + '" class="sliderRange"></div>';

        // Create the range div
        this.$container.append(range);

        // Store the div object
        this.$rangeDiv = $('#' + id);

        if (this.vert === false) { // horizontal slider
            this.$rangeDiv.css('top', this.top + 'px');
            this.$rangeDiv.css('height', this.$container.height() + 'px');
        } else { // vertical slider
            this.$rangeDiv.css('left', this.left + 'px');
            this.$rangeDiv.css('width', this.$container.width() + 'px');
        }
    }; // end createRangeDiv()

    //
    // function positionHandle() is a member function to position a handle at the specified value for the
    // slider. If showVal is true, it also positions and updates the displayed value container.
    //
    // @param($handle object) $handle is a pointer to the handle jQuery object to manipulate
    //
    // @param (val integer) val is the new value of the slider
    //
    // @return N/A
    //
    Slider.prototype.positionHandle = function($handle, val) {
        var handleHeight = $handle.outerHeight(); // the total height of the handle
        var handleWidth = $handle.outerWidth(); // the total width of the handle
        //var handleOffset; // the distance from the value position for centering the handle
        var xPos; // calculated horizontal position of the handle;
        var yPos; // calculated vertical position of the handle;
        var valPos; //calculated new pixel position for the value;

        if (this.vert === false) {
            // horizontal slider

            // calculate the horizontal pixel position of the specified value
            valPos = ((val - this.min) / (this.max - this.min)) * this.width + this.left;

            xPos = Math.round(valPos - (handleWidth / 2));
            yPos = Math.round(this.top + (this.height / 2) - (handleHeight / 2));
        } else {
            // vertical slider

            // calculate the vertical pixel position of the specified value
            valPos = ( (val - this.min) / (this.max - this.min) ) * this.height + this.top;

            xPos = Math.round(this.left + (this.width / 2) - (handleWidth / 2));
            yPos = Math.round(valPos - (handleHeight / 2));
        }

        // Set the position of the handle
        $handle.css('top', yPos + 'px');
        $handle.css('left', xPos + 'px');

        // Set the aria-valuenow position of the handle
        $handle.attr('aria-valuenow', val);

        // Update the stored handle values
        if (/1$/.test($handle.attr('id')) === true) {
            // first handle
            this.val1 = val;
        } else {
            // second handle
            this.val2 = val;
        }

        // if range is true, set the position of the range div
        if (this.range === true) {
            this.positionRangeDiv();
        }

        // if showVal is true, update the value container
        if (this.showVals === true) {
            this.updateValBox($handle, Math.round(valPos));
        }
    }; // end positionHandle()

    //
    // function positionRangeDiv() is a member function to reposition the range div when a handle is moved
    //
    // @return N/A
    //
    Slider.prototype.positionRangeDiv = function() {
        var pos; //calculated new range start position;
        var size; //calculated new range size;

        if (this.vert === false) { // Horizontal slider

            // calculate the range start position
            pos = Math.round( ((this.val1 - this.min) / (this.max - this.min)) * this.width) + this.left;

            // calculate the new range width
            size = Math.round( ((this.val2 - this.min) / (this.max - this.min)) * this.width) + this.left - pos;

            // set the new range position
            this.$rangeDiv.css('left', pos + 'px');

            // set the new range width
            this.$rangeDiv.css('width', size + 'px');
        } else {
            // calculate the range start position
            pos = Math.round(( (this.val1 - this.min) / (this.max - this.min)) * this.height)+ this.top;

            // calculate the new range width
            size = Math.round(( (this.val2 - this.min) / (this.max - this.min) ) * this.height) + this.top - pos;

            // set the new range position
            this.$rangeDiv.css('top', pos + 'px');

            // set the new range width
            this.$rangeDiv.css('height', size + 'px');
        }
    }; // end positionRangeDiv()

    //
    // function updateValBox() is a member function to reposition a handle value box and update its contents
    //
    // @param ($handle object) $handle is the jQuery object of the handle that was moved
    //
    // @param (valPos integer) is the pixel position of the slider value
    //
    // @return N/A
    //
    Slider.prototype.updateValBox = function($handle, valPos) {
        var $valBox = $('#' + $handle.attr('id') + '_val');

        var xPos; // horizontal pixel position of the box
        var yPos; // vertical pixel position of the box
        var commaValue = citiShare.util.convertToCommaFormat($handle.attr('aria-valuenow'));

        // Set the text in the box to the handle value
        $valBox.text(commaValue + ' ' + this.currency);

        // Trigger custom event with value data
        this.$container.trigger('sliderValue', [$handle.attr('aria-valuenow')]);

        // Set the position of the handle
        if (this.vert === false) {
            var boxWidth = $valBox.outerWidth();

            yPos = $handle.css('top');

            // Adjust the horizontal position to center the value box on the value position
            xPos = Math.round(valPos - (boxWidth / 2)) + 'px';
        } else {
            var boxHeight = $valBox.outerHeight();

            xPos = $handle.css('left');

            // Adjust the vertical position to center the value box on the value position
            yPos = Math.round(valPos - (boxHeight / 2)) + 'px';
        }

        // Set the position of the value box
        $valBox.css('top', yPos);
        $valBox.css('left', xPos);
    }; // end updateValBox()

    //
    // function bindHandlers() is a member function to bind event handlers to a slider handle
    //
    // @param ($handle object) $handle is the object pointer of the handle to bind handlers to
    //
    // @return N/A
    Slider.prototype.bindHandlers = function($handle) {
        var thisObj = this; // store the this pointer

        $handle.keydown(function(e) {
            return thisObj.handleKeyDown($handle, e);
        });

        $handle.keypress(function(e) {
            return thisObj.handleKeyPress($handle, e);
        });

        $handle.focus(function(e) {
            return thisObj.handleFocus($handle, e);
        });

        $handle.blur(function(e) {
            return thisObj.handleBlur($handle, e);
        });

        $handle.on('mousedown touchstart', function(e) {
            return thisObj.handleMouseDown($handle, e);
        });
    }; // end bindHandlers()

    //
    // function handleKeyDown() is a member function to process keydown events for a slider handle
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleKeyDown = function($handle, evt) {
        var newVal, stopVal;

        if (evt.ctrlKey || evt.shiftKey || evt.altKey) {
            // Do nothing
            return true;
        }

        switch (evt.keyCode) {
            case this.keys.home: {
                // move the handle to the slider minimum
                if (this.range === false) {
                    this.positionHandle($handle, this.min);
                } else {
                    if (/1$/.test($handle.attr('id')) === true) {
                        // handle 1 - move to the min value
                        this.positionHandle($handle, this.min);
                    } else {
                        // handle 2 - move to the position of handle 1
                        this.positionHandle($handle, this.val1);
                    }
                }
                evt.stopPropagation();
                //return false;
                break;
            }
            case this.keys.end: {
                if (this.range === false) {
                    // move the handle to the slider maximum
                    this.positionHandle($handle, this.max);
                } else {
                    if (/1$/.test($handle.attr('id')) === true) {
                        // handle 1 - move to the position of handle 2
                        this.positionHandle($handle, this.val2);
                    }
                    else {
                        // handle 2 - move to the max value
                        this.positionHandle($handle, this.max);
                    }
                }
                evt.stopPropagation();
                //return false;
                break;
            }
            case this.keys.pageup: {
                // Decrease by jump value

                newVal = $handle.attr('aria-valuenow') - this.jump;
                stopVal = this.min; // where to stop moving
                
                if (this.range === true) {
                    // if this is handle 2, stop when we reach the value
                    // for handle 1
                    if (/2$/.test($handle.attr('id')) === true) {
                        stopVal = this.val1;
                    }
                }

                // move the handle one jump increment toward the slider minimum
                // If value is less than stopVal, set at stopVal instead
                this.positionHandle($handle, (newVal > stopVal ? newVal : stopVal));

                evt.stopPropagation();
                //return false;
                break;
            }
            case this.keys.pagedown: {
                // Increase by jump value

                newVal = parseInt($handle.attr('aria-valuenow')) + this.jump;
                stopVal = this.max; // where to stop moving

                if (this.range === true) {
                    // if this is handle 1, stop when we reach the value
                    // for handle 2
                    if (/1$/.test($handle.attr('id')) === true) {
                        stopVal = this.val2;
                    }
                }

                // move the handle one jump increment toward the slider maximum
                // If value is greater than maximum, set at maximum instead
                this.positionHandle($handle, (newVal < stopVal ? newVal : stopVal));

                evt.stopPropagation();
                //return false;
                break;
            }
            case this.keys.left:
            case this.keys.up: { // decrement
                newVal = $handle.attr('aria-valuenow') - this.inc;
                stopVal = this.min; // where to stop moving
                
                if (this.range === true) {
                    // if this is handle 2, stop when we reach the value
                    // for handle 1
                    if (/2$/.test($handle.attr('id')) === true) {
                      stopVal = this.val1;
                    }
                }

                // move the handle one jump increment toward the stopVal
                // If value is less than stopVal, set at stopVal instead
                this.positionHandle($handle, (newVal > stopVal ? newVal : stopVal));

                evt.stopPropagation();
                //return false;
                break;
            }
            case this.keys.right:
            case this.keys.down: { // increment
                newVal = parseInt($handle.attr('aria-valuenow')) + this.inc;
                stopVal = this.max; // where to stop moving

                if (this.range === true) {
                  // if this is handle 1, stop when we reach the value
                  // for handle 2
                  if (/1$/.test($handle.attr('id')) === true) {
                    stopVal = this.val2;
                  }
                }

                // move the handle one increment toward the slider maximum
                // If value is greater than maximum, set at maximum instead
                this.positionHandle($handle, (newVal < stopVal ? newVal : stopVal));

                evt.stopPropagation();
                //return false;
                break;
            }
        } // end switch

        return true;
    }; // end handleKeyDown

    //
    // function handleKeyPress() is a member function to process keypress events for a slider handle. Needed for
    // browsers that perform window scrolling on keypress rather than keydown events.
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleKeyPress = function($handle, evt) {
        if (evt.ctrlKey || evt.shiftKey || evt.altKey) {
            // Do nothing
            return true;
        }
  
        switch (evt.keyCode) {
            case this.keys.home:
            case this.keys.pageup:
            case this.keys.end:
            case this.keys.pagedown:
            case this.keys.left:
            case this.keys.up:
            case this.keys.right:
            case this.keys.down: {
                // Consume the event
                evt.stopPropagation();
                //return false;
                break;
            }
        } // end switch
  
        return true;
    }; // end handleKeyDown

    //
    // function handleFocus() is a member function to process focus events for a slider handle
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleFocus = function($handle) {
        $handle.addClass('focus');
        $handle.css('z-index', '20');

        return true;
    }; // end handleFocus()

    //
    // function handleBlur() is a member function to process blur events for a slider handle
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleBlur = function($handle) {
        $handle.removeClass('focus');
        $handle.css('z-index', '10');

        return true;
    }; // end handleBlur()

    //
    // function handleMouseDown() is a member function to process mousedown events for a slider handle. The function
    // binds a mousemove handler
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleMouseDown = function($handle, evt) {

        var thisObj = this; // store the this pointer

        // remove focus highlight from all other slider handles on the page
        $('.hsliderHandle').removeClass('focus').css('z-index', '10');
        $('.vsliderHandle').removeClass('focus').css('z-index', '10');

        // Set focus to the clicked handle
        $handle.focus();

        // bind a mousemove event handler to the document to capture the mouse
        $(document).on('mousemove touchmove', function(e) {
          thisObj.handleMouseMove($handle, e);
        });

        //bind a mouseup event handler to the document to capture the mouse
        $(document).on('mouseup touchend', function(e) {
            return thisObj.handleMouseUp($handle, e);
        });

        evt.stopPropagation();
        return false;
    }; // end handleMouseDown()

    //
    // function handleMouseUp() is a member function to process mouseup events for a slider handle. The function
    // unbinds the mousemove handler
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleMouseUp = function($handle, evt) {
        // unbind the event listeners to release the mouse
        $(document).unbind('mousemove touchmove');
        $(document).unbind('mouseup touchend');

        evt.stopPropagation();
        return false;
    }; // end handleMouseUp()

    //
    // function handleMouseMove() is a member function to process mousemove events for a slider handle.
    //
    // @param ($handle object) $handle is the object associated with the event
    //
    // @parem (evt object) evt is the event object associated witthe the event
    //
    // @return (boolean) true if propagating; false if consuming event
    //
    Slider.prototype.handleMouseMove = function($handle, evt) {
        //var curVal = parseInt($handle.attr('aria-valuenow'));
        var newVal;
        var handleOffset;
        var sliderOffset = $('#' + this.id).offset().left;
        var startVal = this.min;
        var stopVal = this.max;

        if (this.range === true) {
            // if this is handle 1, set stopVal to be the value
            // for handle 2
            if (/1$/.test($handle.attr('id')) === true) {
                stopVal = this.val2;
            } else {
                // This is handle 2: Set startVal to be the value
                // for handle 1
                startVal = this.val1;
            }
        }

        if (this.vert === false) {
            // horizontal slider
            if (evt.pageX) {
                handleOffset = evt.pageX - sliderOffset;
            } else if (evt.originalEvent.changedTouches.length) {
                handleOffset = evt.originalEvent.changedTouches[0].pageX - sliderOffset;
            }
            // Calculate the new Slider value based on the horizontal pixel position of the mouse
            newVal = Math.round((handleOffset - this.left) / this.width * (this.max - this.min)) + this.min;
        } else {
            // vertical slider

            // Calculate the new Slider value based on the vertical pixel position of the mouse
            newVal = Math.round((evt.pageY - this.top) / this.height * (this.max - this.min)) + this.min;
        }

        if (newVal >= startVal && newVal <= stopVal) {
            // Do not move handle unless new value is a slider increment
            
            /* Pretty sure this is what they wanted to accomplish -Lucas*/
            this.positionHandle($handle, newVal - newVal%this.inc);
        } else if (newVal < startVal) {
            // value is less than minimum for slider - set handle to min
            this.positionHandle($handle, startVal);
        } else if (newVal > stopVal) {
            // value is greater than maximum for slider - set handle to max
            this.positionHandle($handle, stopVal);
        }

        evt.stopPropagation();
        return false;
    }; // end handleMouseMove

    Slider.prototype.updateSliderWidth = function() {
        var $handle = $('#' + this.id + '_handle');

        this.width = this.$container.outerWidth();
        this.positionHandle($handle, $handle.attr('aria-valuenow'));
    };

    function init(containerId, min, max, initialValue, increment, showMinClass, showMaxClass, formID) {
        var $sliderParent = $('#points-transfer-slider').parent();
        var slider = new Slider(containerId, false, min, max, increment, 5000, true, false, initialValue);

        $(window).resize(function() {
            citiShare.util.throttle(slider.updateSliderWidth());
        });

        if (showMinClass) {
            $sliderParent.find('.' + showMinClass).text(citiShare.util.convertToCommaFormat(min));
        }
        if (showMaxClass) {
            $sliderParent.find('.' + showMaxClass).text(citiShare.util.convertToCommaFormat(max));
        }

        if (formID) {
            $('#' + formID).on('sliderInputChange', function(e, sliderVal, $sliderHandle) {
                slider.positionHandle($sliderHandle, sliderVal);
            });
        }
    }

    return {
        init: init
    };
})();



/*
 * This function is used to calculate and handle multicolumn
 * accessible list.
 *
 * Parameters
 *   listId: UL element id
 *   nbOfColumn:  Number of columns
 *
 */
citiShare.accessibleMultiColumnList = function(listId, nbOfColumn) {

  "use strict";

  var config = {
    $list: $(listId),
    nbOfColumn: nbOfColumn,
    heights: [],
    tempColumnHeight: 0
  };

  /*
   * Calculate each column total height.
   */
  var getColumnsHeight = function getColumnsHeight() {

    // go through all the columns
    for(var i = 1; i <= config.nbOfColumn; i++) {
      var columnElements = config.$list.find('.my-account-accessible-list-column'+i);

      columnElements.each(_sumColumnElementsHeight);

      config.heights.push({
        position: i,
        height: config.tempColumnHeight
      });

      config.tempColumnHeight = 0;
    }
  };
  
  /*
   * Util function to sum columns height
   */
  var _sumColumnElementsHeight = function sumColumnElementsHeight() {
    config.tempColumnHeight += $(this).outerHeight(true);
  };

  /*
   * Set the margin top on the column reset element.
   */
  var setMarginTop = function setMarginTop() {

    for(var i = 0; i < config.heights.length - 1; i++) {
      var currentColumn = config.heights[i];
      var resetElement = config.$list.find('.reset'+currentColumn.position);

      // Set a negative margin top totalling the height of the previous column.
      resetElement.css('marginTop', Math.abs(currentColumn.height) * -1);
    }
  };

  /*
   * Set the height of the list.
   * This is necessary because the negative margin cause some height problems.
   */
  var setListHeight = function setListHeight() {

    var biggestHeight = 0;

    // Get the biggest height
    for(var i = 0; i < config.heights.length; i++) {
      var currentColumn = config.heights[i];
      if(currentColumn.height > biggestHeight) {
        biggestHeight = currentColumn.height;
      }
    }

    config.$list.css('height', biggestHeight);
  };


  /*
   * Resets list css.
   */
  var resetList = function resetList() {
    config.$list.find('li').css('margin-top', '');
    config.$list.css('height', '');
  };

  var placeList = function placeList() {
    getColumnsHeight();
    setMarginTop();
    setListHeight();
  };

  /*
   * Init the citiShare.accessibleMultiColumnList code.
   */
  var init = function init () {
    
    var resizeTimer;
    var gestureTime;

    placeList();

    $(window).on('resize', function() {
        clearTimeout(resizeTimer);
        // debounce functionality to prevent the laggity lag
        resizeTimer = setTimeout(function () {
          resetList();
          citiShare.showMore.resetHeights();
          if(window.innerWidth > 767) {
            placeList();
          }
        }, 100);
    });

    // Needed on ipad.
    $(window).on('gestureend', function() {
      clearTimeout(resizeTimer);
      // debounce functionality to prevent the laggity lag
      gestureTime = setTimeout(function() {
        var isIpad = /iPad/.test(navigator.userAgent) && !window.MSStream;
        if(isIpad) {
          resetList();
          placeList();
          citiShare.showMore.resetHeights();
        }
      }, 100);
    });
  };

  return {
    init: init,
    reset: resetList,
    place: placeList
  };
};

citiShare.backToTop = (function () {
  'use strict';
  var footerHeight = null;
  var backToTop = $('.back-to-top');
  var $categoryTitle = $('.category-title');
  var backToTopPadding = 0;
  var modalPointsTransferDisplay = null;

  function setBackToTopDesktop() {

    $(window).scroll(function () {

      footerHeight = $('#footer').outerHeight();
      modalPointsTransferDisplay = $('#modal-points-transfer').css('display') || 'none';

      if ($(this).scrollTop() && $(this).scrollTop() > 0 && modalPointsTransferDisplay === 'none') {
        backToTop.addClass('is-active');
      } else {
        backToTop.removeClass('is-active');
      }

      if ($(window).scrollTop() + $(window).height() > $(document).height() - footerHeight) {
        backToTop.addClass('stuck');
        backToTop.css('bottom', footerHeight + backToTopPadding + 'px');
      } else {
        backToTop.removeClass('stuck');
        backToTop.removeAttr('style');
      }

    });

    backToTop.click(function (e) {
      e.preventDefault();
      $('html, body').animate({
        scrollTop: 0
      }, 300, function () {
        backToTop.removeClass('is-active');
        $categoryTitle.attr('tabindex', '-1');
        $categoryTitle.focus();
      });

      return false;

    });
  }

  setBackToTopDesktop();

  return {
    setBackToTopDesktop: setBackToTopDesktop
  };

})();

"use strict";

/**
 * @namespace CITI
 */
var CITI = CITI || {};

/**
 * @memberof CITI
 * @function
 * @name exemple
 * @description This is my description function.
 *
 * @param {array}           p_array     Array element
 * @param {object|string}   p_element   Element to validate
 * @returns {boolean}
 *
 * @example
 * var exemple = CITI.exemple(['exemple1', 'exemple2'], 'exemple1');
 */
CITI.exemple = function (p_array, p_element) {
	var array	= p_array;
	var element = p_element;
	return (array === element);
};

citiShare.citiCarousel = (function($elem, settings) {
    
        'use strict';
        var _hasInited = false;
        var isResizing = false;
        var _carousel = $elem;
        var _nextArrow = '<button class="next-arrow omniture-slider-next" aria-label="Next Items"><label>Next Items</label><i class="icon icon_next-arrow"></button>';
        var _prevArrow = '<button class="prev-arrow omniture-slider-next omniture-slider-next" aria-label="Previous Items"><label>Previous Items</label><i class="icon icon_prev-arrow"></button>';
        var slickSettings = {
                dots:true,
                customPaging: function(slider, i) { 
                    if(i === 0){
                        return '<a href="#" class="omniture-slider-pagination" role="button"><span>Page '+parseInt(i+1)+' of '+Math.ceil(slider.slideCount/slider.options.slidesToShow)+' Selected</span></a>';
                    } else {
                        return '<a href="#" class="omniture-slider-pagination" role="button"><span>Page '+parseInt(i+1)+' of '+Math.ceil(slider.slideCount/slider.options.slidesToShow)+'</span></a>';
                    }
                },
                adaptiveHeight: true,
                accessibility: false,
                nextArrow:_nextArrow,
                prevArrow:_prevArrow,
                rows:1,
                swipe:true,
                touchMove:true,
                mobileFirst:true,
                slidesToShow:2,
                slidesToScroll:2,
                responsive: [
                            {
                                breakpoint:767,
                                settings:{
                                    slidesToShow:4,
                                    slidesToScroll:4
                                }
                            }
                            ]
        };

        var _settings = $.extend({}, slickSettings, settings);

        function _refresh() {
            console.log('refreshing');
        }

        function _init(){
            _carousel.on('afterChange', function() {
                setTimeout(function(){
                    if(isResizing === false) {
                        _carousel.find('.slick-slide').each(function(i, elem){
                            if($(elem).hasClass('slick-active')) {
                                $(elem).removeAttr('tabindex');
                                $(elem).find('a').removeAttr('tabindex');
                            } else {
                                $(elem).attr('tabindex',-1);
                                $(elem).find('a').attr('tabindex',-1);
                            }
                            _carousel.find('.slick-slide.slick-active:visible:first, .slick-slide.slick-active > a:visible:first').focus();
                        });
                    }
                }, 100);

                _carousel.find('.slick-dots li').removeAttr('aria-hidden');

                _carousel.find(".slick-dots a").each(function() {
                    var word = $(this).find('span').html().replace('Selected','');
                    $(this).find('span').html(word);
                });

                _carousel.find(".slick-dots li").each(function() {
                    if($(this).hasClass('slick-active')){
                        var word = $(this).find('a span:first-child').html() + " Selected";
                        $(this).find('a span:first-child').html(word);
                    }
                });
            });

            _carousel.on('beforeChange', function() {
                _carousel.find('.slick-dots a').blur();
                _carousel.find('.slick-dots li').removeAttr('aria-hidden');
            });

            _carousel.on('init', function() {

                setTimeout(function(){
                    _carousel.find('.slick-list').removeAttr('tabindex');
                    _carousel.slick('slickUnfilter');
                    _carousel.find('.slick-dots a').bind('click', function(){
                        $('.slick-dots li').removeAttr('aria-hidden');

                        _carousel.find(".slick-dots a").each(function() {
                            var word = $(this).find('span').html().replace('Selected','');
                            $(this).find('span').html(word);
                        });

                        var word = $(this).children('span').html() + " Selected";
                        $(this).children('span').html(word);
                    });

                    _carousel.find('.slick-dots li').removeAttr('aria-hidden');
                    var $prevbutton = _carousel.find('.prev-arrow');
                    var $nextbutton = _carousel.find('.next-arrow');
                    $prevbutton.insertAfter($nextbutton);
                    _checkForTabIndex();
                }, 100);
            });

            // on breakpoint changes, the buttons were moved back to their
            // original places breaking the tabbing order
            _carousel.on('breakpoint', function() {
                var $prevbutton = _carousel.find('.prev-arrow');
                var $nextbutton = _carousel.find('.next-arrow');
                $prevbutton.insertAfter($nextbutton);
                _checkForTabIndex();
            });

            _carousel = _carousel.slick(_settings);

            _carousel.on('setPosition', function() {
                var slidesShown = _carousel.slick('slickGetOption', 'slidesToShow');
                var numberOfSlides = _carousel.find('.slick-slide').length;
                
                if (slidesShown >= numberOfSlides) {
                    _carousel.find('.slick-track').css('left', '0');
                }
            });

            $('.slick-dots li').removeAttr('aria-hidden');
            _hasInited = true;
        }
        
        function _checkForTabIndex() {
            _carousel.find('.slick-slide').each(function(i, elem){
                if($(elem).hasClass('slick-active')) {
                    $(elem).removeAttr('tabindex');
                    $(elem).find('a').removeAttr('tabindex');
                } else {
                    $(elem).attr('tabindex',-1);
                    $(elem).find('a').attr('tabindex',-1);
                }
            });
        }

        function _destroy() {
            if(_hasInited) {
                _carousel.slick('unslick');
            }
        }

        function _set(option) {
            _carousel.slick(option);
        }

        return {
            carousel: _carousel,
            init:_init,
            set:_set,
            destroy:_destroy,
            refresh:_refresh
        };
});

/**
 * Bussiness rules for the validation of cart
 */

/*jshint unused:false, sub:true*/

citiShare.error = (function() {
    'use strict';

    var configs = {
      contactConfig: {
          SELECTOR: '[name="cart-checkout-contact"]',
          phone : {
            selector: "#input-cart-headerphone",
            validate: ["split-phone-group"]
          },
          email : {
            selector: "#input-cart-header-email",
            validate: ["email"]
          }
      },
      storeConfig: {
          SELECTOR: '[name="cart-instore-pickup-search"]',
          zip : {
            selector: "#instore-pickup-search-zip",
            validate: ['zip']
          },
          radius : {
            selector: "#instore-pickup-search-radius-button"
          }
      },
      egiftConfig: {
          SELECTOR: '[name="cart-items-egift-recipient"]',
          email : {
            selector: "#cart-items-edit-email",
            validate: ["email"]
          },
          email_confirm : {
            selector: "#cart-items-edit-confirm-email",
            validate: ["email", "match:cart-items-edit-email"],
            errors: {
              match:"#cart-items-recipient-invalid-email-match"
            }
          },
          name : {
            selector: "#cart-items-edit-name"
          }
      },
      shippingAddressConfig: {
        SELECTOR: '[name="cart-items-recipient"]',
        fname : {
          selector: "#input-cart-delivery-firstname"
        },
        lname : {
          selector: "#input-cart-delivery-lastname"
        },

        residential : {
          selector: "#radio-cart-delivery-residential"
        },
        business : {
          selector: "#radio-cart-delivery-business"
        },
        deliveryYes: {
          selector: "#radio-cart-delivery-yes",
          validate: ['required']
        },
        deliveryNo: {
          selector: "#radio-cart-delivery-no",
          validate: ['required']
        },
        address1 : {
          selector: "#input-cart-delivery-address1"
        },
        address2 : {
          selector: "#input-cart-delivery-address2",
          manual: true
        },
        city : {
          selector: "#input-cart-delivery-city"
        },
        district : {
          selector: "#input-cart-delivery-district"
        },
        phone : {
          selector: "#input-cart-delivery-phone"
        },
        email : {
          selector: "#input-cart-delivery-email"
        },
        state : {
          selector: "#input-cart-delivery-state"
        },
        zip : {
          selector: "#input-cart-delivery-zip",
          validate: ['zip']
        },
        country : {
          selector: "#input-cart-delivery-country"
        }
    },
    pointsToBuyConfig: {
        points : {
          selector: "#cart-purchase-points-1"
        },
        cardToBeBilled : {
          selector: "#cc-name"
        },
        cvv : {
          selector: "#cc-cvv"
        },
        expiration : {
          selector: "#cc-expiration-date-mm"
        },
        year : {
          selector: "#cc-expiration-date-yy"
        }
    },
    billingAddressConfig: {
        SELECTOR: '.cart-edit-point-to-buy-address',
        fname : {
          selector: "#input-cart-delivery-firstname"
        },
        lname : {
          selector: "#input-cart-delivery-lastname"
        },
        address1 : {
          selector: "#input-cart-delivery-address1"
        },
        city : {
          selector: "#input-cart-delivery-city"
        },
        state : {
          selector: "#input-cart-delivery-state"
        },
        zip : {
          selector: "#input-cart-delivery-zip",
          validate: ['zip']
        },
        country : {
          selector: "#input-cart-delivery-country"
        }
    }
    };

    function _standardizeInputs(){
        //should not be able to enter non numeric values
        $(configs.storeConfig.zip.selector, configs.shippingAddressConfig.zip.selector, configs.billingAddressConfig.zip.selector).keyup(function(){
            $(this).val(citiShare.formValidation.formatNumberOnly($(this).val()).toString());
        });
    }

    function _validateZipCode(){
        //web service code to validate zip code
        var $el = $(configs.storeConfig.zip.selector);

        /**
         * Length
         */
        if($el.val().length === 5){
            $('p[data-error-type="invalid-zip"]').removeClass('is-invalid');
            $el.removeClass('error');
            return false;
        }

        $('p[data-error-type="invalid-zip"]').addClass('is-invalid');
        $el.addClass('error');
        _focusElem($el);
        return true;
    }

    function _setFieldValid($field, includeError, valids) { 
      $field = $($field);
      includeError = typeof includeError !== 'undefined' ? includeError : true;
      valids = typeof valids !== 'undefined' ? valids : [];
      var $error = $field.closest('fieldset').find('#'+$field.attr('aria-describedby')+' .error-message');

      if ($field[0].tagName.toLowerCase() === 'select') {
        $field.next('.ui-selectmenu-button').removeClass('error');
      } else {
        $field.removeClass('error');
      }

      if (includeError) {
        $error.removeClass('is-invalid');
        valids.forEach(function(valid) {
          var errorId = $field.attr('data-client-validation-error-'+valid);
          if (errorId) {
            $(errorId).removeClass('is-invalid');
          }
        });
      }
    }
    function _setFieldInvalid($field, includeError, invalids) {
      $field = $($field);
      invalids = typeof invalids !== 'undefined' ? invalids : [];
      includeError = typeof includeError !== 'undefined' ? includeError : true;

      if ($field[0].tagName.toLowerCase() === 'select') {
        $field.next('.ui-selectmenu-button').addClass('error');
      } else {
        $field.addClass('error');
      }
      if (includeError) {
        //remove everything to start
        $field.closest('fieldset').find('#'+$field.attr('aria-describedby')+' .error-message').removeClass('is-invalid');
        invalids.forEach(function(invalid) {
          var errorId = $field.attr('data-client-validation-error-'+invalid);
          if (errorId) {
            $(errorId).addClass('is-invalid');
          }
        });

        //if it's only a match invalid, do not go on
        if (invalids.length === 1 && invalids[0] === 'match') {return;}

        var errorElem = $field.closest('fieldset').find('#'+$field.attr('aria-describedby')+' .error-message'); 
        if (invalids.indexOf('email') !== -1) {
           var filterElem = errorElem.filter('[data-error-type="invalid-email"]'); 
           if (filterElem.length > 0) {
             errorElem = filterElem;
           } 
        } else {
          errorElem = errorElem.first();
        }

        errorElem.addClass('is-invalid');
      }
    }

    function _isFieldValid($field) {
      $field = $($field);

      var validation = {
            valid: true,
            invalids:[],
            valids: []
          },
          isRequired = $field.attr('required'),
          pattern = $field.attr('pattern'),
          clientValidation = $field.attr('data-client-validation');

      if (!clientValidation) {return validation;}

      var validationTypes = clientValidation !== 'true' ? clientValidation.split(',') : [],
          val = '';

      if ($field.attr('type') === 'radio') {
        var name = $field.attr('name');
        var $checked = $field.closest('fieldset').find('[name="'+name+'"]:checked');
        if ($checked.length > 0) {
          val = $checked.val();
        }
      } else {
        val = $field.val();
      }

      if (isRequired) {
        validationTypes.push('required'); 
      }

      if (pattern) {
        validationTypes.push(pattern);
      }

      validationTypes.forEach(function(type) {
        if (type !== 'split-phone-group') { 
           if (type.match('match:')) {
             var $toMatch = $('#'+type.split(':')[1]);
             if ($toMatch.length > 0 && val !== $toMatch.val()) {
              validation.valid = false; 
              validation.invalids.push('match');
             } else {
               validation.valids.push('match');
             }
           } else if (!citiShare.formValidation.validateInput(val, type)) {
             validation.valid = false;
             validation.invalids.push(type);
           } else {
             validation.valids.push(type);
           }
        }
      });

      return validation;
    }

    function _validatePhoneGroup($parent) {
      var valid = true,
          $inputs = $parent.find('input');

      $inputs.each(function(i, elem) {
        var $el = $(elem),
            validation = _isFieldValid($el);

        if (!validation.valid) {
          valid = false;
          _setFieldInvalid($el, true, validation.invalids);
        } else {
          _setFieldValid($el, false, validation.valids);
        }
      });

      $inputs.each(function(i, elem) {
        if (valid) {
          _setFieldValid(elem);
        }
      });

      return valid;
    }

    function _validateField($field) {
      var validation = _isFieldValid($field);
      if (!validation.valid) {
        _setFieldInvalid($field, true, validation.invalids);
      } else {
        _setFieldValid($field, true, validation.valids);
      }

      return validation.valid;
    }

    function _validateFieldset(fieldset, config) {
      var valid = true,
          $fieldset = $(fieldset),
          $firstInvalid = null;

      for (var c in config) {
        if (config.hasOwnProperty(c) && typeof config[c].selector !== 'undefined') {
          var $el = $fieldset.find(config[c].selector);
          var $firstel = $fieldset.first().find(config[c].selector);

          if ($el.length > 0) {
            var thisValid = true;

            if ($el.hasClass('split-phone-group')) {
              thisValid = _validatePhoneGroup($el);
            } else {
              thisValid = _validateField($el);
            }
            if (!thisValid) {
              valid = false;

              if (!$firstInvalid) {
                $firstInvalid = $el;
              }
            }
          }
        }
      }

      if (!valid) {
        _focusElem($firstInvalid);
      }
      return valid;
    }

    function _validate(fieldsetElem) {
      var valid = true,
          $el = $(fieldsetElem);

      for (var c in configs) {
        if (configs.hasOwnProperty(c)) {
          var thisConfig = configs[c];

          if (typeof thisConfig.SELECTOR !== 'undefined') {
            if ($el.is(thisConfig.SELECTOR)) {
              return _validateFieldset($el, thisConfig);
            }
          } 
        }
      }

      return valid;
    }

    function _onClick(e) {
      e.preventDefault();
      var $e = $(e.target);
      var fieldsetElem = $e.closest('fieldset');

      if (_validate(fieldsetElem)) {
        return true;
        //CALL API
      }
    }

    function _validateAll() {
      var $fieldsets = $('fieldset');
      var valid = true;

      $fieldsets.each(function(i, fieldset) {
        var $f = $(fieldset);
        if ($f.hasClass('user-is-editing')) {
          var thisValid = _validate(fieldset);
          if (!thisValid) {
            valid = false;
          }
        }
      });
      
      if (!_validate($(configs.contactConfig.SELECTOR))) {
        valid = false;
      }

      return valid;
    }

    function _focusElem($el) {
      var $elToFocus = $($el);

      if (typeof $el === 'undefined' || typeof $elToFocus[0] === 'undefined') { return; }


      if ($elToFocus[0].tagName.toLowerCase() === 'select') {
        var elNext = $el.next('.ui-selectmenu-button');
        if (elNext.length > 0) {
          $elToFocus = elNext;
        }
      }

      $elToFocus.focus();
    }

    function _onContinueClick(e) {
      if (!_validateAll()) {
        e.preventDefault();
        $('.cart-summary .error-message').addClass('is-invalid');
        _focusElem($('input.error').first());
        return false;
      }
      $('.cart-summary .error-message').removeClass('is-invalid');
      return true;
    }

    function _onSubmit(e) {
      e.preventDefault();
    }

    function _onChange(e) {
      $(e.target).closest('[data-client-validation-fieldset]').addClass('user-is-editing');
      _onBlur(e);
    }

    function _onBlur(e) {
      var $field = $(e.target);
      if ($field.attr('data-client-validation').match('split-phone-group')) {
        _validatePhoneGroup($field.closest('.split-phone-group'));
      } else {
        _validateField($field);
      }
    }

    function _onQtyChange(e) {
      var $el = $(e.target),
          max = $el.attr('data-max'),
          val = $el.val();

      if (val === '' || parseInt(val, 10) === 0) {
        $el.val($el.attr('value'));
      } else if (max && parseInt(max, 10) < parseInt(val, 10)) {
        $el.val(max);
      }
    }

    function _bind() {
      $('form').submit(_onSubmit);
      $('body').on('change', '[data-client-validation]', _onChange);
      $('body').on('blur', '[data-client-validation]', _onBlur);
      $('body').on('click', 'form button[type="submit"]', _onClick);
      $('body').on('click', '.cart-buttons-continue', _onContinueClick);
      $('body').on('change blur', 'input[name="cart-checkout-item-qty"]', _onQtyChange);
    }

    function _initValidation() {

      var $forms = $('form');
      $forms.attr('novalidate', '');
    
      for (var config in configs) {
        if (configs.hasOwnProperty(config)) {
          var thisConfig = configs[config];
          var $thisFieldset = $(thisConfig.SELECTOR);
          $thisFieldset.attr('data-client-validation-fieldset', 'true');

          for (var c in thisConfig) {
            if (thisConfig.hasOwnProperty(c) && c !== 'SELECTOR') {
              var types = 'true';
              if (typeof thisConfig[c].validate !== 'undefined') {
                types = thisConfig[c].validate.join(',');
              }
              var $fields = $thisFieldset.find(thisConfig[c].selector);

              if ($fields.hasClass('split-phone-group')) {
                $fields = $fields.find('input');
              } 
              if (typeof thisConfig[c].manual === 'undefined' || !thisConfig[c].manual) {
                $fields.attr('data-client-validation', types);
              }

              if (typeof thisConfig[c].errors !== 'undefined') {
                for (var e in thisConfig[c].errors) {
                  if (thisConfig[c].errors.hasOwnProperty(e)) {
                    var error = thisConfig[c].errors[e];
                    $fields.attr('data-client-validation-error-'+e, error);
                  }
                }
              }
            }
          }
        }
      }

      _bind();
    }

    _standardizeInputs();

    return {
        initValidation: _initValidation,
        validateZipCode: _validateZipCode
    };

})();

citiShare.cart = (function() {
    'use strict';

    var cartConfig = {
        expiration : $('#cc-expiration-date-mm'),
        cvv : $('.cart-input[name="cart-cvv"]'),
        year : $('#cc-expiration-date-yy'),
        phoneGroup: $('.split-phone-group')
    };

    function _enableTabbbing() {
        // Enable tabbing and limit to numbers phone fields
        var $phoneSplitGroup = $('.split-phone-group').find('[data-validate-type="split-phone"]');
        if(typeof $phoneSplitGroup.autotab === 'function') {
          $phoneSplitGroup.autotab('number');
        }
    }

    function _openActiveFormPanel($targetContainer) {
        $targetContainer.find('.js-cart-edit').addClass('cart-edit-active');
        
        if($targetContainer.find('[name="cart-items-recipient"]').hasClass('cart-edit-active')){
            if($targetContainer.find('.js-cart-edit').find('p').first().hasClass('error-message')){
                $targetContainer.find('.js-cart-edit').find('input').first().focus();
            }else{
                $targetContainer.find('.js-cart-edit').find('p').first().attr('tabindex','0').focus();
            }
        }else{
            $targetContainer.find('.js-cart-edit').find('input').first().focus();
        }
        $targetContainer.find('.js-cart-edit-toggle-item').addClass('cart-hidden');
    }

    function _closeActiveFormPanels($formElements) {
        var $activeEl = $formElements.find('.cart-edit-active');
        $activeEl.removeClass('cart-edit-active').removeClass('user-is-editing').find('input').val('');
        $activeEl.find('.error').removeClass('error');
        $activeEl.find('.is-invalid').removeClass('is-invalid');
        $formElements.find('.js-cart-edit-toggle-item').removeClass('cart-hidden');
    }

    function _expirationOnChange(){
        cartConfig.expiration.on('selectmenuchange', function(){
            _calculateEnableSubmit(cartConfig.cvv.val(), cartConfig.expiration.val(), cartConfig.year.val());
        });
    }

    function _cartAccessibility(){
        $(window).bind('resize', function() {
            var pageWidth =  window.innerWidth || $(window).width();
            if(pageWidth > window.citiConfig.tabletBreakpoint){
                $('.cart-image-container > img').attr('role','presentation');
            }else{
                $('.cart-image-container > img').removeAttr('role');
            }
        }).trigger('resize');
    }

    function _yearOnChange(){
        cartConfig.year.on('selectmenuchange', function(){
            _calculateEnableSubmit(cartConfig.cvv.val(), cartConfig.expiration.val(), cartConfig.year.val());
        });
    }

    function _cvvOnChange(){
        cartConfig.cvv.on('blur', function(){
            _calculateEnableSubmit(cartConfig.cvv.val(), cartConfig.expiration.val(), cartConfig.year.val());
        });
    }

    function _showUpdateLink() {
        $('.cart-input-qty').on('input change', function() {
            var $el = $(this);
            var $editButton = $el.next('p.cart-items-edit');

            $editButton.removeClass('cart-hidden');
        });
    }

    function _calculateEnableSubmit(cvv,expiration,year){
        if((cvv !== undefined && cvv.length > 0) && expiration !== "1000" && year !== "1000"){
            $('button.cart-buttons-continue').removeClass('inactive');
            $('button.cart-buttons-continue').removeAttr('aria-disabled');
        }else{
            $('button.cart-buttons-continue').addClass('inactive');
            $('button.cart-buttons-continue').attr('aria-disabled','true');
        }
    }

    function _labelResponsiveTables(tableSelector) {
        var $tableCollection = $(tableSelector);

        $tableCollection.each(function() {
            var $tableEl = $(this);
            var $tableHeadings = $tableEl.find('th');
            var $tableRows =  $tableEl.find('tr');

            $tableRows.each(function() {
                var $tableCells = $(this).find('td');

                $tableHeadings.each(function(index) {
                    var label = $(this).html();
                    $tableCells.eq(index).prepend('<div class="cart-headers-item show-on-tablet-down ">'+ label +'</div>');
                });
            });
        });
    }
    
    function _showLocalPickup() {
      $('.cart-select-delivery-option').on('selectmenuchange', function() {
        if($('option:selected', this).data("local") === true) {
          $(this).parents().find('.cart-form-search-wrapper').show();
        } else {
          $(this).parents().find('.cart-form-search-wrapper').hide();
        }
      });
    }

    $('.js-cart-form-handler').on('click', 'a.js-cart-edit-open', function(event) {
        event.preventDefault();
        var error = false;
        var $target = $(this);
        var $formElements = $('.js-cart-form-handler');
        
        if($target.hasClass('submit-find')){
            error = citiShare.error.validateZipCode();
        }

        if ($target.hasClass('js-cart-edit-open') && !error) {
            if($target.attr('aria-expanded').length > 0){
                $target.attr('aria-expanded','true').addClass('isOpen');
            }
            var $targetContainer = $target.parents('.js-cart-edit-container');

            _closeActiveFormPanels($formElements);
            _openActiveFormPanel($targetContainer);
        }
        else {
            _closeActiveFormPanels($formElements);
        }
    });

    $("input[name=cart-result-option]").on('change', function(){
        $('.cart-items-value-tax').show();
        $('.cart-items-points-value-tax').css('display','block');
    });

    $('.js-cart-form-handler').on('click', 'a.js-cart-edit-close', function(event) {
        event.preventDefault();
        var $formElements = $('.js-cart-form-handler');

        _closeActiveFormPanels($formElements);
        $formElements.find('a.js-cart-edit-open').attr('aria-expanded','false');
        setTimeout(function() {
            $formElements.find('a.js-cart-edit-open.isOpen').focus();
            $formElements.find('a.js-cart-edit-open.isOpen').removeClass('isOpen');
        }, 1000);
    });

    $('textarea[name="cart-note"]').on('keyup', function() {
        var $this = $(this);
        // todo: maybe refactor this so that we're not so dependent
        // on html structure for the error field
        citiShare.formValidation.limitInputbyCharacterCount($this, $this.next('.js-cart-note-warning'));
    });

    $('input[type="radio"][name="cart-typeofaddress"]').on('change', function() {
        var $this = $(this);
        var type = $this.val();
        var $businessRadio = $this.closest('fieldset').find('input[value="business"]');
        var $businessWrapper = $this.closest('form').find('.input-cart-delivery-business-wrapper');

        if (type === 'business') {
            $businessWrapper.removeClass('is-hidden');
            $businessRadio.attr('aria-expanded','true');
        } else {
            $businessWrapper.addClass('is-hidden');
            $businessRadio.attr('aria-expanded','false');
        }
    });

    $('input[type="radio"][name="cart-typeofbuilding"]').on('change', function() {
        var $this = $(this);
        var type = $this.val();
        var $address2Error = $this.closest('form').find('#invalid-delivery-address-2 .error-message');
        var $address2Input = $this.closest('form').find('#input-cart-delivery-address2');

        if (type === 'yes') {
            $address2Input.attr('aria-required', 'true');
            $address2Input.attr('required', 'true');
            $address2Input.attr('data-client-validation', 'true');
        } else {
            $address2Error.removeClass('is-invalid');
            $address2Input.removeClass('error');
            $address2Input.attr('aria-required', 'false');
            $address2Input.attr('required', 'false');
            $address2Input.attr('data-client-validation', null);
        }
    });

    $('.cart-summary-totals label[for="toc"]').on('click', function() {
        if ($(".cart-summary-totals input").prop('checked') === true) {
            $('.cart-summary .cart-buttons-submit').addClass('inactive');
        } else {
            $('.cart-summary .cart-buttons-submit').removeClass('inactive');
        }
    });

    /**
     * "Change email recipient" behavior
     * Tough because you're hitting "Submit" on a form input
     * that isn't actually supposed to suibmit the form
     */
    var $itemForms = $('form[name="cart-checkout-cash-charity"]');
    $itemForms.on('click', '[name="cart-items-recipient"] :submit', function(event) {
        event.preventDefault();

        var $el = $(this);
        var $fieldset = $el.parents('fieldset[name="cart-items-recipient"]');
        var $form = $el.parents('form');
        var $formDOMEl = $form.get(0);
        var email, name, note;
        var $td;
        var cartHidden = 'cart-hidden';

        if (typeof $formDOMEl.checkValidity === 'function') {

            if ($formDOMEl.checkValidity() === true) {
                $td = $fieldset.parents('td');
                email = $fieldset.find('[name="cart-email"]').val();
                name = $fieldset.find('[name="cart-full-name"]').val();
                note = $fieldset.find('[name="cart-note"]').val();

                $fieldset.addClass(cartHidden).removeClass('cart-edit-active');

                $td.find('.cart-items-recipient-header').text('Sending to:');
                $td.find('.cart-items-recipient-email').text(email);
                $td.find('.cart-items-recipient-name').text(name).removeClass(cartHidden);
                if (note) {
                    $td.find('.cart-items-recipient-note').text(note).removeClass(cartHidden);
                }

                $td.find('.js-cart-edit-toggle-item').removeClass(cartHidden);
                $td.find('.cart-items-edit').addClass(cartHidden);
                $td.find('.cart-items-update').removeClass(cartHidden);
            }
            // else {
            //     // Handle invalid form input
            // }
        }
        // else {
        //     // How are we validating?
        // }

    });

    $itemForms.on('click', '.js-cart-edit-remove', function(event) {
        event.preventDefault();

        var $el = $(this);
        var $td = $el.parents('td');
        var $email = $td.find('.cart-items-recipient-email');
        var $name = $td.find('.cart-items-recipient-name');
        var $note = $td.find('.cart-items-recipient-note');
        var $header = $td.find('.cart-items-recipient-header');

        $header.text('Send to email on file:');
        $email.text('recipient@gmail.com');
        $name.text('').addClass('cart-hidden');
        $note.text('').addClass('cart-hidden');
        $td.find('.cart-items-edit').removeClass('cart-hidden');
        $td.find('.cart-items-update').addClass('cart-hidden');
    });

    // TODO:: on form submit trigger validateCartCheckout();

    _enableTabbbing();
    //_phoneNumberOnChange();
    _expirationOnChange();
    _yearOnChange();
    _cvvOnChange();
    _cartAccessibility();
    _labelResponsiveTables('section.cart-section:not(.cart-summary) table');
    _showUpdateLink();
    citiShare.error.initValidation();
    _showLocalPickup();

})();

/*jshint scripturl:true*/
//Based on the Deque University code, support added for multiple datepickers on the same page.
citiShare.datePicker = (function () {
  'use strict';

  function settupAccessibleDateicker() {
    $('.datepicker').datepicker({
      showOn: 'button',
      buttonImage: "", // File (and file path) for the calendar image
      buttonImageOnly: false,
      buttonText: 'Calendar View',
      dayNamesShort: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
      showButtonPanel: true,
      closeText: 'Close',
      onClose: removeAria
    });

    // Add aria-describedby to the button referring to the label
    $('.ui-datepicker-trigger').attr('aria-describedby', 'datepickerLabel');

    dayTripper();
  }

  function dayTripper() {
    $('.ui-datepicker-trigger').click(function () {
      $(this).prev().addClass("datepickerOpened");
      setTimeout(function () {
        var today = $('.ui-datepicker-today a')[0];
        if (!today) {
          today = $('.ui-state-active')[0] ||
            $('.ui-state-default')[0];
        }


        // Hide the entire page (except the date picker)
        // from screen readers to prevent document navigation
        // (by headings, etc.) while the popup is open
        $("main").attr('id', 'dp-container');
        $("#dp-container").attr('aria-hidden', 'true');
        $("#skipnav").attr('aria-hidden', 'true');

        // Hide the "today" button because it doesn't do what
        // you think it supposed to do
        $(".ui-datepicker-current").hide();

        today.focus();
        datePickHandler();
      }, 0);
    });
  }

  function datePickHandler() {
    var activeDate;
    var container = document.getElementById('ui-datepicker-div');
    var input = document.getElementsByClassName('datepickerOpened');

    if (!container || !input) {
      return;
    }

    $(container).find('table').first().attr('role', 'grid');

    container.setAttribute('role', 'application');
    container.setAttribute('aria-label', 'Calendar view date-picker');

    // the top controls:
    var prev = $('.ui-datepicker-prev', container)[0],
      next = $('.ui-datepicker-next', container)[0];


// This is the line that needs to be fixed for use on pages with base URL set in head
    next.href = 'javascript:void(0)';
    prev.href = 'javascript:void(0)';

    next.setAttribute('role', 'button');
    next.removeAttribute('title');
    prev.setAttribute('role', 'button');
    prev.removeAttribute('title');

    appendOffscreenMonthText(next);
    appendOffscreenMonthText(prev);

    // delegation won't work here for whatever reason, so we are
    // forced to attach individual click listeners to the prev /
    // next month buttons each time they are added to the DOM
    $(next).on('click', handleNextClicks);
    $(prev).on('click', handlePrevClicks);

    monthDayYearText();

    $(container).on('keydown', function calendarKeyboardListener(keyVent) {
      var which = keyVent.which;
      var target = keyVent.target;
      var dateCurrent = getCurrentDate(container);

      if (!dateCurrent) {
        dateCurrent = $('a.ui-state-default')[0];
        setHighlightState(dateCurrent, container);
      }

      if (27 === which) {
        keyVent.stopPropagation();
        return closeCalendar();
      } else if (which === 9 && keyVent.shiftKey) { // SHIFT + TAB
        keyVent.preventDefault();
        if ($(target).hasClass('ui-datepicker-close')) { // close button
          $('.ui-datepicker-prev')[0].focus();
        } else if ($(target).hasClass('ui-state-default')) { // a date link
          $('.ui-datepicker-close')[0].focus();
        } else if ($(target).hasClass('ui-datepicker-prev')) { // the prev link
          $('.ui-datepicker-next')[0].focus();
        } else if ($(target).hasClass('ui-datepicker-next')) { // the next link
          activeDate = $('.ui-state-highlight') ||
            $('.ui-state-active')[0];
          if (activeDate) {
            activeDate.focus();
          }
        }
      } else if (which === 9) { // TAB
        keyVent.preventDefault();
        if ($(target).hasClass('ui-datepicker-close')) { // close button
          activeDate = $('.ui-state-highlight') ||
            $('.ui-state-active')[0];
          if (activeDate) {
            activeDate.focus();
          }
        } else if ($(target).hasClass('ui-state-default')) {
          $('.ui-datepicker-next')[0].focus();
        } else if ($(target).hasClass('ui-datepicker-next')) {
          $('.ui-datepicker-prev')[0].focus();
        } else if ($(target).hasClass('ui-datepicker-prev')) {
          $('.ui-datepicker-close')[0].focus();
        }
      } else if (which === 37) { // LEFT arrow key
        // if we're on a date link...
        if (!$(target).hasClass('ui-datepicker-close') && $(target).hasClass('ui-state-default')) {
          keyVent.preventDefault();
          previousDay(target);
        }
      } else if (which === 39) { // RIGHT arrow key
        // if we're on a date link...
        if (!$(target).hasClass('ui-datepicker-close') && $(target).hasClass('ui-state-default')) {
          keyVent.preventDefault();
          nextDay(target);
        }
      } else if (which === 38) { // UP arrow key
        if (!$(target).hasClass('ui-datepicker-close') && $(target).hasClass('ui-state-default')) {
          keyVent.preventDefault();
          upHandler(target, container, prev);
        }
      } else if (which === 40) { // DOWN arrow key
        if (!$(target).hasClass('ui-datepicker-close') && $(target).hasClass('ui-state-default')) {
          keyVent.preventDefault();
          downHandler(target, container, next);
        }
      } else if (which === 13) { // ENTER
        if ($(target).hasClass('ui-state-default')) {
          setTimeout(function () {
            closeCalendar();
          }, 100);
        } else if ($(target).hasClass('ui-datepicker-prev')) {
          handlePrevClicks();
        } else if ($(target).hasClass('ui-datepicker-next')) {
          handleNextClicks();
        }
      } else if (32 === which) {
        if ($(target).hasClass('ui-datepicker-prev') || $(target).hasClass('ui-datepicker-next')) {
          target.click();
        }
      } else if (33 === which) { // PAGE UP
        moveOneMonth(target, 'prev');
      } else if (34 === which) { // PAGE DOWN
        moveOneMonth(target, 'next');
      } else if (36 === which) { // HOME
        var firstOfMonth = $(target).closest('tbody').find('.ui-state-default')[0];
        if (firstOfMonth) {
          firstOfMonth.focus();
          setHighlightState(firstOfMonth, $('#ui-datepicker-div')[0]);
        }
      } else if (35 === which) { // END
        var $daysOfMonth = $(target).closest('tbody').find('.ui-state-default');
        var lastDay = $daysOfMonth[$daysOfMonth.length - 1];
        if (lastDay) {
          lastDay.focus();
          setHighlightState(lastDay, $('#ui-datepicker-div')[0]);
        }
      }
      $(".ui-datepicker-current").hide();
    });

  }

  function closeCalendar() {
    var container = $('#ui-datepicker-div');
    $(container).off('keydown');
    var input = $('.datepickerOpened');
    $(input).datepicker('hide');
    input.focus();
  }

  function removeAria() {
    // make the rest of the page accessible again:
    $("#dp-container").removeAttr('aria-hidden');
    $("#skipnav").removeAttr('aria-hidden');
    $(".datepickerOpened").removeClass("datepickerOpened");
  }

///////////////////////////////
//////////////////////////// //
///////////////////////// // //
// UTILITY-LIKE THINGS // // //
///////////////////////// // //
//////////////////////////// //
///////////////////////////////

  function moveOneMonth(currentDate, dir) {
    var button = (dir === 'next') ? $('.ui-datepicker-next')[0] : $('.ui-datepicker-prev')[0];

    if (!button) {
      return;
    }

    var ENABLED_SELECTOR = '#ui-datepicker-div tbody td:not(.ui-state-disabled)';
    var $currentCells = $(ENABLED_SELECTOR);
    var currentIdx = $.inArray(currentDate.parentNode, $currentCells);

    button.click();
    setTimeout(function () {
      updateHeaderElements();

      var $newCells = $(ENABLED_SELECTOR);
      var newTd = $newCells[currentIdx];
      var newAnchor = newTd && $(newTd).find('a')[0];

      while (!newAnchor) {
        currentIdx--;
        newTd = $newCells[currentIdx];
        newAnchor = newTd && $(newTd).find('a')[0];
      }

      setHighlightState(newAnchor, $('#ui-datepicker-div')[0]);
      newAnchor.focus();

    }, 0);

  }

  function handleNextClicks() {
    setTimeout(function () {
      updateHeaderElements();
      prepHighlightState();
      $('.ui-datepicker-next').focus();
      $(".ui-datepicker-current").hide();
    }, 0);
  }

  function handlePrevClicks() {
    setTimeout(function () {
      updateHeaderElements();
      prepHighlightState();
      $('.ui-datepicker-prev').focus();
      $(".ui-datepicker-current").hide();
    }, 0);
  }

  function previousDay(dateLink) {
    var container = document.getElementById('ui-datepicker-div');
    if (!dateLink) {
      return;
    }
    var td = $(dateLink).closest('td');
    if (!td) {
      return;
    }

    var prevTd = $(td).prev(),
      prevDateLink = $('a.ui-state-default', prevTd)[0];

    if (prevTd && prevDateLink) {
      setHighlightState(prevDateLink, container);
      prevDateLink.focus();
    } else {
      handlePrevious(dateLink);
    }
  }


  function handlePrevious(target) {
    var container = document.getElementById('ui-datepicker-div');
    if (!target) {
      return;
    }
    var currentRow = $(target).closest('tr');
    if (!currentRow) {
      return;
    }
    var previousRow = $(currentRow).prev();

    if (!previousRow || previousRow.length === 0) {
      // there is not previous row, so we go to previous month...
      previousMonth();
    } else {
      var prevRowDates = $('td a.ui-state-default', previousRow);
      var prevRowDate = prevRowDates[prevRowDates.length - 1];

      if (prevRowDate) {
        setTimeout(function () {
          setHighlightState(prevRowDate, container);
          prevRowDate.focus();
        }, 0);
      }
    }
  }

  function previousMonth() {
    var prevLink = $('.ui-datepicker-prev')[0];
    var container = document.getElementById('ui-datepicker-div');
    prevLink.click();
    // focus last day of new month
    setTimeout(function () {
      var trs = $('tr', container),
        lastRowTdLinks = $('td a.ui-state-default', trs[trs.length - 1]),
        lastDate = lastRowTdLinks[lastRowTdLinks.length - 1];

      // updating the cached header elements
      updateHeaderElements();

      setHighlightState(lastDate, container);
      lastDate.focus();

    }, 0);
  }

///////////////// NEXT /////////////////
  /**
   * Handles right arrow key navigation
   * @param  {HTMLElement} dateLink The target of the keyboard event
   */
  function nextDay(dateLink) {
    var container = document.getElementById('ui-datepicker-div');
    if (!dateLink) {
      return;
    }
    var td = $(dateLink).closest('td');
    if (!td) {
      return;
    }
    var nextTd = $(td).next(),
      nextDateLink = $('a.ui-state-default', nextTd)[0];

    if (nextTd && nextDateLink) {
      setHighlightState(nextDateLink, container);
      nextDateLink.focus(); // the next day (same row)
    } else {
      handleNext(dateLink);
    }
  }

  function handleNext(target) {
    var container = document.getElementById('ui-datepicker-div');
    if (!target) {
      return;
    }
    var currentRow = $(target).closest('tr'),
      nextRow = $(currentRow).next();

    if (!nextRow || nextRow.length === 0) {
      nextMonth();
    } else {
      var nextRowFirstDate = $('a.ui-state-default', nextRow)[0];
      if (nextRowFirstDate) {
        setHighlightState(nextRowFirstDate, container);
        nextRowFirstDate.focus();
      }
    }
  }

  function nextMonth() {
    var nextMon = $('.ui-datepicker-next')[0];
    var container = document.getElementById('ui-datepicker-div');
    nextMon.click();
    // focus the first day of the new month
    setTimeout(function () {
      // updating the cached header elements
      updateHeaderElements();

      var firstDate = $('a.ui-state-default', container)[0];
      setHighlightState(firstDate, container);
      firstDate.focus();
    }, 0);
  }

/////////// UP ///////////
  /**
   * Handle the up arrow navigation through dates
   * @param  {HTMLElement} target   The target of the keyboard event (day)
   * @param  {HTMLElement} cont     The calendar container
   * @param  {HTMLElement} prevLink Link to navigate to previous month
   */
  function upHandler(target, cont, prevLink) {
    prevLink = $('.ui-datepicker-prev')[0];
    var rowContext = $(target).closest('tr');
    if (!rowContext) {
      return;
    }
    var rowTds = $('td', rowContext),
      rowLinks = $('a.ui-state-default', rowContext),
      targetIndex = $.inArray(target, rowLinks),
      prevRow = $(rowContext).prev(),
      prevRowTds = $('td', prevRow),
      parallel = prevRowTds[targetIndex],
      linkCheck = $('a.ui-state-default', parallel)[0];

    if (prevRow && parallel && linkCheck) {
      // there is a previous row, a td at the same index
      // of the target AND theres a link in that td
      setHighlightState(linkCheck, cont);
      linkCheck.focus();
    } else {
      // we're either on the first row of a month, or we're on the
      // second and there is not a date link directly above the target
      prevLink.click();
      setTimeout(function () {
        // updating the cached header elements
        updateHeaderElements();
        var newRows = $('tr', cont),
          lastRow = newRows[newRows.length - 1],
          lastRowTds = $('td', lastRow),
          tdParallelIndex = $.inArray(target.parentNode, rowTds),
          newParallel = lastRowTds[tdParallelIndex],
          newCheck = $('a.ui-state-default', newParallel)[0];

        if (lastRow && newParallel && newCheck) {
          setHighlightState(newCheck, cont);
          newCheck.focus();
        } else {
          // theres no date link on the last week (row) of the new month
          // meaning its an empty cell, so we'll try the 2nd to last week
          var secondLastRow = newRows[newRows.length - 2],
            secondTds = $('td', secondLastRow),
            targetTd = secondTds[tdParallelIndex],
            linkCheck = $('a.ui-state-default', targetTd)[0];

          if (linkCheck) {
            setHighlightState(linkCheck, cont);
            linkCheck.focus();
          }

        }
      }, 0);
    }
  }

//////////////// DOWN ////////////////
  /**
   * Handles down arrow navigation through dates in calendar
   * @param  {HTMLElement} target   The target of the keyboard event (day)
   * @param  {HTMLElement} cont     The calendar container
   * @param  {HTMLElement} nextLink Link to navigate to next month
   */
  function downHandler(target, cont, nextLink) {
    nextLink = $('.ui-datepicker-next')[0];
    var targetRow = $(target).closest('tr');
    if (!targetRow) {
      return;
    }
    var targetCells = $('td', targetRow),
      cellIndex = $.inArray(target.parentNode, targetCells), // the td (parent of target) index
      nextRow = $(targetRow).next(),
      nextRowCells = $('td', nextRow),
      nextWeekTd = nextRowCells[cellIndex],
      nextWeekCheck = $('a.ui-state-default', nextWeekTd)[0];

    if (nextRow && nextWeekTd && nextWeekCheck) {
      // theres a next row, a TD at the same index of `target`,
      // and theres an anchor within that td
      setHighlightState(nextWeekCheck, cont);
      nextWeekCheck.focus();
    } else {
      nextLink.click();

      setTimeout(function () {
        // updating the cached header elements
        updateHeaderElements();

        var nextMonthTrs = $('tbody tr', cont),
          firstTds = $('td', nextMonthTrs[0]),
          firstParallel = firstTds[cellIndex],
          firstCheck = $('a.ui-state-default', firstParallel)[0];

        if (firstParallel && firstCheck) {
          setHighlightState(firstCheck, cont);
          firstCheck.focus();
        } else {
          // lets try the second row b/c we didnt find a
          // date link in the first row at the target's index
          var secondRow = nextMonthTrs[1],
            secondTds = $('td', secondRow),
            secondRowTd = secondTds[cellIndex],
            secondCheck = $('a.ui-state-default', secondRowTd)[0];

          if (secondRow && secondCheck) {
            setHighlightState(secondCheck, cont);
            secondCheck.focus();
          }
        }
      }, 0);
    }
  }

// add an aria-label to the date link indicating the currently focused date
// (formatted identically to the required format: mm/dd/yyyy)
  function monthDayYearText() {
    var cleanUps = $('.amaze-date');

    $(cleanUps).each(function (clean) {
      // each(cleanUps, function (clean) {
      clean.parentNode.removeChild(clean);
    });

    var datePickDiv = document.getElementById('ui-datepicker-div');
    // in case we find no datepick div
    if (!datePickDiv) {
      return;
    }

    var dates = $('a.ui-state-default', datePickDiv);

    $(dates).each(function (index, date) {
      var currentRow = $(date).closest('tr'),
        currentTds = $('td', currentRow),
        currentIndex = $.inArray(date.parentNode, currentTds),
        headThs = $('thead tr th', datePickDiv),
        dayIndex = headThs[currentIndex],
        daySpan = $('span', dayIndex)[0],
        monthName = $('.ui-datepicker-month', datePickDiv)[0].innerHTML,
        year = $('.ui-datepicker-year', datePickDiv)[0].innerHTML,
        number = date.innerHTML;

      if (!daySpan || !monthName || !number || !year) {
        return;
      }

      // AT Reads: {month} {date} {year} {day}
      // "December 18 2014 Thursday"
      var dateText = monthName + ' ' + date.innerHTML + ' ' + year + ' ' + daySpan.title;
      // AT Reads: {date(number)} {name of day} {name of month} {year(number)}
      // var dateText = date.innerHTML + ' ' + daySpan.title + ' ' + monthName + ' ' + year;
      // add an aria-label to the date link reading out the currently focused date
      date.setAttribute('aria-label', dateText);
    });
  }


// update the cached header elements because we're in a new month or year
  function updateHeaderElements() {
    var context = document.getElementById('ui-datepicker-div');
    if (!context) {
      return;
    }

    $(context).find('table').first().attr('role', 'grid');

    var prev = $('.ui-datepicker-prev', context)[0];
    var next = $('.ui-datepicker-next', context)[0];

    //make them click/focus - able
    next.href = 'javascript:void(0)';
    prev.href = 'javascript:void(0)';

    next.setAttribute('role', 'button');
    prev.setAttribute('role', 'button');
    appendOffscreenMonthText(next);
    appendOffscreenMonthText(prev);

    $(next).on('click', handleNextClicks);
    $(prev).on('click', handlePrevClicks);

    // add month day year text
    monthDayYearText();
  }


  function prepHighlightState() {
    var highlight;
    var cage = document.getElementById('ui-datepicker-div');
    highlight = $('.ui-state-highlight', cage)[0] ||
      $('.ui-state-default', cage)[0];
    if (highlight && cage) {
      setHighlightState(highlight, cage);
    }
  }

// Set the highlighted class to date elements, when focus is recieved
  function setHighlightState(newHighlight, container) {
    var prevHighlight = getCurrentDate(container);
    // remove the highlight state from previously
    // highlighted date and add it to our newly active date
    $(prevHighlight).removeClass('ui-state-highlight');
    $(newHighlight).addClass('ui-state-highlight');
  }


// grabs the current date based on the hightlight class
  function getCurrentDate(container) {
    return  $('.ui-state-highlight', container)[0];
  }

  /**
   * Appends logical next/prev month text to the buttons
   * - ex: Next Month, January 2015
   *       Previous Month, November 2014
   */
  function appendOffscreenMonthText(button) {
    var buttonText;
    var isNext = $(button).hasClass('ui-datepicker-next');
    var months = [
      'january', 'february',
      'march', 'april',
      'may', 'june', 'july',
      'august', 'september',
      'october',
      'november', 'december'
    ];

    var currentMonth = $('.ui-datepicker-title .ui-datepicker-month').text().toLowerCase();
    var monthIndex = $.inArray(currentMonth.toLowerCase(), months);
    var currentYear = $('.ui-datepicker-title .ui-datepicker-year').text().toLowerCase();
    var adjacentIndex = (isNext) ? monthIndex + 1 : monthIndex - 1;

    if (isNext && currentMonth === 'december') {
      currentYear = parseInt(currentYear, 10) + 1;
      adjacentIndex = 0;
    } else if (!isNext && currentMonth === 'january') {
      currentYear = parseInt(currentYear, 10) - 1;
      adjacentIndex = months.length - 1;
    }

    buttonText = (isNext) ? 'Next Month, ' + firstToCap(months[adjacentIndex]) + ' ' + currentYear : 'Previous Month, ' + firstToCap(months[adjacentIndex]) + ' ' + currentYear;

    $(button).find('.ui-icon').html(buttonText);

  }

// Returns the string with the first letter capitalized
  function firstToCap(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
  }

  settupAccessibleDateicker();
})();
citiShare.detailedList = (function () {
  'use strict';

  function _tabListKeyPress(event) {
    if (event.which === 37 || event.which === 38 ||
      (event.which === 33 && event.ctrlKey)) { //left/up/ctrl+pageup
      var prevItem = $(event.currentTarget).prev("li");
      if (prevItem.length > 0) {
        _focusTab(prevItem);
        event.preventDefault();
      } else {
        //go to the last one
        var lastItem = $(event.currentTarget).siblings("li").last();
        _focusTab(lastItem);
        event.preventDefault();
      }
    } else if (event.which === 39 || event.which === 40 ||
      (event.which === 34 && event.ctrlKey)) { //right/down/ctrl+pagedown
      var nextItem = $(event.currentTarget).next("li");
      if (nextItem.length > 0) {
        _focusTab(nextItem);
        event.preventDefault();
      } else {
        //go to the first one
        var firstItem = $(event.currentTarget).siblings("li").first();
        _focusTab(firstItem);
        event.preventDefault();
      }

    }
  }

  function _tabListClick(event) {
    _focusTab($(event.currentTarget));
  }

  function _focusTab(newTab) {
    // Identify existing focus tab and: 1) Unset aria-selected, 2) set tabindex=-1, 3) replace
    // active class with inactive on both the tab and the panel, 4) set aria-hidden on panel
    var activeTab = $('.tablist-points-header > li.active');

    activeTab
      .addClass("inactive")
      .removeClass("active")
      .attr("aria-selected", "false")
      .attr("tabindex", "-1");

    $("#" + activeTab.attr("aria-controls"))
      .addClass("inactive")
      .removeClass("active")
      .attr("aria-hidden", "true");

    // For newly focused tab: 1) Set aria-selected, 2) set tabindex=0, 3) replace inactive class
    // with active on both tab and panel, 4) unset aria-hidden on panel

    newTab
      .addClass("active")
      .removeClass("inactive")
      .attr("aria-selected", "true")
      .attr("tabindex", "0");

    $("#" + newTab.attr("aria-controls"))
      .addClass("active")
      .removeClass("inactive")
      .attr("aria-hidden", "false");

    newTab.focus();
  }

  /**
   * Open a detailed list based on the href of the link selected
   * The href attribute of the link should match the id of the detailed list container
   */
  function _toggleList() {
    $(".detailed-list-link:not([data-bounded='true'])").each(function () {
      var listLink = $(this),
        listsToShow = $(listLink.data("attached-lists"));
      listLink.attr("data-bounded", "true");

      $(listLink).click(function () {
        listsToShow.each(function () {
          if ($(this).attr("aria-hidden") === "true") {
            listLink.focus();
            $(this).show();
            $(listLink).find("span:first-child").addClass("turnover");
            $(listLink).attr("aria-expanded", "true");
            $(this).attr("aria-hidden", "false");
          } else {
            var listElement = $(this),
              listElementSubList = listElement.find(".sub-detailed-list"),
              listElementMini = listElement.find(".detailed-list-link-mini");

            listElement.hide();
            listElement.attr("aria-hidden", "true");

            listElementSubList.hide();
            listElementSubList.attr("aria-hidden", "true");

            $(listLink).find("span:first-child").removeClass("turnover");
            $(listLink).attr("aria-expanded", "false");

            listElementMini.attr("aria-expanded", "false");
          }
        });
      });
    });
  }

  function _initTabPanel() {
    $('.tablist-points-header > li')
      .keydown(_tabListKeyPress)
      .click(_tabListClick);
  }

  _toggleList();
  _initTabPanel();

  return {
    toggleList: _toggleList
  };
})();

'use strict';

var FAQsSection = function(element) {
  this.element = element;
  this.faqAccordion = element.querySelector('.faqs-accordion-section .information-accordion');

  this._init();
};

FAQsSection.prototype._init = function() {
  this._checkForExpandedAccordion();
};

FAQsSection.prototype._checkForExpandedAccordion = function() {
  var autoOpenMenu;

  if(this.faqAccordion) {
    autoOpenMenu = this.faqAccordion.querySelector('[data-open-onload="true"]');
  } else {
    return;
  }

  if(autoOpenMenu){
    this._openAccordionMenu(autoOpenMenu);
  } else {
    this._openAccordionMenu(this.faqAccordion.firstElementChild);
  }
};

FAQsSection.prototype._openAccordionMenu = function(parentElement) {
  var firstElementHeader = parentElement.querySelector('.accordion-toggle-header');
  var firstElementContent = parentElement.querySelector('.accordionSubMenu');

  firstElementHeader.setAttribute('aria-expanded', 'true');
  firstElementContent.setAttribute('aria-expanded', 'true');

  firstElementHeader.classList.add('expanded');
  firstElementContent.classList.add('expanded');

  firstElementHeader.classList.remove('is-hidden');
  firstElementContent.classList.remove('is-hidden');
};

FAQsSection.init = function() {
  var faqsElement = document.querySelector('.faqs');

  if (faqsElement) {
    return new FAQsSection(faqsElement);
  }
};

citiShare.faqsSection = (function() {
  FAQsSection.init();
})();

/*jshint unused:false, sub:true*/

'use strict';

function _toArray(arrayLike) {
  return Array.prototype.slice.call(arrayLike);
}

var FilterTabs = function(element) {
  /**
   * Base element
   * @type {Element}
   */
  this._element = element;

  /**
   * Base element
   * @type {jQuery}
   */
  this.$el = $(element);

  /**
   * Filter tabs
   * @type {Array}
   */
  this._$tabs = $('.' + FilterTabs.ClassName.TABS);

  /**
   * Filter tabs
   * @type {Array}
   */
  this._tabs = _toArray(this._$tabs);

  /**
   * Anchors elements within tabs
   * @type {Array}
   */
  this._$anchors = $('.' + FilterTabs.ClassName.ANCHOR);

  /**
   * Filter Dropdowns
   * @type {Array}
   */
  this._$filters = $('.filter-menu-wrapper ' + '.' + FilterTabs.ClassName.FILTER_DD);

  this._clickListener = this._handleClickEvent.bind(this);
  this._resizeListener = this._handleResize.bind(this);
  this._keydownListener = this._handleKeyPress.bind(this);

  this._isMobile = false;
  this._isDesktop = false;
  this._activeTab = null;

  this._widthClass = 'options-5';

  this._init();
};

/**
 * Initializes the filterTabs component
 */
FilterTabs.prototype._init = function() {
  this._processTabs();
  this._handleResize();
  this._bindEvents();

  //hard-coded first value
  this._activeTab = this._$tabs.eq(0)[0];
  $(this._activeTab).addClass('filter-tabs-tab--active');
  this._getFilterList();
};

/**
 * Adds aria states for screen readers
 */
FilterTabs.prototype._processTabs = function() {
  this.$el.attr('role', 'tablist');

  this._$tabs.attr({
    role: 'tab',
    tabIndex: 0
  });

  this._$anchors.attr({
    tabIndex: -1,
    'aria-selected': false
  });
};

/**
 * Binds window, click, and keypress events to tabs
 */
FilterTabs.prototype._bindEvents = function() {
  $(window).on('resize.filterTabs orientationchange.filterTabs', this._resizeListener);
  this._$tabs.on('click.filterTabs', this._clickListener);
  this._$tabs.on('keydown.filterTabs', this._keydownListener);
};

/**
 * Registers the active tab
 * @param {Event} e jQuery Event
 */
FilterTabs.prototype._handleClickEvent = function(e) {
  e.preventDefault();

  if (this._activeTab !== e.currentTarget) {
    if (this._activeTab !== null) {
      $(this._activeTab).removeClass('filter-tabs-tab--active');
    }

    citiShare.filterMenu.clearAllFilters();

    this._activeTab = e.currentTarget;
    $(this._activeTab).addClass('filter-tabs-tab--active');
    this._getFilterList();
  }
};

/**
 * Registers the active tab on `ENTER` keypress
 * and move between tabs on `LEFT` or `RIGHT` keypress
 * @param {Event} e jQuery Event
 */
FilterTabs.prototype._handleKeyPress = function(e) {

  var focusedTab = this._clamp(this._getFocusedTabIndex());

  switch(e.which) {
    case FilterTabs.Keys.ENTER:
      this._handleClickEvent(e);
      break;

    case FilterTabs.Keys.LEFT:
      focusedTab--;
      this._focusTab(focusedTab);
      break;

    case FilterTabs.Keys.RIGHT:
      focusedTab++;
      this._focusTab(focusedTab);
      break;
  }
};

/**
 * Focus on a tab.
 * @param {number} index Tab index to focus on.
 */
FilterTabs.prototype._focusTab = function(index) {
  this._$tabs.eq(index).focus();
};

/**
 * Clamp a value between valid indexes of the tabs.
 * @param {number} index Index to clamp.
 * @return {number} Clamped index.
 */
FilterTabs.prototype._clamp = function(index) {
  return Math.min(Math.max(index, 0), this._tabs.length - 1);
};

/**
 * Find the index of the currently focused tab.
 * @return {number}
 */
FilterTabs.prototype._getFocusedTabIndex = function() {
  var $focusedTab = $(document.activeElement).closest('.' + FilterTabs.ClassName.TABS);
  return this._$tabs.index($focusedTab);
};

/**
 * Gets the name of filters associated with the active tab
 */
FilterTabs.prototype._getFilterList = function() {
  var filters = this._activeTab.getAttribute('data-filters');
  this._filtersList = filters.split(',');
  this._determineActiveFilters();
};

/**
 * Shows the filters associated with the active tab, and hides
 * the rest
 */
FilterTabs.prototype._determineActiveFilters = function() {
  this._$filters.each(this._hideFilters.bind(this));
  this._setWidthClass();
  this._filtersList.forEach(this._setActiveFilter.bind(this));
};

/**
 * Hides filter dropdown and button
 * @param {Number} i Index of filter in array
 * @param {Element} el Filter dropdown DOM Element
 */
FilterTabs.prototype._hideFilters = function(i, el) {
  var $el = $(el);
  var button = $($el.next('button')[0]);
  button.addClass('is-hidden');
  button.attr('aria-hidden', true);
  button.removeClass(this._widthClass);
};

/**
 * Sets an active filter
 * @param {string} filter Filter id
 */
FilterTabs.prototype._setActiveFilter = function(filter) {
  var el = _toArray(this._$filters).filter(function(element) {
    return element.getAttribute('data-id') === filter;
  })[0];

  var elIndex = this._$filters.index(el);

  var $filterEl = this._$filters.eq(elIndex).next('button')[0];
  $filterEl = $($filterEl);
  $filterEl.removeClass('is-hidden');
  $filterEl.attr('aria-hidden', false);
  $filterEl.addClass(this._widthClass);
};

/**
 * Creates width class based on the number of active filters
 */
FilterTabs.prototype._setWidthClass = function() {
  this._widthClass = FilterTabs.ClassName.WIDTH_CLASS + '-' + this._filtersList.length;
};

/**
 * Enquire-esque resize events
 */
FilterTabs.prototype._handleResize = function() {
  var windowWidth = window.innerWidth || windowWidth;

  // if this is mobile
  if (windowWidth <= window.citiConfig.tabletBreakpoint) {
    //if we resized from desktop
    if (!this._isMobile) {
      this._isMobile = true;
      this._isDesktop = false;
      this._calculateMobileWidth();
    }
  }

  //if this is desktop
  if (windowWidth > window.citiConfig.tabletBreakpoint) {
    //if we resized from mobile
    if (!this._isDesktop) {
      this._isDesktop = true;
      this._isMobile = false;
      this._removeMobileWidth();
    }

    /*
     * Note @evan: For some reason, window resizes are triggered by DOM elements
     * so we need to reconfigure the DOM to display the active tab + filters
     */
    if (this._activeTab !== null) {
      this._getFilterList();
    }
  }
};

/**
 * Calculates tabs container width on mobile
 */
FilterTabs.prototype._calculateMobileWidth = function() {
  var totalWidth = 0;
  this._tabs.forEach(function(el) {
    totalWidth += el.getBoundingClientRect().width;
  });

  this._element.style.width = Math.ceil(totalWidth) + 'px';
};

/**
 * Removes width style property
 */
FilterTabs.prototype._removeMobileWidth = function() {
  this._element.style.width = '';
};


FilterTabs.ClassName = {
  BASE: 'filter-tabs',
  TABS: 'filter-tabs-tab',
  ANCHOR: 'filter-tabs-anchor',
  FILTER_DD: 'dropdown',
  WIDTH_CLASS: 'options'
};

FilterTabs.Events = {
  RENDERED: 'filterTabs::rendered',
};

FilterTabs.Keys = {
  ENTER: 13,
  LEFT: 37,
  RIGHT: 39,
};

function _createFilterTabs() {
  _toArray($('.filter-tabs')).forEach(function(el) {
    return new FilterTabs(el);
  });
}

FilterTabs.initializeAll = function() {
  $(window).on(FilterTabs.Events.RENDERED, function() {
    _createFilterTabs();
  });
};


citiShare.filterTabs = (function(){

  FilterTabs.initializeAll();

  return {
    initAll: FilterTabs.initializeAll,
    Events: FilterTabs.Events,
    ClassName: FilterTabs.ClassName
  };

})();

/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint unused:false, sub:true*/

citiShare.filterMenu = (function () {
  "use strict";

  var tagStore = [];
  var $filterButton = $('.btn-show-filters');
  var $sortButton = $('.btn-show-sort');
  var $ocContainer = $('.oc-container');
  var isSortVisible = false;
  var isFiltersVisible = false;
  var counterSort = 0;
  var scrollPoint = 0;
  var previousScroll = 0;
  var widthUnderTablet = false;

  function openFilterDropdown($filterMenu) {
    closeFilterDropdown();

    //check if filterMenu has checked
    var checked = $filterMenu.closest('.multiselect-dropdown')
      .addClass('is-open')
      .find(".js-multiselect-dropdown-option[aria-checked$='true']").length;

    if (checked <= 0) {
      $filterMenu.closest('.multiselect-dropdown')
        .addClass('is-open')
        .find('.js-multiselect-dropdown-options-wrapper input').first()
        .click();
    } else {
      $filterMenu.closest('.multiselect-dropdown')
        .addClass('is-open')
        .find(".js-multiselect-dropdown-option[aria-checked$='true']")
        .find('input')
        .focus();
    }

    $('.filter-wrapper').addClass('level-two-menu-open');
  }

  function closeFilterDropdown($filterMenu) {
    $('.multiselect-dropdown').removeClass('is-open');

    if ($filterMenu) {
      $filterMenu.focus();
    }
    $('.filter-wrapper').removeClass('level-two-menu-open');
  }

  // OPEN OVERLAY FOR SHOW FILTERS - SHOW FILTERS SEEMS TO BE THE DROPDOWN WITH MULTIPLE SELECT
  // Hide the body - prepend overlay outside body - show the overlay
  function openMobileFilterMenu(ev) {
    //This is the select button
    var $this = $(ev.get(0));
    $this.attr('data-overlay-is-visible', 'true');
    //Get the good filter wrapper the div just after the target of the click
    var thisFilterWrapper = $this.next('.filter-wrapper');
    // move out of the page flow so that we can hide the rest of the page
    thisFilterWrapper.prependTo('body');
    //Display the overlay
    thisFilterWrapper.addClass('show-filters');
    //Put the focus on the close sign in the overlay
    thisFilterWrapper.find('.sub-nav-close').focus();
    //Hide the body div
    $ocContainer.addClass('is-hidden');
    isFiltersVisible = true;
  }

  // CLOSE OVERLAY FOR SHOW FILTERS
  function closeMobileFilterMenu(ev) {
    //$this is the close button
    var $this = $(ev.get(0));
    //Get the filter wrapper linked to the button clicked, the div just after the target of the click
    var thisFilterWrapper = $this.closest('.filter-wrapper');
    //Display none the overlay
    thisFilterWrapper.removeClass('show-filters');
    var clickedButton = '[data-overlay-is-visible="true"]';
    //Re-insert the filter wrap where it came (under the button js-show-sort)
    thisFilterWrapper.insertAfter(clickedButton);
    //Hide the body div
    $ocContainer.removeClass('is-hidden');
    //Focus back on the button clicked before the opening of the overlay
    closeFilterDropdown($(clickedButton));
    //Data that signal the overlay is close for this button
    $('.js-show-sort').attr('data-overlay-is-visible', 'false');
    isFiltersVisible = false;
    //Scroll to the position before the overlay was open
    $(window).scrollTop(scrollPoint);
  }


  // OPEN OVERLAY MOBILE - Hide the body - prepend overlay outside body - show the overlay
  function openMobileSortMenu(ev) {
    //This is the select button
    var $this = $(ev.get(0));
    $this.attr('data-overlay-is-visible', 'true');
    //Get the good filter wrapper the div just after the target of the click
    var thisFilterWrapper = $this.next('.filter-wrapper');
    // move out of the page flow so that we can hide the rest of the page
    thisFilterWrapper.prependTo('body');
    //Display the overlay
    thisFilterWrapper.addClass('show-sort');
    //Put the focus on the close sign in the overlay
    thisFilterWrapper.find('.sub-nav-close').focus();
    thisFilterWrapper.find('.sort-menu-item').addClass('sort-is-open');
    //Hide the body div
    $ocContainer.addClass('is-hidden');
    isSortVisible = true;
  }


  // CLOSE THE MOBILE OVERLAY on click
  function closeMobileSortMenu(ev) {
    //$this is the close button
    var $this = $(ev.get(0));
    //Get the filter wrapper linked to the button clicked, the div just after the target of the click
    var thisFilterWrapper = $this.closest('.filter-wrapper');
    //Display none the overlay
    thisFilterWrapper.removeClass('show-sort');
    var clickedButton = '[data-overlay-is-visible="true"]';
    //Re-insert the filter wrap where it came (under the button js-show-sort)
    thisFilterWrapper.insertAfter(clickedButton);
    //Hide the body div
    $ocContainer.removeClass('is-hidden');
    //Focus back on the button clicked before the opening of the overlay
    closeFilterDropdown($(clickedButton));
    //Data that signal the overlay is close for this button
    $('.js-show-sort').attr('data-overlay-is-visible', 'false');
    isSortVisible = false;
    //Scroll to the position before the overlay was open
    $(window).scrollTop(scrollPoint);
  }

  function closeOnDesktopResize() {
    //Close dropdown
    closeFilterDropdown();
    //Close the visible overlay mobile
    if (isSortVisible || isFiltersVisible) {
      //Re insert filter in desktop under the button
      $('.filter-wrapper.show-sort').insertAfter('[data-overlay-is-visible="true"]');
      $('.filter-wrapper.show-filters').insertAfter('[data-overlay-is-visible="true"]');
      //Remove overlay style that show it in mobile
      $('.filter-wrapper').removeClass('show-sort');
      $('.filter-wrapper').removeClass('show-filters');
      //Remove mobile body class hidden on container
      $ocContainer.removeClass('is-hidden');
      //Flag button and overlay off
      $('.js-show-sort').attr('data-overlay-is-visible', 'false');
      isSortVisible = false;
      isFiltersVisible = false;
    }
  }


  function menuNavigation($menuButton, key, event) {
    var menuButtonIndex = $('.js-multiselect-dropdown-button').index($menuButton),
      menuLength = $('.js-multiselect-dropdown-button').length - 1;

    // we call this function on all inputs and dropdown buttons but we need to
    // do different things depending on where we are in the dom
    if ($menuButton.hasClass('js-multiselect-dropdown-button')) {
      if (key === 'left') {
        if (menuButtonIndex <= menuLength) {
          closeFilterDropdown($menuButton.closest('.multiselect-dropdown'));
          $('.js-multiselect-dropdown-button').eq(menuButtonIndex - 1).focus();
        }
      } else if (key === 'right') {
        if (menuButtonIndex < menuLength) {
          closeFilterDropdown($menuButton.closest('.multiselect-dropdown'));
          $('.js-multiselect-dropdown-button').eq(menuButtonIndex + 1).focus();
        } else {
          $('.js-multiselect-dropdown-button').eq(0).focus();
        }
      } else if (key === 'down') {
        openFilterDropdown($menuButton.closest('.multiselect-dropdown'));
        if ($('.js-multiselect-dropdown-options-wrapper:visible input:checked').length > 0) {
          $('.js-multiselect-dropdown-options-wrapper:visible [aria-checked=true] input').focus();
        } else {
          $('.js-multiselect-dropdown-options-wrapper:visible li:first-child input').focus();
        }
      }
    } else if ($menuButton.hasClass('js-multiselect-dropdown-option-input')) {
      if (key === 'left') {
        event.preventDefault();
        closeFilterDropdown($menuButton.closest('.multiselect-dropdown'));
        menuNavigation($menuButton.closest('.multiselect-dropdown').find('.js-multiselect-dropdown-button'), 'left', event);
      } else if (key === 'right') {
        event.preventDefault();
        closeFilterDropdown($menuButton.closest('.multiselect-dropdown'));
        menuNavigation($menuButton.closest('.multiselect-dropdown').find('.js-multiselect-dropdown-button'), 'right', event);
      } else if (key === 'esc') {
        closeFilterDropdown($menuButton.closest('.multiselect-dropdown').find('.js-multiselect-dropdown-button'));
      }
    }

  }

  $('.js-multiselect-dropdown-option-input').on('change', function (event) {
    if ($(this).closest('.js-multiselect-dropdown-option').attr('aria-checked') === 'true') {
      $(this)[0].checked = true;
    } else {
      $(this)[0].checked = false;
    }
  });

  $('.js-multiselect-dropdown-option-input').on('focus', function(e) {

    var $element = $(this).siblings('label');
    var elementRect = $element[0].getBoundingClientRect();
    var $scrollableDiv = $element.parents('.multiselect-dropdown-options-wrapper');
    var scrollableDivRect = $scrollableDiv[0].getBoundingClientRect();

    var documentTop  = window.pageYOffset || document.documentElement.scrollTop;
    var elementPos = {
      top:  elementRect.top + documentTop,
      bottom: elementRect.bottom + documentTop
    };
    var scrollableDivPos = {
      top: scrollableDivRect.top + documentTop,
      bottom: scrollableDivRect.bottom + documentTop
    };

    if(elementPos.top < scrollableDivPos.top) {
      var topDifference = scrollableDivPos.top - elementPos.top;
      var topCurrentScrollTop = $scrollableDiv.scrollTop();
      $scrollableDiv.scrollTop(topCurrentScrollTop - topDifference);
    }

    if(elementPos.bottom > scrollableDivPos.bottom) {
      var bottomDifference = elementPos.bottom - scrollableDivPos.bottom;
      var bottomCurrentScrollTop = $scrollableDiv.scrollTop();
      $scrollableDiv.scrollTop(bottomCurrentScrollTop + bottomDifference + 5);
    }

    return false;
  });

  function addTags($input) {
    if (!_.some(tagStore, {inputVal: $input.val()})) {
      tagStore.push({time: Date.now(), inputVal: $input.val(), $elem: $input});
    }
    showTags();
  }

  function showTags() {
    tagStore = _.sortBy(tagStore, ['time']);

    //Special case made for my-account to not impact the live site
    if ($("body:not('.my-account')").length > 0) {
      $('.tag-list, .multiselect-dropdown .mobile-selections-list').empty();
    } else {
      $('.tag-list').empty();
    }

    _.each(tagStore, function (val) {
      addTagsToDom(val.$elem);
      return;
    });

    // only focus on the first tag if there's no menu item open
    if ($('.multiselect-dropdown.is-open').length === 0) {
      $('.tag-list a').first().focus();
    }
  }

  function addTagsToDom($input) {
    if ($input.val() !== 'see-all') {
      $('.tag-container').addClass('is-visible');
      $('.tag-list').append(createTag($input));
      //Special case made for my-account to not impact the live site
      if ($("body:not('.my-account')").length > 0) {
        $input.closest('.multiselect-dropdown')
          .find('.mobile-selections-list')
          .append(createMobileTag($input));
      } else {
        $input.closest('.multiselect-dropdown')
          .find('.mobile-selections-list')
          .html(createMobileTag($input));
      }
    }
  }

  function removeTag(inputVal) {
    var tagIndex;
    _.each(tagStore, function (val, key) {
      if (val.inputVal === String(inputVal)) {
        tagIndex = key;
        val.$elem[0].checked = false;
      }
    });

    if (tagIndex !== undefined) {
      tagStore.splice(tagIndex, 1);
    }

    if (tagStore.length > 0) {
      showTags();
    } else {
      $('.tag-container').removeClass('is-visible');
    }

  }

  function createTag($input) {
    return "<li class='tag-item js-remove-filter-tag' data-option-name='" + $input.val() + "'>" +
      "<span aria-hidden='true' class='icon-x-hidden'>x</span>" +
      " <a href='javascript:void(0)' title='Remove Selection'>" +
      "<span class='visuallyhidden'>Remove</span>" + $input.data('display-name') +
      "<span class='visuallyhidden'>Selection</span></a></li>";
  }

  function createMobileTag($input) {
    return "<span class='mobile-selection' data-option-name='" + $input.val() + "'>" + $input.attr('data-display-name') + "</span>";
  }

  function scrollToFilters() {
    if ($(window).width() > window.citiConfig.tabletBreakpoint && $('.filter-sticky-wrapper').hasClass('is-stuck')) {
      $('html, body').animate({
        scrollTop: 0
      }, 300);
    }
  }

  function init() {
    var keys = {
      9: 'tab',
      13: 'enter',
      27: 'esc',
      32: 'space',
      37: 'left',
      38: 'up',
      39: 'right',
      40: 'down'
    };

    //Open and Close the desktop dropdown
    $('.js-filter-menu-wrapper').on('click', '.js-multiselect-dropdown-button', function (event) {
      if ($(this).closest('.multiselect-dropdown').hasClass('is-open') && $(window).width() > window.citiConfig.tabletBreakpoint) {
        closeFilterDropdown($(this));
      } else {
        openFilterDropdown($(this));
      }
    });

    //Click that show the overlay show-filters
    $('.js-show-filters').click(function () {
      //Save the position before the opening of the overlay
      scrollPoint = $(window).scrollTop();
      openMobileFilterMenu($(this));
    });

    //Click that show the overlay show-sort
    $('.js-show-sort').click(function () {
      //Save the position before the opening of the overlay
      scrollPoint = $(window).scrollTop();
      openMobileSortMenu($(this));
    });

    //Click that hide mobile overlay
    $('.js-hide-filters').click(function () {
      if (isSortVisible === true) {
        closeMobileSortMenu($(this));
      } else {
        closeMobileFilterMenu($(this));
      }
    });

    $('.js-filter-menu-wrapper').on('click', '.js-filter-nav-back', function () {
      closeFilterDropdown($(this).closest('.js-multiselect-dropdown-button'));
    });

    $('.js-update-products').on('click', function () {
      if ($('.js-filter-nav-back:visible').length > 0) {
        $('.js-filter-nav-back:visible').click();
      } else {
        $('.js-hide-filters:visible').click();
      }
    });

    $('.js-clear-filters').on('click', function () {
      var $isOpen = $('.multiselect-dropdown.is-open').length ? $('.multiselect-dropdown.is-open') : $('.multiselect-dropdown.sort-is-open');
      //Special case made for my-account to not impact the live site
      if ($("body:not('.my-account')").length > 0) {
        $isOpen.find('.mobile-selections-list').empty();
      } else {
        var list = $isOpen.find('.mobile-selections-list'),
          selection = $isOpen.find('.mobile-selection');
        selection.attr("data-option-name", list.attr("data-default-code-value"));
        selection.html(list.attr("data-default-value"));
        list.parents("button").find(".multiselect-overlay-title").html(list.attr("data-default-value"));
        selection.parents(".multiselect-dropdown").find("li").each(function () {
          var listElement = $(this);
          listElement.attr("aria-checked", "false");
          if (listElement.attr("data-value") === selection.attr("data-option-name")) {
            listElement.attr("aria-checked", "true");
            listElement.find("input").trigger('customEventLoadAjax');
          }
        });
      }
    });

    $('.js-filter-menu-wrapper').on('keydown', '.js-multiselect-dropdown-button, .js-multiselect-dropdown-option-input', function (event) {
      if ($(window).width() < window.citiConfig.tabletBreakpoint) {
        return;
      } else {
        menuNavigation($(this), keys[event.which], event);
      }
    });

    $('.js-filter-menu-wrapper').on('keydown', '.multiselect-dropdown', function (event) {
      if (keys[event.which] === 'tab') {
        closeFilterDropdown($(this));
        var count = $(this).index() - 1;
        $('.has-selections').html('items selected ' + count + ' of ' + $('.multiselect-dropdown').length);
      }
    });

    $('.js-filter-menu-wrapper').on('click', '.js-multiselect-dropdown-option-label', function () {

    });

    $('.js-filter-menu-wrapper').on('click keydown', '.js-multiselect-dropdown-option', function (event) {
      var $this = $(this);

      if ($(window).width() > window.citiConfig.tabletBreakpoint) {
        var t = setTimeout(function () {
          checkMenuItem($this, event);
        }, 100);
      } else {
        checkMenuItem($this, event);
      }

    });

    function setStuck() {

      var $window = $(window);
      var $filterWaypoint = $('.sticky-filter-waypoint');
      var $categoryTitle = $('.category-title');
      var $filterWrapper = $('.filter-sticky-wrapper');
      var $filterPagination = $('.sticky-pagination-wrapper');

      if ($filterWaypoint.length > 0) {
        if ($window.scrollTop() >= $filterWaypoint.offset().top + $categoryTitle.height() && $('button.ui-multiselect').length > 0) {
          $filterWrapper.addClass('is-stuck');
          $filterWaypoint.css('height', $filterWrapper.height() + $filterPagination.height() + $categoryTitle.height());
        }
        else {
          $filterWrapper.removeClass('is-stuck');
          $filterWaypoint.css('height', 'auto');
        }
      }

      previousScroll = $window.scrollTop();
    }

    function checkMenuItem($this, event) {

      if (event.type === 'click' || keys[event.which] === 'enter' || keys[event.which] === 'space') {

        var currentTaggedValue = $this.closest('.multiselect-dropdown')
          .find('button .mobile-selections-list .mobile-selection').data('option-name');

        $this.find('input').focus();

        removeTag(currentTaggedValue);

        $this.closest('.multiselect-dropdown')
          .find('label')
          .attr('aria-live', 'off');

        $this.closest('.js-multiselect-dropdown-options-wrapper')
          .find('.js-multiselect-dropdown-option')
          .attr('aria-checked', 'false');

        $this.find('label').attr('aria-live', 'assertive');
        $this.attr('aria-checked', 'true');


        if ($this.closest('.multiselect-dropdown').hasClass('filter-menu-item') && $this.find('input').val() !== 'see-all') {
          addTags($this.find('input'));
        }


        //check if sort
        var sortFirstChecked = $this.find('input').parent().parent().find('li').first().attr('aria-checked');

        if ($this.closest('.multiselect-dropdown').hasClass('sort-menu-item') && sortFirstChecked !== 'true') {
          $this.closest('.multiselect-dropdown').find('button > span:first').text($this.find('label span:first').text());
          counterSort++;
        } else if ($this.closest('.multiselect-dropdown').hasClass('sort-menu-item') && sortFirstChecked !== 'false') {
          //default value
          if (counterSort > 0) {
            $this.closest('.multiselect-dropdown').find('button > span:first').text($this.find('label span:first').text());
          }
        }

        //Event for the load ajax used in my-account pages
        $this.find('input').trigger('customEventLoadAjax');
      }
    }

    $('.js-filter-menu-wrapper').on('click', 'input', function (event) {
      event.stopPropagation();
    });

    $('.tag-container').on('click keypress', '.js-remove-filter-tag', function (event) {
      if (event.type === 'click' || keys[event.which] === 'enter') {
        removeTag($(this).closest('.tag-item').data('option-name'));
      }
    });

    $('.filter-wrapper').on('click', '.tag-clear-all, .js-reset-selections', function () {
      if ($("body:not('.my-account')").length > 0) {
        $('.js-remove-filter-tag').each(function (index, el) {
          removeTag($(el).data('option-name'));
        });
        $('.mobile-selections-list').empty();
      } else {
        var listCount = $('.mobile-selections-list').length;
        tagStore = [];
        $('.tag-list').empty();
        $('.mobile-selections-list').each(function (index) {
          var selection = $(this).find('.mobile-selection');
          selection.attr("data-option-name", $(this).attr("data-default-code-value"));
          selection.html($(this).attr("data-default-value"));
          selection.parents(".multiselect-dropdown").find("li").each(function () {
            var listElement = $(this);
            listElement.attr("aria-checked", "false");
            if (listElement.attr("data-value") === selection.attr("data-option-name")) {
              var searchKey = listElement.data("search-key"),
                value = listElement.data("value"),
                parent = listElement.parents(".multiselect-list-container");
              parent.data(searchKey, value);
              listElement.attr("aria-checked", "true");
              if (index === listCount - 1) {
                listElement.find("input").trigger('customEventLoadAjax');
              }
            }
          });
        });
      }
    });

    $('.filter-wrapper').on('click', '.js-apply-selections', function () {
      if (isSortVisible === true) {
        closeMobileSortMenu();
      } else {
        closeMobileFilterMenu($(this));
      }
    });

    //makes sure that if user clicks anywhere on the document the dropdowns close
    $(document).click(function (event) {
      if (!$(event.target).closest('button.multiselect-dropdown-button').length) {
        if ($('.multiselect-dropdown').hasClass('is-open')) {
          // Needed for IE, click would trigger on key down causing accessibility issue.
          if(event.clientX > 0 && event.clientY > 0) {
            closeFilterDropdown();
          }
        }
      }
    });

    $(window).resize(function () {
      if ($(window).width() > window.citiConfig.tabletBreakpoint) {
        //Close all mobile overlays on desktop resize
        closeOnDesktopResize();
      }

      //Remove the desktop stuck in my-account pages
      if ($(".my-account-container").length > 0) {

        //If the multiselect-container max-width <= 959px set the variable at true.
        if (parseInt(jQuery(".multiselect-container").css("max-width"), 10) <= window.citiConfig.tabletBreakpoint) {
          widthUnderTablet = true;
        } else {
          widthUnderTablet = false;
        }

        if( widthUnderTablet == false ) {
          $('.filter-sticky-wrapper').removeClass('is-stuck');
          $('.sticky-filter-waypoint').css('height', 'auto');
        }
      }
    });

    $(window).scroll(function () {
      if ($(".my-account-container").length > 0) {
        if( widthUnderTablet == true ) {
          setStuck();
        }
      } else {
        setStuck();
      }
    });
  }

  init();

  return {
    menuNavigation: menuNavigation
  };

})();
// https://github.com/assemble/handlebars-helpers

// Copyright (c) 2013 Jon Schlinkert, Brian Woodward

// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

//module.exports.register = function(Handlebars) {

(function (root, factory) {
  'use strict';
  if (typeof module === 'object' && module.exports) {
    module.exports = function(cfg) {
      return factory(require('handlebars'), cfg);
    };

  } else {
    factory(window.Handlebars, window);
  }
})(this, function(hbars, context) {
  'use strict';
  return hbars.registerHelper({
      currencyNamePlural: function () {
          return context.citiConfig.currencyNamePlural;
      },
      gt: function (value, test, options) {
          if (value > test) {
              return options.fn(this);
          } else {
              return options.inverse(this);
          }
      },
      hyphenate: function (str) {
          if(str && typeof str === "string") {
              return str.split(" ").join("-");
          }
      },
      isnt: function (value, test, options) {
          if (value !== test) {
              return options.fn(this);
          } else {
              return options.inverse(this);
          }
      },
      is: function (value, test, options) {
          if (value === test) {
              return options.fn(this);
          } else {
              return options.inverse(this);
          }
      },
      either: function (value, test, options) {
          var matches = test.split(";"),
              matchFound = false;
          for(var i = 0; i < matches.length; i++) {
              if(matches[i] === value) {
                  matchFound = true;
              }
          }
          if (matchFound) {
              return options.fn(this);
          } else {
              return options.inverse(this);
          }
      },
      length: function (array) {
          return (!array) ? 0 : array.length;
      },
      lowercase: function (str) {
         if(str && typeof str === "string") {
           return str.toLowerCase();
         }
      },
      pageType: function(value, options) {
          if (context.pageType === value) {
              return options.fn(this);
          } else {
              return options.inverse(this);
          }
      },
      tooltipClass: function(options) {
  
          var klass='tooltip-target omniture-tooltip';
  
          if (options.color) {
              if (options.color === 'dark') {
                  klass += ' tooltip-dark';
              }
          }
  
          if (options.size) {
              if (options.size === 'xl') {
                  klass += ' xl';
              }
          }
  
          return klass;
      },
      loc: function(value, def) {

        var toReturn = null;

        try {
          var evalString = 'localizationDictionary.'+context.path.country+'.'+context.path.lang+'.'+context.path.tier+'.'+value.toString();

          if (typeof window !== 'undefined') {
            toReturn = eval("window."+evalString);
          } else {
            toReturn = eval("context."+evalString);
          }
        } catch(e) {}

        //USE THIS IF YOU WANT TO SEE WHAT IS BEING LOCALIZED
        //return toReturn ? ('$:' + toReturn) : (def ? ('%:'+def) : ''); 
        //
        return toReturn ? toReturn : (def ? def : ''); 

      },
      stringify: function(object) {
        return new hbars.SafeString(JSON.stringify(object));
      },
      showNavItem: function(value, options) {
        var checkStates = typeof value.states !== 'undefined',
            show = true;

        if (checkStates) {
          var map = ["anonymous","cookied","loggedin","obo"],
              idx = map.indexOf(context.path.state);

          if (value.states.indexOf(idx) === -1) {
            show = false;
          }
       }

       if (show) {
          return options.fn(this);
       } else {
         return options.inverse(this);
       }
      },
      navName: function(value) {
        return typeof value === 'string' ? value : value.name;
      }
  });
});


citiShare.homepage = function() {
	'use strict';

	var config = {
		$mobileTabsLinks: $('.section-sub-nav.mobile li a')
	};

	// Adds and remove class to allow proper css styling
	function _setFocusHandlerTabsLinks() {
		config.$mobileTabsLinks.on('focus', function() {
			var parent = $(this).parent();
			parent.addClass('link-is-focused');
			if(parent.index() > 0) {
				parent.prev().addClass('next-link-is-focused');
			}
		});
		config.$mobileTabsLinks.on('blur', function() {
			var parent = $(this).parent();
			parent.removeClass('link-is-focused');
			if(parent.index() > 0) {
				parent.prev().removeClass('next-link-is-focused');
			}
		});
	}

	function _init() {
		_setFocusHandlerTabsLinks();
	}

	return {
		init: _init,
		config: config
	};

};

citiShare.mfa = (function() {
    "use strict";

    var mfaConfig = {
            previousModal: '',
            currentModal: '',
            codeExpirationTime: 600000,
            $expiredCodeLink: $('#expired-code-get-new-code').find('a'),
            phoneNumberDefault: 'Choose a phone number:',
            $modal: $('.modal-overlay'),
            $dropdownMenuMenu: $('#dropdown-menu-menu'),
            $dropdownWrapper: $('#dropdown-wrapper'),
            $confirmIdForm: $('#confirm-identity'),
            $confirmIdButton: $('#confirm-identity-button'),
            $enterCodeForm: $('#enter-code'),
            $enterCodeButton: $('#enter-code-button'),
            $closeButton: $('.mfa-close'),
            enterCodeTimer: null,
            confirmIdFormValues: {},
            $msgAgreementCheck: $('#message-agreement'),
            $msgAgreementContainer: $('.modal-confirm-identity-message-agreement-container'),
            $retryCodeButton: $('.mfa-retry-code'),
            $faqModal: $('#modal-mfa-faq'),
            $faqLink: $('.mfa-faq'),
            $faqBack: $('#modal-mfa-faq').find('.modal-mfa-faq-back')
        },
        modalName = {
            confirmID: 'confirm-identity',
            enterCode: 'enter-code',
            thankYou: 'mfa-thankyou',
            codeExpired: 'expired-code',
            faq: 'mfa-faq',
            customerService: 'mfa-customer-service',
            accountLocked: 'mfa-account-locked'
        },
        handlebarTemplates = ['dropdown-component'];

    function transitionModal(toModal, fromModal) {
        if (toModal === modalName.enterCode) {
            mfaConfig.enterCodeTimer = setTimeout(function() {
                console.log(mfaConfig.currentModal);
                transitionModal(modalName.codeExpired, mfaConfig.currentModal);
            }, mfaConfig.codeExpirationTime);
        } else if (mfaConfig.enterCodeTimer && toModal === modalName.thankYou || toModal === modalName.confirmID || toModal === modalName.accountLocked) {
            clearTimeout(mfaConfig.enterCodeTimer);
        }

        citiShare.AccessibleModal({ modal: $('#modal-' + fromModal) }).hide();

        mfaConfig.currentModal = toModal;
        citiShare.AccessibleModal({ modal: $('#modal-' + toModal) }).show();
    }

    function loadHandlebarTemplates() {
        handlebarTemplates.forEach(function(template) {
            citiShare.util.getHandlebarPartials(template);
        });

        loadNumberDropdown();
    }

    /* ------- load data for phone number dropdown ------- */
    function loadNumberDropdown() {
        $.ajax({
            url: citiConfig.endPointHost + citiConfig.mfaEndPointPath + modalName.confirmID + '.json',
            type: 'get',
            dataType: 'json'
        })
        .done(function(data) {
            data.sort[0].defaultValue = mfaConfig.phoneNumberDefault;

            mfaConfig.$dropdownWrapper
                .append(
                    citiShare.util.renderTemplate(window.Handlebars.partials['dropdown-component'], data.sort[0])
                );

            citiShare.selectMenuForElement();
                
            var selectMenuItem = mfaConfig.$dropdownWrapper.find('select');
            
            /* -------- phone number hidden dropdown -------- */
            $('document,body').on('selectmenuchange', selectMenuItem, function(e) {
                var $this = $(e.target),
                    $selectLabel = $('#dropdown-wrapper').find('label[for="dropdown-menu-button"]');

                checkInputValues();

                if ($this.val().toString().trim() !== data.sort[0].defaultValue.toString().trim()) {
                    $selectLabel.addClass('visible');
                    $selectLabel.attr('aria-hidden', 'false');
                } else {
                    $selectLabel.removeClass('visible');
                    $selectLabel.attr('aria-hidden', 'true');
                }
            });
        })
        .fail(function(error) {
            console.log('error: ', error.responseText);
        });
    }

    function checkInputValues() {
        var formInputValues = {
                messageType: mfaConfig.$confirmIdForm.find('input[type="radio"]:checked').val(),
                phoneNumber: mfaConfig.$confirmIdForm.find('#dropdown-menu').val(),
                agreeToMessage: mfaConfig.$msgAgreementCheck.prop('checked')
            },
            isValidData = true;

        for (var input in formInputValues) {
            if (formInputValues.hasOwnProperty(input)) {
                if (formInputValues[input]) {
                    mfaConfig.confirmIdFormValues[input] = formInputValues[input];
                } else {
                    isValidData = false;
                }

                if (input === 'phoneNumber' && formInputValues[input] === mfaConfig.phoneNumberDefault) {
                    isValidData = false;
                }
            }
        }

        if (isValidData) {
            mfaConfig.$confirmIdButton.prop('disabled', false).removeClass('inactive');
        } else {
            mfaConfig.$confirmIdButton.prop('disabled', true).addClass('inactive');
        }
    }

    mfaConfig.$confirmIdForm.find('.modal-confirm-identity-radio-container').on('click', function() {
        checkInputValues();
    });

    mfaConfig.$msgAgreementCheck.on('click', function() {
        checkInputValues();
    });

    /* -------- confirm identity form handler --------- */
    mfaConfig.$confirmIdButton.on('click', function() {
        var formInputValues = {
                messageType: mfaConfig.$confirmIdForm.find('input[type="radio"]:checked').val(),
                phoneNumber: mfaConfig.$confirmIdForm.find('#dropdown-menu').val(),
                agreeToMessage: mfaConfig.$msgAgreementCheck.prop('checked')
            };

        for (var input in formInputValues) {
            if (formInputValues.hasOwnProperty(input)) {
                mfaConfig.confirmIdFormValues[input] = formInputValues[input];
            }
        }


        // check if user agreed to receive a message via text or call
        if (!isNaN(parseInt(formInputValues.phoneNumber.slice(8))) && formInputValues.agreeToMessage) {
            $.ajax({
                // TODO: use post url
                url: citiConfig.endPointHost + citiConfig.mfaEndPointPath + modalName.enterCode + '.json',
                type: 'get'
            })
            .done(function() {
                transitionModal(modalName.enterCode, modalName.confirmID);
            })
            .fail(function() {
                // TODO: what about server errors?
            });
        } else if (isNaN(parseInt(formInputValues.phoneNumber.slice(-4)))) {
            transitionModal(modalName.customerService, modalName.confirmID);
        } else {
            if (!mfaConfig.$msgAgreementContainer.hasClass('error')) {
                mfaConfig.$msgAgreementContainer.addClass('error');
            }
        }
    });

    mfaConfig.$closeButton.on('click', function(e) {
        e.preventDefault();
        $('#modal-overlay').trigger('click');
    });

    /* ------- send user back to confirm-identity modal ------- */
    mfaConfig.$retryCodeButton.on('click', function(e) {
        e.preventDefault();
        console.log($(e.target).data('modal'));
        transitionModal(modalName.confirmID, $(e.target).data('modal'));
    });

    /* -------- send user input for code verification -------- */
    mfaConfig.$enterCodeButton.on('click', function() {
        $.ajax({
            // TODO: use post url
            url: citiConfig.endPointHost + citiConfig.mfaEndPointPath + modalName.enterCode + '.json',
            type: 'get',
            dataType: 'json'
        })
        .done(function(data) {
            // TODO: remove code-checking logic

            // ultimately the following logic will be
            // on the server the 'post' request is
            // made to; for now we keep it for testing
            // purposes
            var code = data.identityCode,
                userCodeInput = mfaConfig.$enterCodeForm.find('.modal-enter-code-input').val().toString(),
                $enterIdWrapper = $('.modal-enter-code-wrapper');

            if (userCodeInput === code) {
                transitionModal(modalName.thankYou, modalName.enterCode);
            } else {
                if (!$enterIdWrapper.hasClass('error')) {
                    $enterIdWrapper.addClass('error');
                }
            }
        })
        .fail(function(error) {
            // TODO: if user has tried too many times, server should return error
            // and then we will transition to account locked modal:
            // transitionModal(modalName.accountLocked, modalName.enterCode);
            console.log('error: ' + error);
        });
    });

    mfaConfig.$modal.on('click', '.error', function() {
        $(this).removeClass('error');
    });

    mfaConfig.$expiredCodeLink.on('click', function(e) {
        e.preventDefault();
        transitionModal(modalName.confirmID, modalName.codeExpired);
    });

    mfaConfig.$faqLink.on('click', function(e) {
        e.preventDefault();
        mfaConfig.previousModal = $(this).data('modal');
        transitionModal(modalName.faq, mfaConfig.previousModal);
    });

    mfaConfig.$faqBack.on('click', function(e) {
        e.preventDefault();
        transitionModal(mfaConfig.previousModal, modalName.faq);
    });

    /* ------ "back" for close button for the FAQ modal ------- */
    mfaConfig.$faqModal.on('click', '.modal-close-button', function() {
        transitionModal(mfaConfig.previousModal, modalName.faq);
    });

    /* ------ pluses and minuses the answer copy for the FAQ modal ------- */
    mfaConfig.$faqModal.on('click', '.modal-mfa-faq-plus-minus', function(e) {
        var $target = $(e.target),
            $container = $target.parent();

        if ($container.hasClass('open')) {
            $container.removeClass('open');
            $(e.target).attr('aria-expanded', 'false');
        } else {
            $container.addClass('open');
            $(e.target).attr('aria-expanded', 'true');
        }
    });

    // TODO: use a more specific hook to load dropdown when necessary
    if(mfaConfig.$faqModal.length) {
        loadHandlebarTemplates();
    }

    return;
})();

/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

citiShare.mockEndPoint = (function() {
    'use strict';

    var mockData = {
        "accountNumber": "12345",
        "multiplier" : 1,
        "currencySeparator" : ",",
        "steps" : 1000,
        "minimumExchange" : 1000,
        "maximumExchange" : 20000,
        "identityCode": "1111"
    };

    return mockData;
})();


// Based on the code from: https://github.com/gdkraus/accessible-modal-dialog

/*

 ============================================
 License for Application
 ============================================

 This license is governed by United States copyright law, and with respect to matters
 of tort, contract, and other causes of action it is governed by North Carolina law,
 without regard to North Carolina choice of law provisions.  The forum for any dispute
 resolution shall be in Wake County, North Carolina.

 Redistribution and use in source and binary forms, with or without modification, are
 permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this list
 of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice, this
 list of conditions and the following disclaimer in the documentation and/or other
 materials provided with the distribution.

 3. The name of the author may not be used to endorse or promote products derived from
 this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 */


citiShare.AccessibleModal = function(settings) {
    "use strict";

    if(!settings.modal){
        console.warn("modal property required for AccessibleModal");
        return false;
    }

    var _defaultSettings = {
        mainPage: $('#oc-container'),
        overlay: $('#modal-overlay'),
        closeButton: settings.modal.find('.modal-close-button'),
        onOpen: undefined,
        onClose: undefined,
        previousElement: undefined,
        modalType:'complex'
    };

    var _settings = $.extend({}, _defaultSettings, settings);

    // $ formatted selector to search for focusable items
    var _focusableElementsString = "*[data-modal-header], a[href], area[href], .tabbable-element, input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed,  *[contenteditable], *[data-modal-focusable]";

    function init() {
      if(_settings.modalType === 'complex') {
        _settings.overlay.bind('click', function(){
            _hideModal();
        });

        _settings.closeButton.bind('click', function() {
            _hideModal();
        });

        _settings.modal.bind('keydown', function(e) {
            _trapTabKey(_settings.modal, e);
        });

        _settings.modal.bind('keydown', function(e) {
            _trapEscapeKey(_settings.modal, e);
        });

        _showModal();

      } else {
        _settings.overlay.bind('click', function(){
          _hideSimpleModal();
        });
  
        _settings.closeButton.bind('click', function() {
          _hideSimpleModal();
        });
  
        _settings.modal.bind('keydown', function(e) {
          _trapTabKey(_settings.modal, e);
        });
  
        _settings.modal.bind('keydown', function(e) {
          _trapEscapeKey(_settings.modal, e);
        });

        _showSimpleModal();
      }
    }

    function _trapEscapeKey(obj, evt) {
        // if escape pressed
        if (evt.which === 27) {
            _settings.closeButton.click();
            evt.preventDefault();
        }

    }

    function _trapTabKey(obj, evt) {
        // if tab or shift-tab pressed
        if (evt.which === 9) {

            // get list of all children elements in given object
            var o = obj.find('*');

            // get list of focusable items
            var focusableItems;
            focusableItems = o.filter(_focusableElementsString).filter(':visible');

            // get currently focused item
            var focusedItem;
            focusedItem = $(':focus');

            // get the number of focusable items
            var numberOfFocusableItems;
            numberOfFocusableItems = focusableItems.length;

            // get the index of the currently focused item
            var focusedItemIndex;
            focusedItemIndex = focusableItems.index(focusedItem);

            if (evt.shiftKey) {
                //back tab
                // if focused on first item and user presses back-tab, go to the last focusable item
                if (focusedItemIndex === 0) {
                    focusableItems.get(numberOfFocusableItems - 1).focus();
                    evt.preventDefault();
                }

            } else {
                //forward tab
                // if focused on the last item and user presses tab, go to the first focusable item
                if (focusedItemIndex === numberOfFocusableItems - 1) {
                    focusableItems.get(0).focus();
                    evt.preventDefault();
                }
            }
        }

    }

    function _onModalResize() {

        var modalContainer = _settings.modal.find('.has-overflow');
        modalContainer.css('height', 'auto'); // reset previous inline height for proper calculation

        var headerHeight = _settings.modal.find('.modal-header-title').outerHeight();
        var closeHeight = _settings.modal.find('.close-btn-container').outerHeight();
        var modalHeight = _settings.modal.outerHeight();

        var contentHeight = modalHeight - (headerHeight + closeHeight);

        modalContainer.css('height', contentHeight);
    }

    function _showModal(obj) {
      if(!obj) {
        obj = _settings.modal;
      }
      _settings.mainPage.attr('aria-hidden', 'true'); // mark the main page as hidden
      _settings.overlay.addClass('opened'); // insert an overlay to prevent clicking and make a visual change to indicate the main apge is not available
      _settings.modal.css('display', 'block'); // make the modal window visible
      _settings.modal.attr('aria-hidden', 'false'); // mark the modal window as visible

      citiShare.closeSearch();
      var paddingTop = 0;
      var modalDesktopPadding = 180;
      var windowWidth = window.innerWidth || $(window).width();
      var windowTallEnough = (_settings.modal.height() + modalDesktopPadding < window.innerHeight);
      if(windowWidth > 768 && windowTallEnough) {
        paddingTop = modalDesktopPadding;
      }
      var theTop = (window.pageYOffset || document.documentElement.scrollTop)  - ( document.documentElement.clientTop || 0) + paddingTop;
      _settings.modal.css({
        'position':'absolute',
        'top': theTop + 'px'
      });

      // get list of all children elements in given object
      var o = obj.find('*');

      // Safari and VoiceOver shim
      // if VoiceOver in Safari is used, set the initial focus to the modal window itself instead of the first keyboard focusable item. This causes VoiceOver to announce the aria-labelled attributes. Otherwise, Safari and VoiceOver will not announce the labels attached to the modal window.

      // set the focus to the first keyboard focusable item
      o.filter(_focusableElementsString).filter(':visible').first().focus();
      if(_settings.onOpen) {
        _settings.onOpen.call();
      }
      if (_settings.modal.find('.has-overflow').length > 0) {
        _onModalResize();
        $(window).resize(_onModalResize);
      }
    }

    function _showSimpleModal(obj) {
      if(!obj) {
        obj = _settings.modal;
      }
      _settings.mainPage.attr('aria-hidden', 'true'); // mark the main page as hidden
      _settings.modal.attr('aria-hidden', 'false'); // mark the modal window as visible

      // get list of all children elements in given object
      var o = obj.find('*');

      // Safari and VoiceOver shim
      // if VoiceOver in Safari is used, set the initial focus to the modal window itself instead of the first keyboard focusable item. This causes VoiceOver to announce the aria-labelled attributes. Otherwise, Safari and VoiceOver will not announce the labels attached to the modal window.

      // set the focus to the first keyboard focusable item
      o.filter(_focusableElementsString).filter(':visible').first().focus();
      if(_settings.onOpen) {
        _settings.onOpen.call();
      }
    }

    function _hideModal() {
        $(window).unbind('resize', _onModalResize);
        _settings.modal.find('.has-overflow').css('height','auto');
        _settings.overlay.removeClass('opened'); // remove the overlay in order to make the main screen available again
        _settings.modal.css('display', 'none'); // hide the modal window
        _settings.modal.attr('aria-hidden', 'true'); // mark the modal window as hidden

        var windowWidth = window.innerWidth || $(window).width();

        if(windowWidth <= 768){
            _settings.mainPage.removeAttr('aria-hidden');
            if(_settings.previousElement) {
                _settings.previousElement.focus();
            }
        }else{
            setTimeout(function() {
              _settings.mainPage.removeAttr('aria-hidden');
              if(_settings.previousElement) {
                    _settings.previousElement.focus();
                }
            }, 1000);
        }

        if(_settings.onClose) {
            _settings.onClose.call();
        }

    }

    function _hideSimpleModal() {
      _settings.mainPage.attr('aria-hidden', 'false'); // mark the main page as viewable
      _settings.modal.attr('aria-hidden', 'true'); // mark the modal window as hidden

      if(_settings.onClose) {
          _settings.onClose.call();
      }

  }

    init();

    return {
        show:_showModal,
        hide:_hideModal
    };
};

"use strict";

citiShare.ajaxCalls = (function () {

  var ajaxConfig = {
    $ajaxSelects: $('.ajax-select'),
    $ajaxMultiSelects: $('.ajax-multi-select'),
    $ajaxMultiSelectSort: $('.ajax-multi-select-sort'),
    $ajaxGets: $('.ajax-get'),
    $ajaxOverlays: $('.ajax-overlay'),
    $ajaxPosts: $('.ajax-post'),
    $ajaxDeletes: $('.ajax-delete'),
    $ajaxSorts: $('.ajax-sort'),
    $ajaxSearch: $('.ajax-search'),
    $ajaxReinstatePoints: $('.ajax-reinstate'),
    $dateRangeSelects: $('.date-range-ajax-search'),
    $pointsSummaryTabs: $('.points-details .tablist li')
  };

  // Ajax call to get and append HTML
  // destination is where the html will be injected
  // url is the fragment get in ajax
  var _ajaxGetAndAppend = function _ajaxGetAndAppend(e) {
    e.preventDefault();
    var dest = $(this).data("destination");
    var url = $(this).data("url");

    $.get(url, function (data) {
      $('.' + dest).html(data);
      $(document).trigger('get.success');
    });
  };

  //CALL AJAX ORDER HISTORY
  var _orderHistorySort = function _orderHistorySort() {

    var dest = $(this).parents("li").data("destination"),
        url = $(this).parents("li").data("url"),
        searchKey = $(this).parents("li").data("search-key"),
        value = $(this).parents("li").data("value");

    $(".multiselect-list-container[data-" + searchKey + "]").data(searchKey, value);

    var timeframeValue = $(".multiselect-list-container[data-timeframe]").data("timeframe"),
      sortValue = $(".multiselect-list-container[data-sort]").data("sort");

    url += "?timeframe=" + timeframeValue + "&sort=" + sortValue;

    $.get(url, function (data) {
      $('.' + dest).html(data);
      $(document).trigger('get.success');
    });
  };

  // Ajax call to get and append HTML via a multiselect filter
  // destination is where the html will be injected
  // url is the fragment get in ajax
  var _ajaxSearchGetAndAppend = function _ajaxSearchGetAndAppend() {
    var dest = $(this).parents("li").data("destination"),
      url = $(this).parents("li").data("url"),
      searchKey = $(this).parents("li").data("search-key"),
      value = $(this).parents("li").data("value"),
      label = $(this).parents("li").find("label span:first-child").html();

    url += "?" + searchKey + "=" + value;

    $.get(url, function (data) {
      $('.' + dest).html(data);
    });
    $("span[data-message-type='" + searchKey + "']").html(label);
  };

  // Ajax call to get and append HTML
  // destination is where the html will be injected, in this case can be multiple seperated by commas
  // url is the fragment get in ajax, in this case can be multiple seperated by commas
  // searchKey is a customizable key found on the element itself
  // searchGroup is a validation to ensure we pass only parameters from a group of selects
  var _ajaxGetSearchByDateRange = function _ajaxGetSearchByDateRange() {
    var $this = $(this),
      url = $(".date-range-active").data("url"),
      destination = $(".date-range-active .ajax-receiver"),
      searchKey = $this.parents("li").data("search-key"),
      value = $this.parents("li").data("value"),
      parent = $this.parents(".multiselect-list-container"),
      monthNames = $(".date-range").data("months").split(","),
      loadingAction = $(".date-range").data("loading-action"),
      errorClass = "";

    //Hide the error messages
    $(".date-range-error-messages span").hide();
    $(".date-range-error-messages span").attr("aria-hidden", true);
    $(".date-range-error span").remove();

    //Update the value selected for the search
    parent.data(searchKey, value);

    var startDate = new Date(parent.data("startDateYear").toString(), parent.data("startDateMonth")),
      endDate = new Date(parent.data("endDateYear").toString(), parent.data("endDateMonth")),
      age = endDate.getFullYear() - startDate.getFullYear();

    var labelEndMonth = $("button[aria-describedby='label-end-date-month']").find(".multiselect-overlay-title"),
      mobileLabelEndMonth = $("button[aria-describedby='label-end-date-month']").find(".mobile-selection"),
      labelEndYear = $("button[aria-describedby='label-end-date-year']").find(".multiselect-overlay-title"),
      mobileLabelEndYear = $("button[aria-describedby='label-end-date-year']").find(".mobile-selection");

    //First validate if the date range is valid
    if (startDate > endDate) {
      if ($(this).attr("id").indexOf("start-date") >= 0) {
        errorClass = "date-range-error-end-date";
        endDate = new Date(startDate);
        parent.data("startDateYear", startDate.getFullYear());
        parent.data("startDateMonth", startDate.getMonth());


        if (labelEndMonth.html().charAt(0) === "[") {
          labelEndMonth.html("[" + monthNames[endDate.getMonth()] + "]");
          mobileLabelEndMonth.html("[" + monthNames[endDate.getMonth()] + "]");
          labelEndYear.html("[" + endDate.getFullYear() + "]");
          mobileLabelEndYear.html("[" + endDate.getFullYear() + "]");
        } else {
          labelEndMonth.html(monthNames[endDate.getMonth()]);
          mobileLabelEndMonth.html(monthNames[endDate.getMonth()]);
          labelEndYear.html(endDate.getFullYear());
          mobileLabelEndYear.html(endDate.getFullYear());
        }

        $("ul.end-date-month li").attr("aria-checked", "false");
        $("ul.end-date-month li[data-value='" + endDate.getMonth() + "']").attr("aria-checked", "true");
        $("ul.end-date-year li").attr("aria-checked", "false");
        $("ul.end-date-year li[data-value='" + endDate.getFullYear() + "']").attr("aria-checked", "true");

        $(".date-range-error-end-date").append("<span style=\"display: inline\">" + monthNames[startDate.getMonth()] + ", " + startDate.getFullYear() + ".");

      } else {
        errorClass = "date-range-error-start-date";
        startDate = new Date(endDate);
        parent.data("startDateYear", startDate.getFullYear());
        parent.data("startDateMonth", startDate.getMonth());

        var labelStartMonth = $("button[aria-describedby='label-start-date-month']").find(".multiselect-overlay-title"),
          mobileLabelStartMonth = $("button[aria-describedby='label-start-date-month']").find(".mobile-selection"),
          labelStartYear = $("button[aria-describedby='label-start-date-year']").find(".multiselect-overlay-title"),
          mobileLabelStartYear = $("button[aria-describedby='label-start-date-year']").find(".mobile-selection");

        if (labelStartMonth.html().charAt(0) === "[") {
          labelStartMonth.html("[" + monthNames[startDate.getMonth()] + "]");
          mobileLabelStartMonth.html("[" + monthNames[startDate.getMonth()] + "]");
          labelStartYear.html("[" + startDate.getFullYear() + "]");
          mobileLabelStartYear.html("[" + startDate.getFullYear() + "]");
        } else {
          labelStartMonth.html(monthNames[startDate.getMonth()]);
          mobileLabelStartMonth.html(monthNames[startDate.getMonth()]);
          labelStartYear.html(startDate.getFullYear());
          mobileLabelStartYear.html(startDate.getFullYear());
        }

        $("ul.start-date-month li").attr("aria-checked", "false");
        $("ul.start-date-month li[data-value='" + startDate.getMonth() + "']").attr("aria-checked", "true");
        $("ul.start-date-year li").attr("aria-checked", "false");
        $("ul.start-date-year li[data-value='" + startDate.getFullYear() + "']").attr("aria-checked", "true");

        $(".date-range-error-start-date").append("<span style=\"display: inline\">" + monthNames[endDate.getMonth()] + ", " + endDate.getFullYear() + ".");
      }

    } else {
      //If not check if the date range is inside 3 years
      if (endDate.getMonth() < startDate.getMonth() - 1) {
        age--;
      }

      if (startDate.getMonth() - 1 === endDate.getMonth() && endDate.getDay() < startDate.getDay()) {
        age--;
      }

      if (age > 3) {
        errorClass = "date-range-timespan-error";
        endDate = new Date(startDate);
        endDate.setFullYear(endDate.getFullYear() + 3);
        parent.data("endDateYear", endDate.getFullYear());
        parent.data("endDateMonth", endDate.getMonth());

        if (labelEndMonth.html().charAt(0) === "[") {
          labelEndMonth.html("[" + monthNames[endDate.getMonth()] + "]");
          mobileLabelEndMonth.html("[" + monthNames[endDate.getMonth()] + "]");
          labelEndYear.html("[" + endDate.getFullYear() + "]");
          mobileLabelEndYear.html("[" + endDate.getFullYear() + "]");
        } else {
          labelEndMonth.html(monthNames[endDate.getMonth()]);
          mobileLabelEndMonth.html(monthNames[endDate.getMonth()]);
          labelEndYear.html(endDate.getFullYear());
          mobileLabelEndYear.html(endDate.getFullYear());
        }

        $("ul.end-date-month li").attr("aria-checked", "false");
        $("ul.end-date-month li[data-value='" + endDate.getMonth() + "']").attr("aria-checked", "true");
        $("ul.end-date-year li").attr("aria-checked", "false");
        $("ul.end-date-year li[data-value='" + endDate.getFullYear() + "']").attr("aria-checked", "true");
      }
    }

    url += "?";
    $.each(parent.data(), function (key, value) {
      url += key + "=" + value + "&";
    });

    $.get(url.slice(0, -1), function (data) {
      $(destination).html(data);
      $('.date-range-mobile-update .start-month').html(monthNames[startDate.getMonth()]);
      $('.date-range-mobile-update .start-year').html(startDate.getFullYear());
      $('.date-range-mobile-update .end-month').html(monthNames[endDate.getMonth()]);
      $('.date-range-mobile-update .end-year').html(endDate.getFullYear());
      updateAriaLiveMessage(loadingAction + " " + monthNames[startDate.getMonth()] + " " + startDate.getFullYear() + " - " + monthNames[endDate.getMonth()] + " " + endDate.getFullYear());
      citiShare.detailedList.toggleList();
    });

    if (errorClass !== "") {
      $(".date-range-error-messages ." + errorClass).show();
      $(".date-range-error-messages ." + errorClass).attr("aria-hidden", false);
      $(".date-range-error-messages ." + errorClass).focus();
    }
  };

  var _ajaxGetSearchByDateRangeSimplified = function _ajaxGetSearchByDateRangeSimplified() {
    var $this = $(this).find("a");
    if (!$($this.attr("href")).hasClass("date-range-active")) {
      var url = $($this.attr("href")).data("url"),
        destination = $($this.attr("href")).data("destination"),
        parent = $(".date-range .multiselect-list-container"),
        monthNames = $(".date-range").data("months").split(","),
        loadingAction = $(".date-range").data("loading-action"),
        startDate = new Date(parent.data("startDateYear").toString(), parent.data("startDateMonth")),
        endDate = new Date(parent.data("endDateYear").toString(), parent.data("endDateMonth"));

      url += "?";
      $.each(parent.data(), function (key, value) {
        url += key + "=" + value + "&";
      });

      $.get(url.slice(0, -1), function (data) {
        $("." + destination).html(data);
        $('.date-range-mobile-update .start-month').html(monthNames[startDate.getMonth()]);
        $('.date-range-mobile-update .start-year').html(startDate.getFullYear());
        $('.date-range-mobile-update .end-month').html(monthNames[endDate.getMonth()]);
        $('.date-range-mobile-update .end-year').html(endDate.getFullYear());
        updateAriaLiveMessage(loadingAction + " " + monthNames[startDate.getMonth()] + " " + startDate.getFullYear() + " - " + monthNames[endDate.getMonth()] + " " + endDate.getFullYear());
        citiShare.detailedList.toggleList();
      });
      $(".date-range-active").removeClass("date-range-active");
      $($this.attr("href")).addClass("date-range-active");
    }
  };

  /* Post data to provided url via AJAX and handles JSON and HTML response.
   * Accepts a callback as a parameter.
   * Depends on
   *   - form "action" attribute (the url to make the post request to delete)
   *   - data-id attribute (the id of the element to delete)
   *   - data-url attribute (the url to get the updated html fragment)
   *   - data-destination attribute (where to append the new html fragment)
   */
  var _ajaxPost = function _ajaxPost(e, done) {

    var $form = $(this);
    var serializedData = $form.serializeArray();
    var postUrl = $form.attr('action');
    var getHtmlUrl = $form.data('url');
    var htmlFragmentDest = $form.data('destination');
    var isDynamic = $form.data('dynamic') || false;

    $.each(serializedData, function(i, obj) {
      var $relatedInput = $('#' + obj.name);
      obj.value = $relatedInput.data('value') || $relatedInput.val();
    });

    var postAjax = $.post(postUrl, serializedData);

    // Post the data
    postAjax.done(function (jsonRes) {

      // Check if response is an object
      if (typeof jsonRes !== 'object') {
        return done('error', {message: "Response from the server isn't a json object."});
      }

      // Handle success/error depending on json response.
      // TODO: At the same time do the error messages for Legal Notices and Email Settings.
      if (jsonRes.hasOwnProperty('success') && jsonRes.success !== '') {
        var htmlAjax = $.get(getHtmlUrl);

        // Handle success
        htmlAjax.done(function (htmlRes) {
          $(htmlFragmentDest).empty();
          $(htmlFragmentDest).append(htmlRes);

          var $ajaxDelete = $('.ajax-delete');
          if($ajaxDelete.length > 0) {
            $ajaxDelete.off('form:delete', '**');
            $ajaxDelete.on('form:delete', _ajaxDelete);
          }

          return done('success', jsonRes, isDynamic);
        });

        // Handle error
        htmlAjax.fail(function (err) {
          console.log("Problem getting the html after a post request.", err);
          return done('error', err, isDynamic);
        });
      }
      else if (jsonRes.hasOwnProperty('error') && jsonRes.error !== '') {
        return done('error', jsonRes, isDynamic);
      }
    });

    // Test this
    postAjax.fail(function (response) {

      var jsonRes = {};

      if (response.hasOwnProperty('error')) {
        jsonRes.error = response.error;
      }

      if (response.hasOwnProperty('responseJSON')) {
        jsonRes = response.responseJSON;
      }

      return done('error', jsonRes, isDynamic);
    });
  };

  /*
   * Bind click event on all .ajax-delete elements
   * This makes a POST request with the ID of the element to delete.
   * Depends on
   *   - data-action attribute (the url to make the post request to delete)
   *   - data-id attribute (the id of the element to delete)
   *   - data-url attribute (the url to get the updated html fragment)
   *   - data-destination attribute (where to append the new html fragment)
   */
  var _ajaxDelete = function _ajaxDelete(e, done) {

    e.preventDefault();

    var $link = $(e.currentTarget);
    var $form = $link.parents('form');

    var postUrl = $link.data('action');
    var getHtmlUrl = $link.data('url');
    var htmlFragmentDest = $link.data('destination');
    var isDynamic = $form.data('dynamic') || false;

    var data = {
      "id": $link.data('id')
    };

    var postAjax = $.post(postUrl, data);

    // Post the data
    postAjax.done(function (jsonRes) {

      // Check if response is an object
      if (typeof jsonRes !== 'object') {
        console.log('Response from the server is not and object.');
        return;
      }

      var htmlAjax = $.get(getHtmlUrl);

      // Handle success
      htmlAjax.done(function (htmlRes) {
        $(htmlFragmentDest).empty();
        $(htmlFragmentDest).append(htmlRes);

        var $ajaxDelete = $('.ajax-delete');
        $ajaxDelete.off('form:delete', '**');
        $ajaxDelete.on('form:delete', _ajaxDelete);

        if(done) {
          return done('success', jsonRes, isDynamic);
        }
      });

      // Handle error
      htmlAjax.fail(function (err) {
        console.log("Problem getting the html after the post request to delete the item.", err);
        if(done) {
          return done('error', jsonRes, isDynamic);
        }
      });
    });

    postAjax.fail(function (response) {
      console.log("Problem making the post request to delete the item.", response);

      if(done) {

        var jsonRes = {};

        if (response.hasOwnProperty('error')) {
          jsonRes.error = response.error;
        }

        if (response.hasOwnProperty('responseJSON')) {
          jsonRes = response.responseJSON;
        }

        return done('error', jsonRes, isDynamic);
      }
    });

    return false;
  };

// Ajax call to get, sort and append HTML
// destination is where the html will be injected
// url is the fragment get in ajax
// direction is a toggle
// message is a treated message to be passed to an element with aria-live
  var _ajaxGetSortAndAppend = function _ajaxGetSortAndAppend() {
    var $this = $(this);
    $(".multiselect-sort-message").hide();
    $(".multiselect-sort-message").attr("aria-hidden", "true");
    //Weird trick to reuse the function for multiselects
    if ($this.is("input")) {
      $this = $this.parents("li");
    }
    var sortType = $this.data("sort-type") || "sort-less",
      pageNumber = $this.data("page-number") || "1",
      sortableOptions = $("body"),
      currentDirection = "ascending",
      ajaxUrl = $this.data("url");

    if ((sortType !== "sort-less")) {
      //A sort option was chosen
      ajaxUrl += "?sortby=" + sortType;
      if ($this.data("sort-direction")) {
        //First lets see if a direction was given
        currentDirection = $this.data("sort-direction");
        sortableOptions.data("last-direction-sorted", currentDirection);
        ajaxUrl += "&direction=" + currentDirection + "&page=" + pageNumber;
      } else if ($this.data("page-number") === undefined) {
        //Else, lets check if the link had a page number
        //check first if the sort must be reversed
        if (sortType === sortableOptions.data("last-sort-done")) {
          //If the same sort was requested twice, reverse it
          //then remove it since all others will be ascending
          currentDirection = "descending";
          sortableOptions.removeData("last-sort-done");
        } else {
          //else sort asending and remember the type
          sortableOptions.data("last-sort-done", sortType);
        }
        //Remember the direction for the pagination
        sortableOptions.data("last-direction-sorted", currentDirection);
        ajaxUrl += "&direction=" + currentDirection + "&page=" + pageNumber;
      } else {
        //If a page number was requested and a sort option was chosen previously
        //check first if a direction was saved
        currentDirection = sortableOptions.data("last-direction-sorted");
        ajaxUrl += "&direction=" + currentDirection + "&page=" + pageNumber;
      }
    } else {
      //No sort were chosen, hence we just ask for a page number
      ajaxUrl += "?page=" + pageNumber;
    }

    $.get(ajaxUrl, function (data) {
      $('.' + $this.data("destination")).html(data);
    }).done(function () {
        var link = sortableOptions.find("table [data-sort-type='" + sortType + "']"),
          actions = $(".accessibility-actions"),
          message = "";
        link.addClass("sorted-" + currentDirection);

        if (sortType !== "sort-less") {
          $(".my-account-pagination a").data("sort-type", sortType);
          $(".multiselect-sort-message[data-sort-type='" + sortType + "']").show();
          $(".multiselect-sort-message[data-sort-type='" + sortType + "']").attr("aria-hidden", "false");
          message += actions.data("message-sort") + " " + sortType + ", ";
          if (currentDirection === "ascending") {
            message += actions.data("message-ascending") + ", ";
          } else {
            message += actions.data("message-descending") + ", ";
          }
        }
        message += actions.data("message-page") + " " + pageNumber;
        updateAriaLiveMessage(message);
        $('#' + $this.get(0).id).focus();
      }
    );
  };

  var _ajaxReinstatePoints = function _ajaxReinstatePoints(event) {
    event.preventDefault();
    var $this = $(this),
      serializedData = $this.serializeArray(),
      formUrl = $this.data('form-url'),
      formDestination = $this.data('form-destination'),
      pointsUrl = $this.data('points-total-url'),
      pointsDestination = $this.data('points-total-destination'),
      confirmation = $(".reinstate-points-confirmation");

    confirmation.hide();
    confirmation.attr("aria-hidden", "true");

    var postAjax = $.post($this.attr("action"), serializedData);
    // Post the data
    postAjax.done(function () {
      $.get(formUrl, function (data) {
        $('.' + formDestination).html(data);
      }).done(function () {
        $.get(pointsUrl, function (data) {
          $('.' + pointsDestination).html(data);
        });
      });
      confirmation.show();
      confirmation.attr("aria-hidden", "false");
      confirmation.focus();
      return false;
    });
  };

// Bind the _ajaxGetAndAppend on the selectmenuchange event of jquery ui selects.
  if (ajaxConfig.$ajaxSelects.length > 0) {
    ajaxConfig.$ajaxSelects.on('selectmenuchange', _ajaxGetAndAppend);
  }

  // Bind the _ajaxGetAndAppend on the click events of select li elements
  // Custom event from filters.js
  if (ajaxConfig.$ajaxMultiSelects.length > 0) {
    ajaxConfig.$ajaxMultiSelects.find(".js-multiselect-dropdown-option-input").on('customEventLoadAjax', _orderHistorySort);
  }

  // Bind the _ajaxGetSearchByDateRange on the selectmenuchange event of jquery ui selects.
  // Custom event from filters.js
  if (ajaxConfig.$dateRangeSelects.length > 0) {
    ajaxConfig.$dateRangeSelects.find(".js-multiselect-dropdown-option-input").on('customEventLoadAjax', _ajaxGetSearchByDateRange);
  }

  // Bind the _ajaxGetAndAppend on the click event
  if (ajaxConfig.$ajaxGets.length > 0) {
    //Note that .selector is deprecated in jQuery, it's the only way that I know to do this and still support our current syntax.
    $(document).on('click', ajaxConfig.$ajaxGets.selector, _ajaxGetAndAppend);
  }

  // Bind the _ajaxGetAndAppend on the inputs of the multiselects.
  if (ajaxConfig.$ajaxSearch.length > 0) {
    ajaxConfig.$ajaxSearch.find(".js-multiselect-dropdown-option-input").on('customEventLoadAjax', _ajaxSearchGetAndAppend);
  }

  // Special treatment must be made to announce the action made by the sort for screen-readers
  //Note that .selector is deprecated in jQuery, it's the only way that I know to do this and still support our current syntax.
  $(document).on('click', ajaxConfig.$ajaxSorts.selector, _ajaxGetSortAndAppend);

// Special treatment must be made to announce the action made by the sort for screen-readers
  if (ajaxConfig.$ajaxMultiSelectSort.length > 0) {
    ajaxConfig.$ajaxMultiSelectSort.find(".js-multiselect-dropdown-option-input").on('customEventLoadAjax', _ajaxGetSortAndAppend);
  }

// Special treatment must be made to announce the action made by the sort for screen-readers
  if (ajaxConfig.$ajaxReinstatePoints.length > 0) {
    $(document).on('form:reinstate', ajaxConfig.$ajaxReinstatePoints.selector, _ajaxReinstatePoints);
  }

  // Launch a search by date rage for a content of block
  if (ajaxConfig.$pointsSummaryTabs.length > 0) {
    ajaxConfig.$pointsSummaryTabs.on('focus', _ajaxGetSearchByDateRangeSimplified);
    ajaxConfig.$pointsSummaryTabs.on('click', _ajaxGetSearchByDateRangeSimplified);
  }

  //Display error message from an ajax call 404 CTA
  function displayCtaErrorMessage(previousElement) {
    var theElementToShow = $(previousElement).closest(".order-item-bottom").find(".malfunction-error-cta-message");

    //Accessibility that prevent the users.
    theElementToShow.attr("role", "alert");
    theElementToShow.attr("aria-live", "assertive");

    theElementToShow.show();
  }

// Bind the click event to all the .ajax-post elements.
// On click get the url of the modal fragment via ajax
// then show it in the page.
  if (ajaxConfig.$ajaxOverlays.length > 0) {

    ajaxConfig.$ajaxOverlays.on("click.ajaxCall", function () {

      var url = $(this).data("url");
      var previousElement = null;

      if( $(this).hasClass("cancel-order-btn") ) {
        previousElement = $(this).closest(".order-item-bottom .cta-container").find("a:first");
      } else {
        previousElement = $(this).get(0);
      }

      $.ajax({
        type: 'GET',
        url: url,
        success: function(data){
          // Append the dark background behind the overlay
          $('#modal-overlay').remove();
          $('body').append('<div id="modal-overlay"></div>');

          // Remove the existant overlays
          $('.ajax-modal-container').remove();

          $("body").append('<div class="ajax-modal-container">' + data + '</div>');
          var $modal = $('.ajax-modal-container .modal');
          var modalInstance = citiShare.AccessibleModal({modal: $modal, previousElement: previousElement});
          modalInstance.show();
          //Call the function that bind buttons (Close button)
          bindOverlay();
        },
        statusCode: {
          202: function() {
            displayCtaErrorMessage(previousElement);
          },

          404: function() {
            displayCtaErrorMessage(previousElement);
          },

          500: function() {
            displayCtaErrorMessage(previousElement);
          }
        }
      });
    });
  }

  /*
   * Bind the form:post event to all the .ajax-overlay elements.
   */
  if (ajaxConfig.$ajaxPosts.length > 0) {
    ajaxConfig.$ajaxPosts.on('form:post', _ajaxPost);
  }

// Bind the proper event for ajax-delete elements.
  if (ajaxConfig.$ajaxDeletes.length > 0) {
    ajaxConfig.$ajaxDeletes.on('form:delete', _ajaxDelete);
  }

//AjaxReplace used for replace the blocks in the modal already existing
  var _ajaxGetAndReplace = function _ajaxGetAndReplace() {

    var dest = $(this).data("destination");
    var url = $(this).data("url");

    $.get(url, function (data) {
      $('.' + dest).html(data);
      var modal = $('.ajax-modal-container .modal');
      citiShare.AccessibleModal({modal: modal});
      bindOverlay();
    });

  };

//Bind the close button on the overlays
//Trigger a click on the modal-overlay that close the modal
  function bindOverlay() {

    var accountOverlay = {
      $closeSelector: $('.triggerCloseModalBtn'),
      $closeTargetSelector: $('#modal-overlay'),
      $confirmedSelector: $('.triggerConfirmed')
    };

    accountOverlay.$closeSelector.on("click", function () {
      if( $(this).hasClass("reloadList") ) {
        $(".multiselect-container:first li:first-child").find('input').trigger('customEventLoadAjax');
      }
      accountOverlay.$closeTargetSelector.click();
    });
  }

// Creates a span which will be read by screen readers and add a message to it.
// If it already exists, simply replace the html with the message.
  function updateAriaLiveMessage(message) {
    var $messageContainer = $('.message-update');
    if ($messageContainer.length === 0) {
      var node = document.createElement("span"),
        textnode = document.createTextNode(message);
      node.appendChild(textnode);
      node.setAttribute("class", "message-update visuallyhidden");
      node.setAttribute("aria-live", "assertive");
      document.body.appendChild(node);
    } else {
      $messageContainer.html(message);
    }
  }

  $(document.body).on('click', '.ajax-replace', _ajaxGetAndReplace);

  return {
    ajaxDelete: _ajaxDelete
  };

})
();

/**
 * Number stepper
 * @type {{numericStepper}}
 */

citiShare.numericStepper = (function() {
    "use strict";

    /**
     * Init stepper
     */
    function numericStepperSetup(){

        var $parentEl =  $(".stepper-buttons");
        var $inputStepperEl = $(".numeric-stepper > input");
        var maxQuantity = parseInt($inputStepperEl.attr("max"));
        var minQuantity = parseInt($inputStepperEl.attr("min"));
        var $decreaseButton =  $("[data-stepper=decrease]");
        var $increaseButton =  $("[data-stepper=increase]");

        // Allow numbers only (no decimal)
        $inputStepperEl.numeric({
            decimal: false,
            decimalPlaces : -1
        });

        $parentEl.on("click", function(e){

            e.preventDefault();
            var getCurrentValue = parseInt($inputStepperEl.val());
            var valueAdjustment = parseInt($(this).attr("data-quantity-adjustment"));
            var setValue = getCurrentValue + valueAdjustment;

            function setIncreaseButton () {
                if ( setValue <= maxQuantity ) {
                    $inputStepperEl.val(setValue);
                    return $increaseButton.prop("disabled", false);
                }
                else {
                    return $increaseButton.prop("disabled", true);
                }
            }

            function setDecreaseButton () {
                if ( setValue < minQuantity ){
                    return $decreaseButton.prop("disabled", true);
                }
                else {
                    $inputStepperEl.val(setValue);
                    return $decreaseButton.prop("disabled", false);
                }
            }

            if ( getCurrentValue > minQuantity ){
                return setIncreaseButton();
            }
            else {
                return setDecreaseButton();
            }

        });
    }

    return {
        numericStepperSetup: numericStepperSetup
    };

})();


/*
 *
 * This function is used to initialize and handle everything related
 * to the order history page
 *
 * Depends on
 *  - Having a DIV with a class of `order-history`
 *  - jQuery
 *
 */
citiShare.orderHistory = (function () {

  "use strict";

  /*
   * Init the accessible list
   */
  var initLists = function initLists() {
    //Order details -> Order summary list
    citiShare.accessibleMultiColumnList('.order-details-summary-list', 3).init();

    $('.order-item-information-list-container.three-column').each(function () {
      //Order history -> Order items list for three column
      citiShare.accessibleMultiColumnList(this, 3).init();
    });

    $('.order-item-information-list-container.two-column').each(function () {
      //Order history -> Order items list for two column
      citiShare.accessibleMultiColumnList(this, 2).init();
    });


    $('.order-item-international-list-container').each(function () {
      //Order history -> Order items list for two column
      citiShare.accessibleMultiColumnList(this, 3).init();
    });

  };

  /*
   * Init the citiShare.order-history code.
   * Basically bind all necessary events.
   */
  var init = function init() {
    initLists();
  };

  if ($('.order-history').length > 0 || $('.order-details').length > 0) {
    init();
  }

})();

/**
 * simplePagination.js Plugin Documentation :
 * http://flaviusmatis.github.io/simplePagination.js/
 */

"use strict";

citiShare.pagination = (function() {

    /**
     * Init the pagination plugin on PLP
     *
     * @param {jQuery} $selector Targeted list items
     * @param {jQuery} paginationClass Pagination row container
     * @param {Number} itemsPerPage Number of items per page to display
     */
    function initPagination($selector, paginationClass, itemsPerPage) {

        var totalItems = $selector.length;
        var maxItems = 48;
        $selector.slice(itemsPerPage).hide();
        
        if(typeof $(paginationClass).pagination === 'function') {
          $(paginationClass).pagination({
              items: totalItems,
              itemsOnPage: itemsPerPage,
              onInit: function() {
  
                  // One page
                  if ( itemsPerPage >= totalItems ) {
                      itemsPerPage = totalItems;
                      $(".pagination").addClass("is-hidden");
                      $('.pagination-next').hide();
                      $('.pagination-prev').hide();
                      $('.pagination-summary.top').addClass('top-padding');
                  }
  
                  $('.pagination-next > a').attr("href","#" + (2));
                  $('.pagination-prev > a').hide();
  
                  $('.next').parent().addClass('border');
                  $('.prev').parent().addClass('border');
  
                  $(".current-page").html("1");
                  $(".show-to-page").html(itemsPerPage);
  
                  if(totalItems > maxItems ){
                      $(".total-pages").html(totalItems + "<span class='pipe'> | </span>");
                  }else{
                      $(".total-pages").html(totalItems);
                  }
  
                  setupAccessibility();
              },
              onPageClick: function(pageNumber) {
  
                  var showFrom = itemsPerPage * (pageNumber - 1);
                  var showTo = showFrom + itemsPerPage;
                  var windowWidth = window.innerWidth || $(window).width();
  
                  if(windowWidth <= 960){
                      $('.prev').parent().hide();
                      $('.next').parent().hide();
                  }
                  // Set max
                  if ( showTo >= totalItems ) {
                      showTo = totalItems;
                  }
  
                  // Set min
                  if ( showFrom <= 1 ){
                      showFrom = 0;
                  }
  
                  //close modals
                  $('.modal-close-button').trigger('click');
  
                  var total = $(paginationClass).pagination('getPagesCount');
  
                  if(pageNumber <= 1){
                      $('.pagination-prev > a').hide();
                      $('.pagination-next > a').show();
                  }else if(pageNumber > 1 && pageNumber < total) {
                      $('.pagination-prev > a').show();
                      $('.pagination-next > a').show();
                  }else{
                      $('.pagination-next > a').hide();
                      $('.pagination-prev > a').show();
                  }
  
                  $(".current-page").html(showFrom === 0 ? 1 : showFrom);
                  $(".show-to-page").html(showTo);
                  $(".total-pages").html(totalItems);
  
  
  
                  var next = $('.next').parent().addClass('border');
                  var prev = $('.prev').parent().first().addClass('border');
  
                  prev.insertBefore(next);
  
                  $('.prev').each(function(){
                      if(!$(this).parent().hasClass('border')){
                          $(this).parent().remove();
                      }
                  });
  
                  setupAccessibility();
  
                  if(itemsPerPage >= maxItems ){
                      $(".total-pages").html(totalItems + "<span class='pipe'> | </span>");
                  }else{
                      $(".total-pages").html(totalItems);
                  }
  
                  $selector.hide().slice(showFrom, showTo).show();
  
  
                  $('html, body').animate({ scrollTop: 0 }, 'slow');
              }
          });
        }


    }

    function setupAccessibility(){
        $('.page-link').each(function(){
            if(!$(this).parent().hasClass('border')){
                $(this).prepend('<span class="visuallyhidden">Page </span>');
            }
            if (!$(this).hasClass('border')) {
                $(this).addClass('omniture-pagination-page');
            }
        });
        var prevHtml = $('.prev').first().html();
        var nextHtml = $('.next').first().html();
        $('.current').prepend('<span class="visuallyhidden">Page</span>');

        $('.prev').html(prevHtml + '<span class="visuallyhidden">Page</span>').addClass('omniture-pagination-previous');
        $('.next').html(nextHtml + '<span class="visuallyhidden">Page</span>').addClass('omniture-pagination-next');
    }


    /**
     * Desktop view pagination button display logic
     */
    function setDesktopPaginationButtons () {

        var parentContainer = $(".pagination > ul > li");

        parentContainer.css({
            "width": "auto"
        });
    }

    /**
     * Mobile view pagination button display logic
     */
    function setMobilePaginationButtons () {

        $('.dyn-next').on('click', function(e){
            e.preventDefault();
            $('li.border > a.next').trigger('click');
        });

        $('.dyn-prev').on('click', function(e){
            e.preventDefault();
            $('li.border > a.prev').trigger('click');
        });

        if($('.pagination-summary').prev().hasClass('tag-container')){
            $('.tag-container').next().addClass('top');
        }

        if($('.pagination-summary').prev().hasClass('product-list')){
            $('.product-list').next().addClass('bottom');
        }

        $(window).resize(function(){
            var windowWidth = window.innerWidth || $(window).width();

            //  To match include_media 959px tablet breakpoint
            if(windowWidth < 959){
                $('.pagination-summary.top').siblings('.pagination-prev').addClass('top');
                $('.pagination-summary.top').siblings('.pagination-next').addClass('top');
                $('.prev').parent().hide();
                $('.next').parent().hide();
            }else{
                $('.prev').parent().show();
                $('.next').parent().show();
            }
        }).trigger('resize');
    }

    function init(){
        setMobilePaginationButtons();
    }

    return {
        init: init,
        initPagination: initPagination,
        setDesktopPaginationButtons: setDesktopPaginationButtons,
        setMobilePaginationButtons: setMobilePaginationButtons
    };

})();

/*jshint unused:false, sub:true*/

'use strict';

function _toArray(arrayLike) {
  return Array.prototype.slice.call(arrayLike);
}

var PointsTransferFilters = function(element) {
  /**
   * Base jQuery element
   *
   * @type {jQuery}
   * @private
   */
  this._$element = $(element);

  /**
   * Main application wrapper.
   *
   * @type {jQuery}
   * @private
   */
  this._$mainWrapper = null;

  /**
   * window element.
   *
   * @type {jQuery}
   * @private
   */
  this._html = $('html');

  /**
   * window element.
   *
   * @type {jQuery}
   * @private
   */
  this._$window = $(window);

  /**
   * Reward elements which will be filtered.
   *
   * @type {jQuery}
   * @private
   */
  this._$rewardElements = null;

  /**
   * Reward elements silod into their specific categories.
   *
   * @type {Object}
   * @private
   */
  this._rewards = {};

  /**
   * Window width or inner width
   *
   * @type {Number}
   * @private
   */
  this._windowWidth = null;

  /**
   * Modal open CTA for mobile.
   *
   * @type {jQuery}
   * @private
   */
  this._$modalLaunchCTA = null;

  /**
   * The inner content of the modal wrap.
   *
   * @type {jQuery}
   * @private
   */
  this._filterInnerContent = null;

  /**
   * The mobile title for the header. Gets removed
   * from the DOM and cached into this instance
   * variable.
   *
   * @type {jQuery}
   * @private
   */
  this._mobileTitle = null;

  /**
   * Has the modal been destroyed by the switch in the viewport
   * orientation.
   *
   * @type {Boolean}
   * @private
   */
  this._modalDestroyedByViewportSwitch = false;

  /**
   * Boolean to check if modal is open or not.
   *
   * @type {Boolean}
   * @private
   */
  this._modalOpen = false;

  /**
   * Filter Dropdowns
   *
   * @type {jQuery}
   * @private
   */
  this._$filters = null;

  /**
   * Boolean to determine if on mobile.
   *
   * @type {Boolean}
   * @private
   */
  this._isMobile = false;

  /**
   * Boolean to determine if on desktop
   *
   * @type {Boolean}
   * @private
   */
  this._isDesktop = false;

  /**
   * Array of the current active filters.
   *
   * @type {Array}
   * @private
   */
  this._activeFilters = [];


  this._init();
};



/**
 * Initializes the filterTabs component
 */
PointsTransferFilters.prototype._init = function() {
  this._$mainWrapper = this._$element.closest('.' + PointsTransferFilters.ClassName.MAIN);

  this._$filters = this._$element.find('.' + PointsTransferFilters.ClassName.FILTER);

  this._mobileTitle = this._$element.find('.' + PointsTransferFilters.ClassName.MOBILE_TITLE);

  this._$modalLaunchCTA = this._$mainWrapper.find('.' + PointsTransferFilters.ClassName.MODAL_LAUNCH);

  this._$rewardElements = this._$mainWrapper.find('.' + PointsTransferFilters.ClassName.REWARDS);

  this._filterInnerContent = this._$element.html();

  this._rewards = this._getRewards();

  this._initializeBindings();
};


/**
 * _initializeFilters
 * Will initialize the filters.
 */
PointsTransferFilters.prototype._initializeFilters = function() {

};

/**
 * _initializeBindings
 * Will initialize the bindings and event listeners for the form inputs
 * on the page.
 *
 * @private
 */
PointsTransferFilters.prototype._initializeBindings = function() {
  // handle resize events
  this._$window.on('resize orientationchange', $.debounce(250, $.proxy(this._handleResize, this)));

  this._$modalLaunchCTA.on('click', this._handleModalLaunch.bind(this));

  this._initializeFilterBindings();
};

/**
 * _initializeFilterBindings
 * Will inistalize event delegation for the filters.
 */
PointsTransferFilters.prototype._initializeFilterBindings = function() {
  this._$filters = this._$element.find(
    '.' + PointsTransferFilters.ClassName.FILTER);

  // handle keypresses on checkboxes.
  this._$filters.on(
    'keypress',
    this._handleCheckboxKeypress.bind(this));

  // handle click handles on checkboxes.
  this._$filters.on(
    'click',
    this._handleCheckboxToggle.bind(this));
};

/**
 * _removeFilterBindings
 * Remove event listeners on the filers.
 *
 * @private
 */
PointsTransferFilters.prototype._removeFilterBindings = function() {
  this._$filters.off('keypress');
  this._$filters.off('click');
};

/**
 * _handleResize
 * Will handle window resize and or orientation changes
 *
 * @param {Object} evt
 * @private
 */
PointsTransferFilters.prototype._handleResize = function(evt) {
  this._windowWidth = window.innerWidth || this._windowWidth;

  // Handle if mobile
  if (this._windowWidth <= window.citiConfig.tabletBreakpoint) {
    if (!this._isMobile) {
      this._isMobile = true;
      this._isDesktop = false;
      this._toggleAllFilters(false);
      this._initialzieMobileLayout();
    }
  }

  // Handle if desktop
  if (this._windowWidth > window.citiConfig.tabletBreakpoint) {
    if (!this._isDesktop) {
      this._isDesktop = true;
      this._isMobile = false;
      this._closeModal(true);
      this._destroyMobileLayout();
    }
  }
};

/**
 * _handleCheckboxKeypress
 * Will handle events for when there is a keypress.
 *
 * @param {object} evt
 * @private
 */
PointsTransferFilters.prototype._handleCheckboxKeypress = function(evt) {
  if (evt.charCode === PointsTransferFilters.Keys.SPACE ||
      evt.charCode === PointsTransferFilters.Keys.ENTER) {
    evt.preventDefault();
    this._handleCheckboxToggle(evt);
    return;
  }

  if (evt.which === PointsTransferFilters.Keys.UP ||
      evt.which === PointsTransferFilters.Keys.DOWN) {
    this._handleCheckboxKeyNavigate(evt.which);
  }
};

/**
 * _handleModalLaunch
 * Will handle when the modal CTA is clicked.
 * NOTE: this doesn't instantiate the modal. That is done
 * via a CITI plugin.
 *
 * @param {Object} evt
 * @private
 */
PointsTransferFilters.prototype._handleModalLaunch = function(evt) {
  $('.oc-container').removeAttr('aria-hidden'); //this removes from outer main parent aria-hidden
  
  //loop through all sections in dom and apply aria-hidden except for filter container
  $('section, header, footer, #header-desktop').attr('aria-hidden','true');
  $('.points-transfer-landing-body-filters-container').attr('aria-hidden','false');
  
  var $modal = this._$element.find('#' + PointsTransferFilters.ClassName.MODAL_ID);
  var isHidden = $modal.attr('aria-hidden');

  if (this._modalDestroyedByViewportSwitch) {
    new citiShare.AccessibleModal({
      modal: $modal,
      previousElement: evt.target
    });
  }

  // TODO:: CITI-2205 WIP, clean it up
  $('.points-transfer-landing-body-filters-mobile-wrap').attr('aria-hidden', 'true');

  if (isHidden === 'false') {
    this._modalOpen = true;
  } else {
    this._modalOpen = false;
  }
  
  setTimeout(function() {
    var closeButton = $modal.find('.modal-close-button');
    closeButton.attr('tabindex', '-1');
    closeButton.focus();
  }, 1000);

  $(window).scrollTop(0);
  this._$element.find('#modal-points-transfer').attr('style', 'display:block');
  this._html.addClass(PointsTransferFilters.ClassName.NO_SCROLL);
};

/**
 * _unSelectCheckbox
 * Will toggle a chekcbox based on the value provided.
 *
 * @param {string } val
 * @private
 */
PointsTransferFilters.prototype._unSelectCheckbox = function(val) {
  var filter = this._$filters.filter("[for='" + val + "']");
  var checkbox = filter.find(
    '.' + PointsTransferFilters.ClassName.CHECKBOX);

  if (filter.attr('aria-checked')) {
    filter.attr('aria-checked', 'false');
    checkbox.removeClass('is-checked');
  }
};

/**
 * _handleCheckboxToggle
 * Will handle the checkbox toggling and set aria properties.
 *
 * @param {object} evt
 * @private
 */
PointsTransferFilters.prototype._handleCheckboxToggle = function(evt) {
  var el = $(evt.target);
  var filter = el.closest(
    '.' + PointsTransferFilters.ClassName.FILTER);
  var checkbox = filter.find(
    '.' + PointsTransferFilters.ClassName.CHECKBOX);
  var value = checkbox.data('value').toLowerCase();

  if (value === 'all') {
    // determine if on or of
    var val = (filter.attr('aria-checked') === 'false') ? true : false;

    filter.attr('aria-checked', val);

    if (val) {
        this._toggleAllFilters(false);
        checkbox.addClass('is-checked');
    } else {
        checkbox.removeClass('is-checked');
    }

    return this._handleCheckboxTrigger(val, filter);
  }

  if (filter.attr('aria-checked') === 'false') {
    filter.attr('aria-checked', 'true');
    checkbox.addClass('is-checked');
    this._handleCheckboxTrigger('true', filter);
  } else {
    filter.attr('aria-checked', 'false');
    checkbox.removeClass('is-checked');
    this._handleCheckboxTrigger('false', filter);
  }
};

/**
 * _handleClearFilters
 * Will handle when the user wants to clear the checkboxes.
 * By looping through each checkbox and triggering a click event
 * if the checkbox is enabled.
 *
 * @param {Object} evt
 * @private
 */
PointsTransferFilters.prototype._handleClearFilters = function(evt) {
  var filter = this._$element.find(
    '.' + PointsTransferFilters.ClassName.FILTER);
  var i = 0;

  if (evt.type === 'click' ||
      evt.keyCode === PointsTransferFilters.Keys.SPACE ||
      evt.keyCode === PointsTransferFilters.Keys.ENTER) {

    this._toggleAllFilters(false);
  }
};

/**
 * _toggleAllFilters
 * Will clear the filters.
 *
 * @param {Boolean} apply
 * @private
 */
PointsTransferFilters.prototype._toggleAllFilters = function(apply) {
  var filter = this._$element.find(
    '.' + PointsTransferFilters.ClassName.FILTER);
  var i = 1;
  var applyFilters = (apply) ? 'true' : 'false';

  for(; i < filter.length; i++) {
    var currFilter = filter.eq(i);
    var checkbox = filter.find(
      '.' + PointsTransferFilters.ClassName.CHECKBOX);
    checkbox.toggleClass('is-checked', apply);

    currFilter.attr('aria-checked', applyFilters);
    currFilter.trigger('change');
    this._handleCheckboxTrigger(applyFilters, currFilter);
  }
};

/**
 * _handleCheckboxTrigger
 * Will handle events for when the checkbox value changes and needs
 * to trigger an event.
 *
 * @param {string} val
 * @param {jQuery} el
 *
 * @private
 */
PointsTransferFilters.prototype._handleCheckboxTrigger = function(val, el) {
  var data = {
    'value': val,
    'reward': el.attr('for').toLowerCase(),
    'element': el
  };

  this._$mainWrapper.trigger('Citi:FiltersTriggered', data);
  this._applyFilters(data);
};

/**
 * _initializeMobileListeners
 *
 * @param {jQuery} el
 * @private
 */
PointsTransferFilters.prototype._initializeMobileListeners = function(el) {
  var $closeBtn = el.find(
    '.' + PointsTransferFilters.ClassName.CLOSE_BTN);
  var $clearBtn = el.find(
    '.' + PointsTransferFilters.ClassName.MODAL_BUTTON_CLEAR);
  var $acceptBtn = el.find(
    '.' + PointsTransferFilters.ClassName.MODAL_BUTTON_ACCEPT);

  $closeBtn.on(
    'click',
    this._closeModal.bind(this, false));

  $clearBtn.on(
    'keypress',
    this._handleClearFilters.bind(this));

  $acceptBtn.on(
    'keypress',
    this._handleAcceptFilters.bind(this));

  $clearBtn.on(
    'click',
    this._handleClearFilters.bind(this));

  $acceptBtn.on(
    'click',
    this._handleAcceptFilters.bind(this));
};

/**
 * _initialzieMobileLayout
 * Will build the mobile layout and initialize the mobile bindings.
 *
 * @private
 */
PointsTransferFilters.prototype._initialzieMobileLayout = function() {
  this._$modalElement = this._buildModalElements();

  this._removeFilterBindings();

  // empty the current DOM from the modal
  this._$element.empty();
  this._$element.addClass('show');

  this._$element.append(this._$modalElement);

  this._initializeMobileListeners(this._$element);
  this._initializeFilterBindings();
};

/**
 * _buildModalElements
 * Will build DOM and populate the DOM based for the modal.
 *
 * @private
 * @return {jQuery|Element}
 */
PointsTransferFilters.prototype._buildModalElements = function() {
  var $modalWrap = $('<div>');
  var $titleElementOffscreen = $('<div>');
  var $titleElement = $('<h2>');
  var modalContent = this._filterInnerContent;
  var $modalContent = $(modalContent).clone();
  var content = this._$element.data('content');
  var $closeButton = $('<button>');
  var $closeicon = $('<i>');
  var $filterList = $modalContent.find('.' + PointsTransferFilters.ClassName.FILTER_LIST);

  // build modal wrap attributes
  $modalWrap.attr('aria-hidden', 'false');
  $modalWrap.attr('id', PointsTransferFilters.ClassName.MODAL_ID);
  $modalWrap.attr('aria-labelledby', PointsTransferFilters.ARIA.MODAL_LABEL);
  $modalWrap.attr('aria-describedby', PointsTransferFilters.ARIA.MODAL_DESCRIBE);
  $modalWrap.attr('role', 'dialog');
  $modalWrap.addClass(PointsTransferFilters.ClassName.MODAL_CLASS);

  // build title offscreen element attributes
  $titleElementOffscreen.attr('id', PointsTransferFilters.ARIA.MODAL_DESCRIBE);
  $titleElementOffscreen.addClass(PointsTransferFilters.ClassName.OFFSCREEN);
  $titleElementOffscreen.text(content.title);

  // build title element attributes
  $titleElement.addClass(PointsTransferFilters.ClassName.MODAL_HEADER);
  $titleElement.text(content.title);

  // Close UI
  $closeButton.addClass('modal-close-button');
  $closeButton.attr('aria-label', 'Close Modal Window');
  $closeicon.addClass('icon icon_x');

  var $optionOuterWrap = this._buildModalButtons(content);

  // append the close button
  $closeButton.append($closeicon);

  // append the element together
  $modalWrap.append($closeButton);
  $modalWrap.append($titleElement);
  $modalWrap.append($modalContent);
  $modalWrap.append($optionOuterWrap);

  return $modalWrap;
};


/**
 * _buildModalButtons
 * Will build the modal u/filti for the filter modal.
 *
 * @param {Object} content
 * @return {jQuery} Elements
 *
 * @private
 */
PointsTransferFilters.prototype._buildModalButtons = function(content) {
  var $ui;

  // UI for accept / clear
  var $optionOuterWrap = $('<div>');

  var $leftButtonWrap = $('<div>');
  var $rightButtonWrap = $('<div>');

  var $acceptModalButton = $('<button>');
  var $clearModalButton = $('<button>');

  $leftButtonWrap.addClass(PointsTransferFilters.ClassName.MODAL_BUTTON_WRAP);
  $optionOuterWrap.addClass(PointsTransferFilters.ClassName.MODAL_OPTIONS_WRAP);

  $acceptModalButton.text(content.accept);
  $clearModalButton.text(content.clear);

  $acceptModalButton.attr('tabindex', 0);
  $clearModalButton.attr('tabindex', 0);

  $acceptModalButton.addClass('btn' + ' ' + PointsTransferFilters.ClassName.MODAL_BUTTON_ACCEPT);
  $clearModalButton.addClass('btn' + ' ' + PointsTransferFilters.ClassName.MODAL_BUTTON_CLEAR);

  $leftButtonWrap.append($clearModalButton);
  $rightButtonWrap.append($acceptModalButton);

  $optionOuterWrap.append($rightButtonWrap);

  $ui = $optionOuterWrap;

  return $ui;
};

/**
 * _handleAcceptFilters
 * Will handle the user selecting the accept button.
 * This essentially simply just closes the modal.
 *
 * @param {Object} evt
 * @private
 */
PointsTransferFilters.prototype._handleAcceptFilters = function(evt) {
  if (evt.keyCode === PointsTransferFilters.Keys.SPACE ||
      evt.keyCode === PointsTransferFilters.Keys.ENTER) {
    this._closeModal(true);
    return;
  }

  this._closeModal(true);
};

/**
 * _getRewards
 * Will silo the reward elements into their specific teirs so they can be
 * quickly shown and hidden based on filters.
 *
 * @private
 */
PointsTransferFilters.prototype._getRewards = function() {
  var obj = {};

  for (var i = 0; i < this._$rewardElements.length; i++) {
    var currReward = this._$rewardElements.eq(i);
    var currRewardType = currReward.data('reward-type').toLowerCase();

    if (obj[currRewardType]) {
      obj[currRewardType].push(currReward);
    } else {
      obj[currRewardType] = [];
      obj[currRewardType].push(currReward);
    }
  }

  return obj;
};

/**
 * _applyFilters
 * Will apply filters and hide or show filters based on which are applied
 * and not.
 *
 * @param {Object} data
 * @private
 */
PointsTransferFilters.prototype._applyFilters = function(data) {
  var hiddenRewards = [];
  var activeRewards = [];

  // are we adding or removing the filter?
  this._activeFilters = (data.value === 'true') ?
    this._addFilters(data) :
    this._removeFilters(data);

  // if there aren't any filters don't do any logic.
  if (this._activeFilters.length) {
    this._showRewards();
    this._unSelectCheckbox('All');
  } else {
    this._showAllRewards();
    $('.' + PointsTransferFilters.ClassName.FILTER + '[for="All"]').attr('aria-checked', 'true');
    $('.' + PointsTransferFilters.ClassName.FILTER + '[for="All"] .' + PointsTransferFilters.ClassName.CHECKBOX).addClass('is-checked');
  }

};

/**
 * _addFilters
 * Will add the filters from the main active filters
 * instance variable.
 *
 * @param {Object} data
 * @return {Array}
 */
PointsTransferFilters.prototype._addFilters = function(data) {
  var arr = this._activeFilters.slice(0);
  var index = arr.indexOf(data.reward);

  if (index < 0) {
    arr.push(data.reward);
  }

  return arr;
};

/**
 * _removeFilters
 * Will remove the filters from the main active filters
 * instance variable.
 *
 * @param {Object} data
 * @return {Array}
 */
PointsTransferFilters.prototype._removeFilters = function(data) {
  var arr = this._activeFilters.slice(0);
  var index = arr.indexOf(data.reward);

  if (index > -1) {
    arr.splice(index, 1);
  }

  return arr;
};

/**
 * _showAllRewards
 * Will display all rewards by removing all classes an adding
 * active classes to them.
 */
PointsTransferFilters.prototype._showAllRewards = function() {
  for (var i = 0; i < this._$rewardElements.length; i++ ) {
    var currRewardElement = this._$rewardElements.eq(i);

    this._showReward(currRewardElement);
  }
};

/**
 * _showRewards
 * Will show filter elements from the user's selected options.
 *
 * @private
 */
PointsTransferFilters.prototype._showRewards = function() {
  // loop through the active filters
  for (var i = 0; i < this._activeFilters.length; i++) {
    var activeFilter = this._activeFilters[i];
    var filterElements = this._rewards[activeFilter];

    if (filterElements) {
      // loop through each item in the silo'd filters obj
      for (var j = 0; j < filterElements.length; j++) {
        var currFilterElement = filterElements[j];
        this._showReward(currFilterElement);
      }
    }
  }

  this._hideInactiveFilters();
};

/**
 * _hideInactiveFilters
 * Will loop and gather all the current filters then run a loop
 * against active filters and hide all elements that remain
 * in the filters list.
 *
 * @private
 */
PointsTransferFilters.prototype._hideInactiveFilters = function() {
  if (!this._activeFilters.length) {
    return;
  }

  var inactiveFilters = [];
  var filters = this._activeFilters;
  var allindex = filters.indexOf('all');

  // populate the filters array with all possible filters.
  for(var keys in this._rewards) {
    if (keys) {
      inactiveFilters.push(keys);
    }
  }

  // we need to also splice out 'all' if it's a possibility
  // since its messing with the array length.
  if (allindex >= 0 && filters.length > 1) {
    filters.splice(allindex, 1);
  }

  // splice out the active filters.
  for (var i = 0; i < this._activeFilters.length; i++) {
    var filter = this._activeFilters[i];
    var index = inactiveFilters.indexOf(filter);

    inactiveFilters.splice(index, 1);
  }

  for (var j = 0; j < inactiveFilters.length; j++) {
    var activeFilter = inactiveFilters[j];
    var filterElements = this._rewards[activeFilter];

    // if there isnt an active filter don't break the application.
    if (!activeFilter) {
      return;
    }
    // loop through each item in the silo'd filters obj
    for (var k = 0; k < filterElements.length; k++) {
      var currFilterElement = filterElements[k];
      this._hideReward(currFilterElement);
    }
  }
};

/**
 * _showReward
 * Will display reward element and apply proper ARIA attributes.
 *
 * @param {jQuery} el
 * @private
 */
PointsTransferFilters.prototype._showReward = function(el) {
  el.removeClass(
    PointsTransferFilters.ClassName.HIDDEN);
  el.addClass(
    PointsTransferFilters.ClassName.ACTIVE);

  el.removeAttr('aria-hidden');
};

/**
 * _hideReward
 * Will hide reward element and apply proper ARIA attributes.
 *
 * @param {jQuery} el
 * @private
 */
PointsTransferFilters.prototype._hideReward = function(el) {
  el.removeClass(
    PointsTransferFilters.ClassName.ACTIVE);
  el.addClass(
    PointsTransferFilters.ClassName.HIDDEN);

  el.attr('aria-hidden', true);
};

/**
 * _closeModal
 * Will close the modal if it's open.
 *
 * @param {Boolean} triggerClick
 */
PointsTransferFilters.prototype._closeModal = function(triggerClick) {
  
  $('section, header, footer, #header-desktop').removeAttr('aria-hidden');
  $('.points-transfer-landing-body-filters-mobile-wrap').attr('aria-hidden', 'false');
  $('#modal-overlay').removeClass('opened');  

  if (this._modalOpen) {
    this._html.removeClass(PointsTransferFilters.ClassName.NO_SCROLL);
    this._$element.find('#modal-points-transfer').attr('style', 'display:none;');
    this._modalOpen = false;
  }

  if (triggerClick) {
    var $closeBtn = this._$element.find('.' + PointsTransferFilters.ClassName.CLOSE_BTN);
    $closeBtn.trigger('click');
  }

  $('.modal-points-transfer-launch').focus();

};

/**
 * _destroyMobileLayout
 * Will destroy the
 *
 * @private
 */
PointsTransferFilters.prototype._destroyMobileLayout = function() {
  if (this._modalOpen) {
    this._closeModal(true);
    this._modalDestroyedByViewportSwitch = true;
  }

  this._$element.empty();
  this._$element.removeClass('show');
  this._$element.append(this._filterInnerContent);
  this._initializeFilterBindings();
};




PointsTransferFilters.ClassName = {
  BASE: 'points-transfer-landing-body-filters-wrap',
  MAIN: 'oc-container',
  NO_SCROLL: 'no-scroll',
  FILTER: 'points-transfer-checkbox-wrap',
  FILTER_LIST: 'points-transfer-landing-filters-list',
  FILTER_LIST_ITEM: 'points-transfer-landing-item',
  CHECKBOX: 'points-transfer-checkbox',
  MODAL_CLASS: 'modal modal-overlay modal-points-transfer',
  MODAL_ID: 'modal-points-transfer',
  MODAL_HEADER: 'modal-header-title',
  MOBILE_TITLE: 'points-transfer-landing-mobile-content',
  MODAL_LAUNCH: 'modal-points-transfer-launch',
  MODAL_OPTIONS_WRAP: 'filter-btn-wrap level-one-buttons grid-container',
  MODAL_BUTTON_WRAP: 'btn-wrapper grid-100 mobile-grid-100',
  MODAL_BUTTON_ACCEPT: 'points-transfer-landing-accept',
  MODAL_BUTTON_CLEAR: 'points-transfer-landing-clear',
  REWARDS: 'points-transfer-landing-body-points-reward',
  CLOSE_BTN: 'modal-close-button',
  OFFSCREEN: 'screen-reader-offscreen',
  ACTIVE: 'is-active',
  HIDDEN:'is-hidden',
};

PointsTransferFilters.ARIA = {
  MODAL_LABEL: 'modal-points-transfer-title',
  MODAL_DESCRIBE:'modal-points-transfer-description',
};

PointsTransferFilters.Events = {
  RENDERED: 'filterTabs::rendered',
};

PointsTransferFilters.Keys = {
  ENTER: 13,
  SPACE: 32,
  LEFT: 37,
  RIGHT: 39,
};

function _createPointsTransferFilters() {
  _toArray($('.' + PointsTransferFilters.ClassName.BASE)).forEach(function(el) {
    return new PointsTransferFilters(el);
  });
}

PointsTransferFilters.initializeAll = function() {
  _createPointsTransferFilters();
};


citiShare.pointsTransferFilters = (function(){

  PointsTransferFilters.initializeAll();

  return {
    initAll: PointsTransferFilters.initializeAll,
    Events: PointsTransferFilters.Events,
    ClassName: PointsTransferFilters.ClassName
  };

})();

/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

citiShare.transfer = (function() {
    'use strict';

    var config = {
        allowableKeys: [48,49,50,51,52,53,54,55,56,57,8,9,0], // numbers 0-9, del, and tab
        pointsTransferIncrement: 1000,
        pointsTransferMin: 1000,
        thankyouPointsToTransfer: 1000,
        brandPointsToGain: 0,
        thankyouPoints: 0,
        pointTransferRate: 1.5,
        grCountryArray: ['australia', 'bahrain', 'hong kong', 'philippines', 'thailand', 'singapore', 'mexico', 'uae', 'malaysia'],
        $termsConditionsCheckboxError: $('.points-transfer-detail-terms-and-conditions-checkbox-error-message'),
        $showMore: $('#points-transfer-detail-showmore'),
        $heroCopy: $('#promotion-hero-copy'),
        $pointsToTransfer: $('#points-to-transfer'),
        $brandPoints: $('#brand-points'),
        $brandPointsMessage: $('#brand-points-message'),
        $pointsTransferDetailContainer: $('.points-transfer-detail-container'),
        $form: $('#points-transfer-form'),
        $termsAndConditionsCheckbox: $('#terms-and-conditions-checkbox'),
        $transferContinueButton: $('#points-transfer-detail-form-continue-button'),
        $pointsTransferMessage: $('#points-to-transfer-message'),
        $pointsTransferError: $('#points-to-transfer-error'),
        $errorMessage: $('.points-transfer-detail-page-error-message'),
        $pointsTransferDetailContent: $('.points-transfer-detail-container-content'),
        $pointsTransferDetailErrorOverlay: $('.points-transfer-detail-full-page-error-overlay'),
        $pointsTransferDetailFullPageError: $('.points-transfer-detail-full-page-error'),
        formData: {
            memberName: '',
            memberNumber: '',
            memberRememberNumber: false,
            memberPassword: '',
            memberPointsToTransfer: 0
        },
        minHeroCopyLength: 164,
        truncatedCopy: '',
        setSeeMore: false
    };

    /*
    * Toggle the full page error state.
    */
    function toggleFullPageError() {

        var dataError = config.$pointsTransferDetailContent.data('full-page-error');
        var hasError = false;

        if (typeof dataError !== 'undefined' && dataError.length !== 0) {
            try {
                hasError = JSON.parse(dataError);
            }
            catch(err) {
                console.warn('Couldn\'t parse `data-full-page-error` as a boolean, fallback to comparing with the string directly.');
                hasError = dataError;
            }
        }

        if(hasError || hasError === 'true') {

            config.$pointsTransferDetailErrorOverlay.addClass('show');
            config.$pointsTransferDetailFullPageError.addClass('error');

            config.$pointsTransferDetailContent.attr('aria-hidden', 'true');

            // needed because some slider elements are created dynamically after this function is called
            window.setTimeout(function() {
                config.$form.find('*').attr('aria-hidden', 'true');
                config.$form.find('*').attr('aria-disabled', 'true');
                config.$form.find('*').attr('tabindex', '-1');
            }, 100);

        }

    }

    /**
     * Toggle Accordion : Terms and Conditions
     */
    function toggleAccordion() {
        var $toggleAccordionEl = $('#expand-terms-and-conditions'),
            $termsLabel = $('#terms-and-conditions-accordian-label');

        $toggleAccordionEl.on('click', function(e) {
            var $this = $(this),
                $parent = $this.parent(),
                $errorMessage = $parent.next();

            e.stopPropagation();
            e.preventDefault();
            if ($errorMessage.hasClass('error')) {
                $errorMessage.removeClass('error');
            }

            $parent.toggleClass('open');

            if ($parent.hasClass('open')) {
                $this.attr('aria-expanded', true);
                $('#terms-and-conditions').attr('aria-hidden', false);
                $('#terms-and-conditions [tabindex]').each(function(index, el) {
                    $(el).attr('tabindex', '0');
                });
                $('.points-transfer-detail-form-continue-container').removeClass('show-tooltip');
            } else {
                $this.attr('aria-expanded', false);
                $('#terms-and-conditions').attr('aria-hidden', true);
                $('#terms-and-conditions [tabindex]').each(function(index, el) {
                    $(el).attr('tabindex', '-1');
                });

                if (config.$termsAndConditionsCheckbox[0].checked === false) {
                    $('.points-transfer-detail-form-continue-container').addClass('show-tooltip');
                }

                if (config.$termsAndConditionsCheckbox.hasClass('error')) {
                    config.$termsAndConditionsCheckbox.removeClass('error');
                    config.$termsConditionsCheckboxError.removeClass('error');
                }

                if ($parent.hasClass('error')) {
                    $errorMessage.addClass('error');
                }
            }

        });

        $termsLabel.on('click', function() {
            $toggleAccordionEl.trigger('click');
        });
    }

    /**
     * Get user information for the specified step
     * @param {string} step : Points Transfer step (transfer, review or confirmation)
     *
     */
    function getStepData(step) {

        var countryLowercase = citiConfig.country.toLowerCase();
        var jsonDataUrl = citiConfig.endPointHost + citiConfig.pointsTransferDetailEndPointPath + step + '-step';
        var isCountryGR = config.grCountryArray.indexOf(countryLowercase) >= 0;

        if(isCountryGR) {
            jsonDataUrl = jsonDataUrl + '-gr';
        }

        $.ajax({
            url: jsonDataUrl + '.json',
            type: 'get',
            dataType: 'json'
        })
        .done(function(data) {
            // TODO: load data into corresponding elements
            switch (step) {
                case 'confirmation':
                    setConfirmationData(data, isCountryGR);
                    break;
                case 'review':
                    setReviewData(data);
                    break;
                default:
                    setTransferData(data);
                    break;
            }
        })
        .fail(function(error) {
            // TODO: server error in retrieving user info?
            console.log('error: ');
            console.log(error);
        });
    }

    /**
     * Take provided data and set it to the transfer page
     *
     *
     */
    function setTransferData(data) {

        var nameInput = $('#name');

        if ($('.custom-points').length && data.points) {
            config.pointsTransferIncrement = parseInt(data.points.increment, 10);
            config.pointTransferRate = parseInt(data.points.transferRate, 10);
            config.pointsTransferMin = parseInt(data.points.min, 10);
            config.thankyouPointsToTransfer = config.pointsTransferMin;
        }

        nameInput.val(data.user.name);
        nameInput.addClass(data.class || "");

        $('#points-left-after-transfer').val(data.user.thankyouPoints - config.thankyouPointsToTransfer);

        config.thankyouPoints = data.user.thankyouPoints;
        config.brandPointsToGain = parseInt(config.thankyouPointsToTransfer, 10) * config.pointTransferRate;

        config.$pointsTransferMessage.find('span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement));
        config.$brandPointsMessage.find('span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement * config.pointTransferRate));
        config.$brandPoints.val(citiShare.util.convertToCommaFormat(config.brandPointsToGain));
        citiShare.slider.init('points-transfer-slider', config.pointsTransferMin, config.thankyouPoints, config.thankyouPointsToTransfer, config.pointsTransferIncrement, 'points-transfer-detail-slider-minimum', 'points-transfer-detail-slider-maximum', 'points-transfer-form');
    }

    /**
     * Take provided data and set it to the review page
     *
     *
     */
    function setReviewData(data) {

        config.thankyouPoints = data.user.thankyouPoints;
        config.thankyouPointsToTransfer = data.user.thankyouPointsToTransfer;

        config.$pointsToTransfer.val(citiShare.util.convertToCommaFormat(config.thankyouPointsToTransfer));

        if(config.$pointsToTransfer.val() !== undefined) {
            var pointsToTransferVal = parseInt(config.$pointsToTransfer.val().split(',').join(''));
            var brandPointsFormatted = citiShare.util.convertToCommaFormat(pointsToTransferVal * config.pointTransferRate);
            config.$brandPoints.val(brandPointsFormatted);
        }

        $('#points-left-after-transfer').val(citiShare.util.convertToCommaFormat(config.thankyouPoints - config.thankyouPointsToTransfer));

        $('#points-transfer-member-name').text(data.user.name);
        $('#points-transfer-member-number').text(data.user.memberNumber);
    }

    /**
     * Take provided data and set it to the confirmation page
     *
     *
     */
    function setConfirmationData(data, isCountryGR) {

        setReviewData(data);

        $('#points-transfer-confirmation-number').text(data.user.confirmationNumber);

        /*------- setup print page ------*/
        if(isCountryGR) {
            $('#points-to-transfer-print').text('XXX,XXX');
            $('#brand-points-print').text('XXX,XXX');
            $('#points-left-after-transfer-print').text('XXX,XXX');
        }
        else {
            $('#points-to-transfer-print').text(citiShare.util.convertToCommaFormat(config.thankyouPointsToTransfer));
            $('#brand-points-print').text(0);
            $('#points-left-after-transfer-print').text(citiShare.util.convertToCommaFormat(config.thankyouPoints - config.thankyouPointsToTransfer));
        }

        $('#points-transfer-confirmation-number-print').text(data.user.print.confirmationNumber || data.user.confirmationNumber);
        $('#points-transfer-member-name-print').text(data.user.print.name || data.user.name);
        $('#points-transfer-member-number-print').text(data.user.print.memberNumber || data.user.memberNumber);

        $('#points-transfer-thankyou-account-name-print').text(data.user.thankYou.name);
        $('#points-transfer-thankyou-account-number-print').text(data.user.thankYou.accountNumber);
    }

    /*----- use template classname to get the current PTDP step -----*/
    function getPointsTransferStep() {
        if (config.$pointsTransferDetailContainer.hasClass('points-transfer-detail-transfer')) {
            return 'transfer';
        } else if (config.$pointsTransferDetailContainer.hasClass('points-transfer-detail-review')) {
            return 'review';
        } else if (config.$pointsTransferDetailContainer.hasClass('points-transfer-detail-confirmation')) {
            return 'confirmation';
        }
    }

    /*----- calculate the brand and thankyou points -----*/
    function calculatePointsTransfered(isBrandField) {
        var brandPointsLive = $('#brand-points-live'),
            pointsLeftAfterTransferLive =  $('#points-left-after-transfer-live'),
            pointsToTransferLive = $('#points-to-transfer-live'),
            convertedBrandPointsToGain = 0,
            convertedPointsLeft = 0;


        if (isBrandField) {
            // calculate values from brandpoints
            // do *not* use parseInt() on the pointTransferRate...
            config.thankyouPointsToTransfer = Math.floor((1 / config.pointTransferRate) * parseInt(config.brandPointsToGain, 10));
            config.$pointsToTransfer.val(citiShare.util.convertToCommaFormat(config.thankyouPointsToTransfer));
        } else {
            config.brandPointsToGain = config.pointTransferRate * parseInt(config.thankyouPointsToTransfer, 10);
            convertedBrandPointsToGain = citiShare.util.convertToCommaFormat(parseInt(config.brandPointsToGain, 10));
            config.$brandPoints.val(convertedBrandPointsToGain);
        }

        convertedBrandPointsToGain = citiShare.util.convertToCommaFormat(config.brandPointsToGain);
        convertedPointsLeft = citiShare.util.convertToCommaFormat(config.thankyouPoints - config.thankyouPointsToTransfer);

        pointsToTransferLive.html(pointsToTransferLive.data('label') + ' ' + config.thankyouPointsToTransfer);
        brandPointsLive.html(brandPointsLive.data('label') + ' ' + convertedBrandPointsToGain);
        pointsLeftAfterTransferLive.html(pointsLeftAfterTransferLive.data('label') + ' ' + convertedPointsLeft);

        $('#points-left-after-transfer').val(convertedPointsLeft);
    }

    function toggleErrMsg($el, $elErr, showErr) {
        if (showErr) {
            $el.addClass('error');
            $elErr.addClass('error');
            $elErr.attr('aria-hidden', false);
        } else {
            $el.removeClass('error');
            $elErr.removeClass('error');
            $elErr.attr('aria-hidden', true);
        }
    }

    function checkFormInputs() {

        var email = $('#brand-member-email');
        var emailError = $('.brand-member-email-error');
        var number = $('#brand-member-number');
        var numberError = $('.brand-member-number-error');
        var confirmNumber = $('#confirm-brand-member-number');
        var confirmNumberError = $('.confirm-brand-member-number-error');
        var password = $('#brand-member-password');
        var passwordError = $('.brand-member-password-error');
        var rememberNumber = $('#remember-brand-member-number');
        var rememberNumberError = $('.remember-brand-member-number-error');
        var nbLoyaltyProgram = rememberNumber.data('nb-loyalty-program');
        var maxLoyaltyProgram = rememberNumber.data('max-loyalty-program');        

        if(email.length && email.val().trim().length === 0 || !citiShare.formValidation.validateInput(email.val(),'email')) {
            toggleErrMsg(email, emailError, true);
        } else {
            toggleErrMsg(email, emailError, false);
        }

        if (number.length && number.val().trim().length === 0) {
            toggleErrMsg(number, numberError, true);
        } else {
            toggleErrMsg(number, numberError, false);
        }

        if (confirmNumber.length && confirmNumber.val().trim() !== number.val().trim() || confirmNumber.val().trim().length === 0) {
            toggleErrMsg(confirmNumber, confirmNumberError, true);
        } else {
            toggleErrMsg(confirmNumber, confirmNumberError, false);
        }

        if (password.length && password.val().trim().length === 0) {
            toggleErrMsg(password, passwordError, true);
        } else {
            toggleErrMsg(password, passwordError, false);
        }

        if(rememberNumber.length && rememberNumber.is(':checked') && nbLoyaltyProgram >= maxLoyaltyProgram) {
            toggleErrMsg(rememberNumber, rememberNumberError, true);
        } else {
            toggleErrMsg(rememberNumber, rememberNumberError, false);
        }
    }

    function bindFormContinueButton() {
        config.$transferContinueButton.on('click', function() {
            var $accordionContainer = $('.points-transfer-detail-terms-and-conditions-accordian-container'),
                numberOfErrors = $('.points-transfer-detail-form-error.error').length;

            if (!$accordionContainer.hasClass('open') && !$('#terms-and-conditions-checkbox').is(':checked')) {
                $accordionContainer.addClass('error');
                $('#terms-and-conditions-checkbox').addClass('error');
                $('.points-transfer-detail-terms-and-conditions-error-message').addClass('error');
            } else if (!$('#terms-and-conditions-checkbox').is(':checked')) {
                $accordionContainer.addClass('error');
                $('#terms-and-conditions-checkbox').addClass('error');
                config.$termsConditionsCheckboxError.addClass('error');
            }
            checkFormInputs();
            numberOfErrors = $('.points-transfer-detail-form-error.error').length;
            if (numberOfErrors === 0) {
                postUserInput();
            } else {
                $('#number-of-errors').text(numberOfErrors);

                if (numberOfErrors === 1) {
                    $('#plural-errors').text('');
                } else if (numberOfErrors > 1) {
                    $('#plural-errors').text('s');
                }

                config.$errorMessage.addClass('error');
                config.$errorMessage.attr('tabindex', '-1');
                config.$errorMessage.attr('aria-live','assertive');
                config.$errorMessage.attr('aria-hidden','false');
                
                $('html,body').animate({
                    scrollTop: config.$errorMessage.offset().top - 50
                });
                
                config.$errorMessage.focus();
            }
        });
    }

    function postUserInput() {
        config.$errorMessage.removeClass('error');
        config.$errorMessage.attr('tabindex', '-1');

        config.formData.memberName = $('#name').val();
        config.formData.memberNumber = $('#brand-member-number').val();
        config.formData.memberRememberNumber = $('#remember-brand-member-number').val();
        config.formData.memberPointsToTransfer = config.thankyouPointsToTransfer;
        config.formData.memberPassword = $('#brand-member-password').val();

        // TODO: use POST type and correct the url
        $.ajax({
            url: citiConfig.endPointHost + citiConfig.pointsTransferDetailEndPointPath + 'review-step.json',
            type: 'get',
            dataType: 'json'
        })
        .done(function() {
            window.location.href = window.location.origin + window.location.pathname.split('/').slice(0,-1).join('/') + '/points-transfer-detail-ty-review.html';
        })
        .fail(function(error) {
            console.log('error: ');
            console.log(error);
        });
    }

    function bindTransitionButtons() {
        $('#points-transfer-detail-back').on('click', function(e) {
            window.location.href = window.location.origin + window.location.pathname.split('/').slice(0,-1).join('/') + '/points-transfer-detail-ty.html';
            e.preventDefault();
        });

        $('#points-transfer-detail-cancel-button').on('click', function(e) {
            citiShare.AccessibleModal({ modal: $('#modal-pointstransfer-review-cancel') }).show();
            e.preventDefault();
        });

        $('#points-transfer-detail-confirm').on('click', function() {
            window.location.href = window.location.origin + window.location.pathname.split('/').slice(0,-1).join('/') + '/points-transfer-detail-ty-confirmation.html';
        });
    }

    function bindTermsConditionsCheckbox() {
        $('#terms-and-conditions-checkbox').on('click', function() {
            if ($(this).hasClass('error')) {
                config.$termsConditionsCheckboxError.removeClass('error');
                $(this).removeClass('error');
                $(this).closest('.error').removeClass('error');
            }

            if ($(this).is(':checked')) {
                $('.points-transfer-detail-form-continue-container').removeClass('show-tooltip');
                $('#continue-button-tooltip').attr('aria-hidden', true);
                $('#continue-button-tooltip').attr('role', '');
                config.$transferContinueButton.attr('aria-describedby', '');
            } else {
                $('.points-transfer-detail-form-continue-container').addClass('show-tooltip');
                $('#continue-button-tooltip').attr('aria-hidden', false);
                $('#continue-button-tooltip').attr('role', 'tooltip');
                config.$transferContinueButton.attr('aria-describedby', 'continue-button-tooltip');
            }
        });
    }

    function bindBrandPointsInput() {
        config.$brandPoints.on('focusout keyup', function(e) {
            var $this = $(this),
                data,
                $thisVal = $this.val().split(',').join(''),
                inputVal = '',
                inputRemainder;

            if (e.which !== 13 && e.which !== 0 && e.which !== undefined) {
                return;
            }

            if (!isNaN($thisVal)) {
                // Use minimum value when user enters value less than the minimum
                if (parseInt($thisVal, 10) < (parseInt(config.pointsTransferMin, 10) * config.pointTransferRate) || $thisVal.length === 0) {
                    config.brandPointsToGain = config.pointTransferRate * parseInt(config.pointsTransferMin, 10);
                    inputVal = parseInt(config.brandPointsToGain, 10);
                    $this.val(citiShare.util.convertToCommaFormat(inputVal));
                    config.$brandPointsMessage.show();
                    config.$brandPointsMessage.attr('aria-hidden', false);
                    data = $('#brand-points-message').data('message-up');
                    $('#brand-points-message').html(data);
                    $('#brand-points-message span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement * config.pointTransferRate));
                    config.$pointsTransferMessage.html('');
                // Use maximum value when user enters value greater than the maximum
                } else if (parseInt($thisVal, 10) > (config.pointTransferRate * config.thankyouPoints)) {
                    config.brandPointsToGain = config.pointTransferRate * parseInt(config.thankyouPoints, 10);
                    inputVal = parseInt(config.brandPointsToGain, 10);
                    $this.val(citiShare.util.convertToCommaFormat(inputVal));
                    config.$brandPointsMessage.show();
                    config.$brandPointsMessage.attr('aria-hidden', false);
                    data = $('#brand-points-message').data('message-down');
                    $('#brand-points-message').html(data);
                    $('#brand-points-message span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement * config.pointTransferRate));
                    config.$pointsTransferMessage.html('');
                } else {
                    inputRemainder = $thisVal % parseInt(config.pointsTransferIncrement * config.pointTransferRate, 10);
                    if (inputRemainder === 0) {
                        config.$brandPointsMessage.hide();
                        config.$brandPointsMessage.attr('aria-hidden', true);
                        config.brandPointsToGain = $thisVal;
                    } else {
                        config.$brandPointsMessage.show();
                        config.$brandPointsMessage.attr('aria-hidden', false);
                        config.brandPointsToGain = $thisVal - inputRemainder;
                        //area where it needs to 
                        data = $('#brand-points-message').data('message-down');
                        $('#brand-points-message').html(data);
                        $('#brand-points-message span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement * config.pointTransferRate));
                        config.$pointsTransferMessage.html('');
                    }
                    inputVal = parseInt(config.brandPointsToGain, 10);
                    $this.val(citiShare.util.convertToCommaFormat(inputVal));
                }

                calculatePointsTransfered(true);
                $('#points-transfer-detail-slider').trigger('sliderInputChange', [config.thankyouPointsToTransfer, $('#points-transfer-slider_handle')]);
            }
        });

        setInputConstraints(config.$brandPoints);
    }

    function bindSliderInput() {
        config.$pointsToTransfer.on('focusout keyup', function(e) {
            var $this = $(this),
                data,
                $thisVal = $this.val().split(',').join(''),
                inputRemainder;

            if (e.which !== 13 && e.which !== 0 && e.which !== undefined) {
                return;
            }

            if (!isNaN($thisVal)) {
                if (parseInt(config.thankyouPoints.split(',').join(''), 10) >= $thisVal) {
                    inputRemainder = $thisVal % config.pointsTransferIncrement;

                    if (inputRemainder === 0) {
                        config.$pointsTransferMessage.html('');
                        config.$pointsTransferMessage.attr('aria-hidden', true);
                        config.thankyouPointsToTransfer = $thisVal;
                    } else {
                        //config.$pointsTransferMessage.show();
                        config.$pointsTransferMessage.attr('aria-hidden', false);
                        config.thankyouPointsToTransfer = $thisVal - inputRemainder;
                        data = $('#points-to-transfer-message').data('message-down');
                        $('#points-to-transfer-message').html(data);
                        $('#points-to-transfer-message span:nth-child(1)').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement));
                        $('#points-to-transfer-message span:nth-child(2)').show();
                        config.$brandPointsMessage.html('');
                    }

                    $this.val(config.thankyouPointsToTransfer);
                } else {
                    $this.val(config.thankyouPoints);
                    config.thankyouPointsToTransfer = config.thankyouPoints;
                    data = $('#points-to-transfer-message').data('message-down');
                    $('#points-to-transfer-message').html(data);
                    $('#points-to-transfer-message span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement));
                    config.$brandPointsMessage.html('');
                }

                if ($thisVal < config.pointsTransferMin) {
                    config.$pointsTransferMessage.attr('aria-hidden', false);
                    config.thankyouPointsToTransfer = config.pointsTransferMin;
                    data = $('#points-to-transfer-message').data('message-up');
                    $('#points-to-transfer-message').html(data);
                    $('#points-to-transfer-message span').text(citiShare.util.convertToCommaFormat(config.pointsTransferIncrement));
                    config.$brandPointsMessage.html('');
                }

                calculatePointsTransfered();
                $('#points-transfer-detail-slider').trigger('sliderInputChange', [config.thankyouPointsToTransfer, $('#points-transfer-slider_handle')]);
            } else {
                $this.addClass('not-a-number-error error');
            }
        });

        setInputConstraints(config.$pointsToTransfer);
    }

    function setInputConstraints($el) {
        $el.on('keypress', function(e) {
            if (config.allowableKeys.indexOf(e.which) === -1 || $(this).val().length > 49) {
                e.preventDefault();
                return;
            }
        }).on('keyup change', function() {
            var $this = $(this),
                val = $this.val();

            val = val.split(',').join('');
            $this.val(citiShare.util.convertToCommaFormat(val));
        }).on('paste', function(e) {
            e.preventDefault();
        });
    }

    function bindSeeMoreBrands() {
        $('#see-more-brands-link').on('click', function(e) {
            var $this = $(this),
                $brandsContainer = $this.next();

            if ($brandsContainer.hasClass('open')) {
                $this.find('span').html('');
                $this.find('span').text('+');
                $brandsContainer.removeClass('open');
            } else {
                $this.find('span').text('');
                $this.find('span').html('&mdash;');
                $brandsContainer.addClass('open');
            }

            e.preventDefault();
        });
    }

    function bindHeroSeeMore() {
        var tabletWidth = 768,
            isMobileWidth = false;

        $(window).on('resize', function() {
            citiShare.util.throttle(function() {
                var windowWidth = window.innerWidth || $(window).width();

                if (windowWidth < tabletWidth) {
                    isMobileWidth = true;
                } else {
                    isMobileWidth = false;
                }

                if (isMobileWidth && !config.setSeeMore) {
                    truncate();
                    config.$showMore.show();
                    config.setSeeMore = true;
                } else if (!isMobileWidth && config.setSeeMore) {
                    config.$showMore.hide();
                    config.setSeeMore = false;

                    if (!config.$showMore.hasClass('open')) {
                        unTruncate();
                    } else {
                        config.$showMore.removeClass('open');
                        config.$showMore.html(config.$showMore.data('more'));
                    }
                }
                
                if(isMobileWidth){
                    $('.points-transfer-detail-form-continue').removeAttr('aria-describedby');
                }else{
                    $('.points-transfer-detail-form-continue').attr('aria-describedby','continue-button-tooltip');
                }
                
            }(), 500);
        }).trigger('resize');
    }

    function bindEmailError(){

        var email = $('#brand-member-email');
        var emailError = $('.brand-member-email-error');
        
        $(email).on('blur',function(){
            if(email.length && email.val().trim().length === 0 || !citiShare.formValidation.validateInput(email.val(),'email')) {
                toggleErrMsg(email, emailError, true);
            } else {
                toggleErrMsg(email, emailError, false);
            }
        });
    }

    function bindShowMoreButton() {
        var moreCopy = config.$showMore.data('more'),
            lessCopy = config.$showMore.data('less');

        config.$showMore.on('click', function(e) {
            var $this = $(this);

            e.preventDefault();
            e.stopPropagation();
            if ($this.hasClass('open')) {
                $this.removeClass('open');
                $this.html(moreCopy);
                truncate();
            } else {
                $this.addClass('open');
                $this.html(lessCopy);
                unTruncate();
            }
        });
    }

    function truncate() {
        if (config.minHeroCopyLength !== null && config.$heroCopy.html() !== undefined) {
            config.truncatedCopy = config.$heroCopy.html().substring(config.minHeroCopyLength);
            config.$heroCopy.html(config.$heroCopy.html().substring(0, config.minHeroCopyLength) + '...');
        }
    }

    function unTruncate() {
        if (config.$heroCopy.length) {
            config.$heroCopy.html(config.$heroCopy.html().slice(0,-3) + config.truncatedCopy);
        }
    }

    bindShowMoreButton();

    function _init() {
        var pointsTransferStep = getPointsTransferStep();

        if (pointsTransferStep !== undefined) {
            getStepData(pointsTransferStep);

            toggleAccordion();

            bindTransitionButtons();

            config.$form.on('sliderValue', function(e, param) {
                config.$pointsToTransfer.val(param).trigger('change');
                config.thankyouPointsToTransfer = param;
            });

            bindFormContinueButton();

            bindTermsConditionsCheckbox();

            config.$pointsToTransfer.on('change', function(e) {
                config.thankyouPointsToTransfer = parseInt(e.target.value.split(',').join(''), 10);
                calculatePointsTransfered();
                $(this).removeClass('error');
            });

            bindSliderInput();
            bindBrandPointsInput();
        }

        bindSeeMoreBrands();
        bindHeroSeeMore();
        toggleFullPageError();
        bindEmailError();

        // Check if there is a minimum points error for this user.
        // If so, prevent tabbing and display overlay with the message
        if ($('.points-transfer-detail-minimum-points-error').hasClass('show-minimum-points-error')) {
            config.$pointsTransferDetailContent.attr('tabindex', 0);
            $('#minimum-points-error-overlay').show();
            $('.points-transfer-detail-minimum-points-error').show();
        }
    }

    return {
        config: config,
        init: _init
    };
})();


citiShare.polyfills = (function() {
    "use strict";

    function css3Columns(){

    	// columnize the all brands variation of the category landing page
    	$('.category-brand-wrapper').addClass('dontsplit');
        
        if ($(window).width() < 480) {
            $('.category-brands-wrapper').columnize({
                width: $('.oc-content').width() / 1, 
                buildOnce: true,
                target: $('.no-css-columns-wrapper')
            });
        } else if ($(window).width() < 755) {
            $('.category-brands-wrapper').columnize({
                width: $('.oc-content').width() / 2, 
                buildOnce: true,
                target: $('.no-css-columns-wrapper')
            });
        } else if ($(window).width() < 960) {
            $('.category-brands-wrapper').columnize({
                width: $('.oc-content').width() / 3, 
                buildOnce: true,
                target: $('.no-css-columns-wrapper')
            });
        } else {
            $('.category-brands-wrapper').columnize({
                width: $('.oc-content').width() / 4, 
                buildOnce: true,
                target: $('.no-css-columns-wrapper')
            });
        }
        

    }


    function init() {
      if (!Modernizr.csscolumns) {
        if(typeof $.throttle === 'function') {
          $(window).resize($.throttle(500, css3Columns));
        }
      }
    }
    init();
    return {};
})();

/*
 *
 * This function is used to initialize and handle everything related
 * to the My Profile page
 *
 * Depends on
 *  - Having a DIV with a class of `my-profile`
 *  - jQuery
 *  - citiShare.AccessibleModal
 *
 */
citiShare.profile = (function() {

  "use strict";

  var config = {
    $editLinks: $('.profile-edit-link'),
    $cancelLinks: $('.my-profile-cancel-link'),
    contactInformationLists: [],
    ajaxDeleteSelector: '.ajax-delete',

    formGroupErrorSelector: '.form-group-error',

    editLinkSelector: '.profile-edit-link',

    moduleSelector: '.module',
    staticContainerSelector: '.module-static',
    editableContainerSelector: '.module-editable',
    moduleMessagesSelector: '.my-profile-messages',
    cancelEditsModalSelector: '#modal-confirm-cancel',

    $accountSelectionForm: $('#my-profile-account-selection-form'),
    accountSelectionModalSelector: '#modal-account-selection-confirm',
    
    $contactInformationForm: $('#my-profile-contact-information-form'),
    $contactInformationEmailInput: $('#eMail, #eMail-confirm'),
    $contactInformationPhonesInput: $('#homePhone, #businessPhone, #mobilePhone'),

    $securityInformationForm: $('#my-profile-security-information-form'),
    $emailSettingsForm: $('#my-profile-email-settings-form'),
    $legalNoticesForm: $('#my-profile-legal-notices-form'),

    $securityInformationMaskedInput: $('#answer, #answer-confirm'),
    $securityInformationUsername: $('#userName'),

    $loyaltyProgramsForm: $('#my-profile-loyalty-programs-form'),
    $loyaltyProgramsDoneButton: $('.my-profile-loyalty-programs .my-profile-save-link'),
    $loyaltyProgramsRemoveButton: $('.my-profile-loyalty-programs .my-profile-loyalty-programs-remove-link'),
    $loyaltyProgramsNumberInput: $('#loyalty-programs-number'),

    radioButtonGroupSelector: '.my-profile-radio-button-group'
  };



  /*
   * Turn On editable mode on a section
   */
  var editSection = function editSection() {

    var $clickedLink = $(this);
    var $module = $clickedLink.parents(config.moduleSelector);

    // Reinsert data for contact information.
    if($module.hasClass('my-profile-contact-information')) {
      var $inputs = $module.find('input');
      var $selects = $module.find('select');

      $inputs.each(function() {
        $(this).val($(this).attr('value'));
      });

      $selects.each(function() {
        var selected = $(this).data('value');
        $(this).val(selected);
        $(this).selectmenu('refresh');
      });
    }

    _toggleSection($module, true);
  };



  /*
   * Submit account selection form
   */
  var onSubmitAccountSelection = function onSubmitAccountSelection() {

    var $error = $(this).parents('.module').find(config.formGroupErrorSelector);
    var selection = $(this).serializeArray();

    if(selection.length === 0 || selection[0].value === '') {
      $error.css('display', 'block');
      $error.text($error.data('text'));
    }
    else {

      var redirect = selection[0].value;

      $error.css('display', 'none');
      $error.text('');

      window.location.href = redirect;
    }
  };

  /*
   * Submit Contact Information form
   */
  var onSubmitContactInformation = function onSubmitContactInformation(e) {

    var $form = $(this);
    var formElements = _getContextFormElements($form);
    var formData = _parseInputs(formElements.$allInputs);
    
    // hide previous errors
    _hideErrors(formElements);

    var invalidData = _validateFormData(formData);

    var email = formData.eMail;
    var confirmEmail = formData['eMail-confirm'];

    invalidData = _validateFieldsAreTheSame(email, confirmEmail, invalidData);

    if(invalidData.numberOfErrors > 0) {
      _showErrors(formElements.$globalMessage, invalidData);
      e.preventDefault();
      return false;
    }

    // if everything is valid submit the form
    $(this).trigger('form:post', [_ajaxDone.bind(this, formElements)]);
  };

  /*
   * Submit Security Information form
   */
  var onSubmitSecurityInformation = function onSubmitSecurityInformation() {

    var formElements = _getContextFormElements($(this));
    var formData = _parseInputs(formElements.$allInputs);

    // hide previous errors
    _hideErrors(formElements);

    var invalidData = _validateFormData(formData);

    var password = formData.password;
    var retypePassword = formData['password-confirm'];
    var answer = formData.answer;
    var retypeAnswer = formData['answer-confirm'];

    invalidData = _validateFieldsAreTheSame(password, retypePassword, invalidData);
    invalidData = _validateFieldsAreTheSame(answer, retypeAnswer, invalidData);

    if(invalidData.numberOfErrors > 0) {
      _showErrors(formElements.$globalMessage, invalidData);
      return false;
    }

    // if everything is valid submit the form
    $(this).trigger('form:post', [_ajaxDone.bind(this, formElements)]);
  };

  /*
   * Submit Security Information form
   */
  var onSubmitRadioButtonForm = function onSubmitRadioButtonForm() {

    var formElements = _getContextFormElements($(this));
    var formData = $(this).serializeArray();

    if(formData.length === 0) {
      console.log('must select a radio button');
      return false;
    }

    // if everything is valid submit the form
    $(this).trigger('form:post', [_ajaxDone.bind(this, formElements)]);
  };

  /*
   * Submit Loyalty Programs form
   */
  var onSubmitLoyaltyProgramsForm = function onSubmitLoyaltyProgramsForm() {

    var formElements = _getContextFormElements($(this));
    var formData = _parseInputs(formElements.$allInputs);

    // hide previous errors
    _hideErrors(formElements);

    var invalidData = _validateFormData(formData);

    if(invalidData.numberOfErrors > 0) {
      _showErrors(formElements.$globalMessage, invalidData);
      return false;
    }

    $(this).trigger('form:post', [_ajaxDone.bind(this, formElements)]);

    // empty the form
    $(this)[0].reset();
    $(this).find('select')[0].selectedIndex = 0;
    $(this).find('select').selectmenu('refresh');
    $(this).find('input').attr('data-val', '');
    
    window.setTimeout(function() {
      $('.ajax-delete').on('click', onRemoveLoyaltyProgram);
    }, 100);
  };

  /*
   * On remove loyalty programs
   */
  var onRemoveLoyaltyProgram = function onRemoveLoyaltyProgram(e) {

    // prevent from weird redirection to ajax html
    if(e && e.preventDefault) {
      e.preventDefault();
    }

    var $form = $(this).parents('form');
    var formElements = _getContextFormElements($form);
    _hideErrors(formElements);

    $(this).trigger('form:delete', [_ajaxDone.bind(this, formElements)]);
  };

  /*
   * On click for the save CTA in loyalty programs
   */
  var onDoneLoyaltyProgram = function onDoneLoyaltyProgram() {

    var $module = $(this).parents('.module');

    _toggleSection($module, false);
    _showGlobalMessage($module.find(config.moduleMessagesSelector), '[Confirmation Message Goes Here]', 'confirmation');
  };

  /*
   * Global on get success event.
   */
  var onGetSuccess = function onGetSuccess() {

    // Loyalty Programs
    var $loyaltyModule = $('.my-profile-loyalty-programs');

    if($loyaltyModule.length > 0) {
      var $editLink = $loyaltyModule.find('.profile-edit-link');
      var $loyaltyProgramsRows = $loyaltyModule.find('.my-profile-loyalty-programs-static-tbody tr');

      if($loyaltyProgramsRows.length > 0) {
        $editLink.text($loyaltyModule.data('edit'));
      }
      else {
        $editLink.text($loyaltyModule.data('add'));
      }
    }
  };

  /*
   * Cancel the edits, warn user if any modifications.
   */
  var cancelEdits = function cancelEdits(e) {

    var $clickedLink = $(e.currentTarget);
    var $module = $clickedLink.parents(config.moduleSelector);
    var $form = $module.find('form');
    var values = $form.serializeArray();
    var formIsModified = false;
    
    // Check if the form was modified.
    $.each(values, function(i, object) {
      if(object.value.length > 0) {
        formIsModified = true;
        return false;
      }
    });

    $('.module').each(function(){
      $(this).attr('aria-hidden','true');
    });

    $module.attr('aria-hidden','false');
    
    _toggleSection($module, false);
  };

  var accessibleRadioButtons = function accessibleRadioButtons() {

    var $this = $(this);
    var $inputs = $this.parents(config.radioButtonGroupSelector).find('input');

    $inputs.attr('aria-checked', 'false');
    $this.attr('aria-checked', 'true');
  };


  /*
   * Util function to toggle On or Off a section.
   */
  var _toggleSection = function _toggleSection($module, isEditable) {

    var $editLink = $module.find(config.editLinkSelector);
    var $staticContainer = $module.find(config.staticContainerSelector);
    var $editableContainer = $module.find(config.editableContainerSelector);
    var $errors = $module.find(config.formGroupErrorSelector);
    var $globalMessage = $module.find(config.moduleMessagesSelector);
    var $notes = $module.find('.my-profile-form-notes-required');
    var $firstInput = $module.find('p').eq(0);

    if(isEditable) {
      $editableContainer.css('display', 'block');
      $editableContainer.attr('aria-hidden', 'false');
      $staticContainer.eq(0).css('display', 'none');
      $staticContainer.eq(0).attr('aria-hidden', 'true');
      $editLink.css('display', 'none');

      if($notes.length > 0) {
        $notes.attr('tabindex', '-1');
        $notes.focus();
      }
      else {
        $firstInput.attr('tabindex', '-1');
        $firstInput.focus();
      }

      _hideGlobalMessage($globalMessage);
    }
    else {

      // Resets input if any value would've been entered.
      $module.find('form').trigger('reset');
      $module.find(':input').not(':button, :submit, :reset, :hidden, :checkbox, :radio').val('').removeClass('error');
      $module.find('select').val('').removeClass('error').selectmenu('refresh'); // resets select input and refresh jquery ui select
      $module.find(':checkbox, :radio').prop('checked', false).removeClass('error');
      $module.find('.my-profile-radio-button-group .my-profile-form-radio').eq(0).prop('checked', true); // select first radio button of a group
      $module.find('.my-profile-messages').removeClass('error confirmation');

      $notes.removeAttr('tabindex');

      $staticContainer.css('display', 'block');
      $staticContainer.attr('aria-hidden', 'false');

      $editLink.css('display', 'block');
      $editableContainer.css('display', 'none');
      $editableContainer.attr('aria-hidden', 'true');

      $errors.css('display', 'none');

      setTimeout(function() {
        $module.find('h2').attr('tabindex','-1');
        $module.find('h2').focus();
        $('.module').each(function(){
          $(this).attr('aria-hidden','false');
        });
      }, 1);
      
      _hideGlobalMessage($globalMessage);
    }

    $(window).trigger('resize');
  };

  /*
   * Get necessary DOM elements for saving a form
   */
  var _getContextFormElements = function _getContextFormElements($form) {

    var $module = $form.parents(config.moduleSelector);
    var $inputs = $form.find(':input').not(':button, :submit, :hidden, :reset, :checkbox, :radio');
    var $selects = $form.find('select');
    var $allInputs = $inputs.add($selects);

    // todo: Refactor return allInputs to inputs only.
    return {
      $module: $module,
      $errors: $form.find(config.formGroupErrorSelector),
      $globalMessage: $module.find(config.moduleMessagesSelector),
      $allInputs: $allInputs
    };
  };
  
  /*
   * Util function to parse a form a return a JSON representation of the inputs
   */
  var _parseInputs = function _parseInputs($inputs) {

    var formData = {};

    $.each($inputs, function(i, object) {

      var $object = $(object);
      var name = $object.attr('name');

      formData[name] = {};
      formData[name].name = name;
      formData[name].type = $object.attr('type') || $object.data('type') || 'select';
      formData[name].dataType = $object.data('type') || 'text';
      formData[name].value = $object.attr('data-val') || $object.val();
      formData[name].required = $object.prop('required');
    });

    return formData;
  };

  /*
   * Util function to check if fields is valid
   * Return: an array of invalid field name.
   */
  var _validateFormData = function _validateFormData(formData) {

    var invalidData = {
      numberOfErrors: 0,
      inputs: []
    };

    $.each(formData, function(i, data) {

      var dataType = data.dataType;

      if(data.required && data.value === '') {
        invalidData.numberOfErrors += 1;
        invalidData.inputs.push({
          "name": data.name,
          "errorType": "required"
        });
        return true;
      }

      if(dataType === 'email') {
        // regex email validation
        var emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/g;

        if(!emailRegex.test(data.value)) {
          invalidData.numberOfErrors += 1;
          invalidData.inputs.push({
            "name": data.name,
            "errorType": "invalid"
          });
          return true;
        }
      }

      // simply checks if strings contains only numbers, parenthesis or plus sign
      if(dataType === 'phone') {
        var phoneRegex = /^[0-9-+\s()]*$/;
        if(!phoneRegex.test(data.value)) {
          invalidData.numberOfErrors += 1;
          invalidData.inputs.push({
            "name": data.name,
            "errorType": "invalid"
          });
          return true;
        }
      }

      if(dataType === 'zip') {
        var zipRegex =/^[a-z0-9\-\ ]+$/i;
        if(!zipRegex.test(data.value)) {
          invalidData.numberOfErrors += 1;
          invalidData.inputs.push({
            "name": data.name,
            "errorType": "invalid"
          });
        }
      }
    });

    return invalidData;
  };

  /*
   * Util function to check two fields are the same
   * Return: the initial modified array of invalid values
   */
  var _validateFieldsAreTheSame = function _validateFieldsAreTheSame(field1, field2, invalidData) {

    if(field1.value !== '' || field2.value !== '') {

      if(field1.value !== field2.value) {

        var indexs = [];

        // Remove previous error with the same name
        for (var i = 0; i < invalidData.inputs.length; i++) {
          if (invalidData.inputs[i].name === field1.name || invalidData.inputs[i].name === field2.name) {
            indexs.push(i);
          }
        }

        for (var j = indexs.length - 1; j >= 0; j--) {
          invalidData.inputs.splice(indexs[j], 1);
        }

        // Adjust the number of errors based on the removed errors.
        invalidData.numberOfErrors = invalidData.numberOfErrors - indexs.length;

        // Add the new error.
        invalidData.inputs.push({
          "name": field1.name,
          "errorType": "not-matching"
        });

        invalidData.inputs.push({
          "name": field2.name,
          "errorType": "not-matching"
        });

        // Not matching only count as one errors.
        invalidData.numberOfErrors += 1;
      }
      
      // This is left comment out in case Michael decide that if 2 field are the same
      // but both are invalid counts only has 1 error.
      else {

        var sameButInvalid = [];

        for (var l = 0; l < invalidData.inputs.length; l++) {
          if (invalidData.inputs[l].name === field1.name || invalidData.inputs[l].name === field2.name) {
            sameButInvalid.push(invalidData.inputs[l]);
          }
        }

        if(sameButInvalid.length === 2) {
          invalidData.numberOfErrors -= 1;
        }
      }
    }

    return invalidData;
  };

  /*
   * Util function to show confirmation message of a module
   */
  var _showGlobalMessage = function _showGlobalMessage($globalMessage, message, stateClass) {
    $globalMessage.css('display', 'block');
    $globalMessage.text(message);
    $globalMessage.attr('tabindex', '-1');
    $globalMessage.focus();
    $globalMessage.addClass(stateClass);
  };

  /*
   * Util function to show errors of a form/module
   */
  var _showErrors = function _showErrors($globalMessage, invalidData) {

    $globalMessage.css('display', 'block');
    $globalMessage.addClass('error');
    
    var text = $.parseHTML($globalMessage.attr('data-error'));
    text[1].innerText = invalidData.numberOfErrors;
    $globalMessage.append(text);
    
    $globalMessage.attr('tabindex', '-1');
    $globalMessage.focus();

    $.each(invalidData.inputs, function(i, input) {
      var $error = $('#' + input.name + '-error');
      var $field = $('#' + input.name);
      var $formGroups = $error.parents('.my-profile-form-section').find('.form-group');
      var errorRowNumber = $error.parents('.form-group').index();

      if($(window).width() > 767) {
        $formGroups.each(function() {
          var styleAttr = $(this).attr('style');
          var formGroupRowNumber = $(this).index();
          if(errorRowNumber === formGroupRowNumber) {
            if(!styleAttr || styleAttr.indexOf('height') === -1) {
              $(this).css('height', $error.outerHeight(true) + $(this).outerHeight());
            }
          }
        });
      }

      $error.text($field.data(input.errorType));
      $field.addClass('error');
      $error.css('display', 'block');
    });
  };

  /*
   * Util function to hide errors
   */
  var _hideErrors = function _hideErrors(formElements) {
    formElements.$errors.css('display', 'none');
    formElements.$allInputs.removeClass('error');
    formElements.$module.find('.form-group').removeAttr('style');
    _hideGlobalMessage(formElements.$globalMessage);
  };

  /*
   * Util function to hide module messages
   */
  var _hideGlobalMessage = function _hideGlobalMessage($message) {
    $message.css('display', 'none');
    $message.text('');
    $message.removeClass('confirmation');
    $message.removeClass('error');
    $message.removeAttr('tabindex');
  };

  /*
   * Handle when the ajax is done
   */
  var _ajaxDone = function _ajaxDone(formElements, status, jsonRes, isDynamic) {

    if(status === 'success') {
      if(!isDynamic) {
        _toggleSection(formElements.$module, false);
      }

      _showGlobalMessage(formElements.$globalMessage, jsonRes.success, 'confirmation');

      var $ajaxDelete = $(config.ajaxDeleteSelector);
      $ajaxDelete.on('click', onRemoveLoyaltyProgram);

      initLists();
      $(window).trigger('resize');
    }

    if (status === 'error') {
      _hideGlobalMessage(formElements.$globalMessage);
      _showGlobalMessage(formElements.$globalMessage, jsonRes.error, 'error');
    }
  };

  /*
   * Unmask the data.
   */
  var _unmaskData =  function _unmaskData() {

    var $input = $(this);

    var unmaskValue = $input.attr('data-val') || '';

    if($input.attr('data-val')) {
      unmaskValue = unmaskValue.replace(/[\[\]]+/g, '');
    }

    unmaskValue = unmaskValue.trim();
    $input.val(unmaskValue);
  };

  /*
   * Mask the username input in security information.
   * Result should be
   *  - 1234
   *  - 12*45
   *  - 12*****89
   */
  var _maskUsername = function _maskUsername() {

    var $input = $(this);
    var enteredValue = $input.val().trim();
    var maskedValue = '';
    var numberOfStars = 0;

    $input.attr('data-val', enteredValue);

    // Don't mask if less than 5 char.
    if(enteredValue.length <= 2) {
      maskedValue = enteredValue;
    }
    else if(enteredValue.length > 2 && enteredValue.length < 5) {
      numberOfStars = enteredValue.length - 2;
      maskedValue = enteredValue.substr(0, 2) + new Array(numberOfStars + 1).join('*');
    }
    // Mask the middle char if string is 5 char long.
    else if(enteredValue.length === 5) {
      maskedValue = enteredValue.substr(0, 2) + '*' + enteredValue.substr(3, enteredValue.length);
    }
    // Keep the first and the last 2 char and add appropriate amount of stars.
    else {
      numberOfStars = enteredValue.length - 4;
      var beginning = enteredValue.substr(0, 2);
      var ending = enteredValue.substr(enteredValue.length - 2, enteredValue.length);
      var stars = new Array(numberOfStars + 1).join('*');
      maskedValue = beginning + stars + ending;
    }

    $input.val(maskedValue);
  };

  /*
   * Mask the email input in contact information.
   * Result should be
   *  - a@citi.com
   *  - a*@citi.com
   *  - a**@ citi.com
   *  - a**3@citi.com
   *  - a*****3@citi.com
   */
  var _maskEmail = function _maskEmail() {

    var $input = $(this);
    var maskedValue = '';
    var enteredValue = {
      complete: $input.val().trim(),
      local: '',
      domain: ''
    };

    $input.attr('data-val', enteredValue.complete);

    var atChar = enteredValue.complete.indexOf('@');
    enteredValue.local = enteredValue.complete.substr('0', atChar);
    enteredValue.domain = enteredValue.complete.substr(atChar, enteredValue.complete.length);


    var firstChar = enteredValue.local.substr(0, 1);
    var lastChar = enteredValue.local.substr(atChar - 1, atChar);
    var stars = null;

    // Don't mask for 1 char
    if (enteredValue.local.length <= 1) {
      maskedValue = enteredValue.complete;
    }
    // For 2 and 3 char, leave the first char unmask
    else if (enteredValue.local.length <= 3) {
      stars = new Array(enteredValue.local.length).join('*');
      maskedValue = firstChar + stars + enteredValue.domain;
    }
    // Leave first and last local char unmask, mask the rest of the local part.
    else if (enteredValue.local.length >= 4) {
      stars = new Array(enteredValue.local.length - 1).join('*');
      maskedValue = firstChar + stars + lastChar + enteredValue.domain;
    }

    $input.val(maskedValue);
  };

  /*
   * Mask the phone number in contact information
   * Result should be
   * - ***-***-1111
   * - (***) *** - 1111
   * - ***1111
   * - ******1111
   * - 1111
   * - *1111
   */
  var _maskPhoneNumber = function _maskPhoneNumber() {

    var $input = $(this);
    var replaceRegex = /([0-9a-zA-Z])/g;
    var enteredValue = {
      complete: $input.val().trim(),
      beginning: '',
      ending: ''
    };

    var maskedValue = enteredValue.complete;
    $input.attr('data-val', enteredValue.complete);

    if(enteredValue.complete.length > 4) {
      enteredValue.beginning = enteredValue.complete.substr(0, enteredValue.complete.length - 4);
      enteredValue.ending = enteredValue.complete.substr(enteredValue.complete.length - 4, enteredValue.complete.length);
      maskedValue = enteredValue.beginning.replace(replaceRegex, '*') + enteredValue.ending;
    }

    $input.val(maskedValue);
  };

  /*
   * Mask the loyalty program number
   * Result should be
   * - **********ABCD
   * - ***ABCD
   * - ABCD
   */
  var _maskLoyaltyProgramNumber = function _maskLoyaltyProgramNumber() {

    var $input = $(this);
    var enteredValue = {
      complete: $input.val(),
      beginning: '',
      ending: ''
    };

    $input.attr('data-val', enteredValue.complete);

    if(enteredValue.complete.length > 4) {
      enteredValue.beginning = enteredValue.complete.substr(0, enteredValue.complete.length - 4);
      enteredValue.ending = enteredValue.complete.substr(enteredValue.complete.length - 4, enteredValue.complete.length);
      $input.val(new Array(enteredValue.beginning.length + 1).join('*') + enteredValue.ending);
    }
  };

  /*
   * Init the accessible list
   */
  var initLists = function initLists() {

    $('.profile-contact-information-list').each(function() {
      var list = citiShare.accessibleMultiColumnList(this, 3);
      list.init();
      config.contactInformationLists.push(list);
    });

    citiShare.accessibleMultiColumnList('.profile-security-information-list', 3).init();
  };

  /*
   * Add functionality to the select so they open when pressing enter
   */
  var onEnterSelect = function onEnterSelect(e) {

    if(e.which === 13) {

      var $this = $(this);
      var select = $this.prev('select');

      if($(this).attr('aria-expanded') === 'false') {

        select.selectmenu('open');

        // Unbind event and rebind on close.
        // This is done because the behavior on the enter key when the dropdown
        // is open is already taken care by the plugin.
        $this.off('keydown.enter');
        select.on('selectmenuclose', function() {
          $this.on('keydown.enter', onEnterSelect);
        });
      }
    }
  };

  /*
   * Init the citiShare.profile code.
   * Basically bind all necessary events.
   */
  var init = function init () {

    // Toggling section functionality
    config.$editLinks.click(editSection);
    config.$cancelLinks.click(cancelEdits);

    // Submit events
    config.$accountSelectionForm.on('submit', onSubmitAccountSelection);
    config.$contactInformationForm.on('submit', onSubmitContactInformation);
    config.$securityInformationForm.on('submit', onSubmitSecurityInformation);
    config.$emailSettingsForm.on('submit', onSubmitRadioButtonForm);
    config.$legalNoticesForm.on('submit', onSubmitRadioButtonForm);
    config.$loyaltyProgramsForm.on('submit', onSubmitLoyaltyProgramsForm);
    config.$loyaltyProgramsDoneButton.on('click', onDoneLoyaltyProgram);

    // prevent form submission on enter
    $('.my-profile form').on('keypress', function(e) {
      return e.which !== 13;
    });

    // allow form submission on submit button enter
    $('.my-profile form input[type=submit]').on('keypress', function(e) {
      if(e.which === 13) {
        $(this).parents('form').trigger('submit');
      }
    });

    $(config.ajaxDeleteSelector).on('click', onRemoveLoyaltyProgram);

    // Security answer show/hide text functionality
    config.$securityInformationMaskedInput.focus(function() {
      $(this).attr('type', 'text');
    });

    config.$securityInformationMaskedInput.blur(function() {
      $(this).attr('type', 'password');
    });

    config.$securityInformationUsername.focus(_unmaskData);
    config.$securityInformationUsername.blur(_maskUsername);

    config.$contactInformationEmailInput.focus(_unmaskData);
    config.$contactInformationEmailInput.blur(_maskEmail);

    config.$contactInformationPhonesInput.focus(_unmaskData);
    config.$contactInformationPhonesInput.blur(_maskPhoneNumber);

    config.$loyaltyProgramsNumberInput.focus(_unmaskData);
    config.$loyaltyProgramsNumberInput.blur(_maskLoyaltyProgramNumber);

    // Accessible radio buttons
    $(config.radioButtonGroupSelector + ' input').on('click', accessibleRadioButtons);

    // Add open on enter for select menu
    $('.dropdown').find('.ui-selectmenu-button').on('keydown.enter', onEnterSelect);
    $('.dropdown select').selectmenu('refresh');

    // On ajax get success.
    $(document).on('get.success', onGetSuccess);

    // Accessible lists.
    initLists();
  };

  if($('.my-profile').length > 0) {
    init();
  }

})();

/*jshint debug:true */

citiShare.quickView = (function () {
  'use strict';

  /**
   *
   */
  function openDrawer() {

    // shift focus to quickview and lock the keyboard user in
    $(".js-product-detail-module").on('keydown', function (event) {
      citiShare.util.trapTabKey($('.js-product-detail-module'), event);
      citiShare.util.trapEscapeKey($('.js-product-detail-module'), event);
    });

    $('.js-product-list-placeholder').on("click", ".quickview-label", function () {

      // Items per row
      var productId = $(this).closest('.product-list-item').data('product-id');


      // Clean up any active drawer
      // TODO: Show when ajax is done :
      $('.product-detail.quick-view').removeClass('is-active');
      closeDrawer($(this));

      // Add "active" class to parent div
      $(this).parent().addClass("active");


      // TODO: Insert ajax here
      $('.js-product-detail-module').empty();
      citiShare.getProductDetailItem($('.js-product-detail-module'), '#js-product-detail-template', window.json, productId, initQuickviewModal.bind($(this)));

      lockQuickViewToPlaceholder();


    });

  }

  function initQuickviewModal() {
    /* jshint validthis: true */
    // forcing jshint to validate use of 'this' keyword within this function
    // because we need to maintain scope as we're passing this as a callback
    // to citiShare.getProductDetailItem

    // Items per row
    var $quickViewButton = $(this),
      perRow = 3,
      currentContainerIndex = $quickViewButton.closest('.product-list-item').index('.product-list-item') + 1,
      currentRowEndIndex = findNextRowBreak(currentContainerIndex, perRow) - 1;

    // Check for filter height
    var filterHeight = $(".filter-sticky-wrapper").outerHeight();

    citiShare.createZoom();
    citiShare.createTabs();
    citiShare.createTooltips();
    citiShare.createButtonSets();
    citiShare.selectMenuForElement();
    citiShare.numericStepperSetup();

    $('.js-product-detail-module-placeholder')
      .show()
      .insertAfter($(".quickview-enable").eq(currentRowEndIndex).closest('.product-list-item'))
      .animate({height: 450}, 500);

    $('.product-detail.quick-view').addClass('is-active');

    $('html, body').animate({
      scrollTop: $('.js-product-detail-module-placeholder').offset().top - filterHeight + Number($('.js-product-detail-module-placeholder').css('margin-top').replace('px', ''))
    }, 1000, function () {

      $(".js-product-detail-module-placeholder").height($('.js-product-detail-module').height());

      $('.js-product-detail-module').css({
        top: $(".js-product-detail-module-placeholder").offset().top - filterHeight + Number($('.js-product-detail-module-placeholder').css('margin-top').replace('px', ''))
      });

      $('.js-product-detail-module .js-product-title').focus();

      $('#oc-container, .live-chat-wrapper').attr('aria-hidden', 'true');

      $('.js-product-detail-module').on("click", ".modal-close-button", function () {
        closeDrawer($quickViewButton);
      });

      $(window).trigger('scroll');

    });

    $('#oc-container').click(function () {
      // if the quickview container is not empty, close the drawer when clicking on #oc-container
      if ($('.js-product-detail-module:visible')[0].hasChildNodes()) {
        closeDrawer($quickViewButton);
      }
    });

    $(window).on('scroll', function () {
      lockQuickViewToPlaceholder();
    });

    citiShare.tooltip.refresh();
  }


  // visually attach quickview container to quickview placeholder
  function lockQuickViewToPlaceholder() {
    $('.js-product-detail-module').css({
      top: $(".js-product-detail-module-placeholder").offset().top - $(document).scrollTop(),
      left: $(".js-product-detail-module-placeholder").offset().left
    });
  }

  /**
   * Reposition quickview panel on windows resize
   */
  function positionQuickViewWindowResize() {
    $(window).resize(function () {
      lockQuickViewToPlaceholder();
    });
  }

  /**
   * Close drawer
   */
  function closeDrawer($quickViewButton) {
    $('.product-detail.quick-view').removeClass('is-active');
    $('.js-product-detail-module').empty();
    $('.js-product-detail-module-placeholder').hide();
    $('#oc-container, .live-chat-wrapper').attr('aria-hidden', 'false');
    window.setTimeout(function () {
      if ($quickViewButton !== undefined) {
        $quickViewButton.focus();
      }
    }, 500);
  }


  /**
   * Close drawer on window resize
   */
  function closeDrawerWindowResize() {
    $(window).resize(function () {
      var windowWidth = window.innerWidth || $(window).width();
      if (windowWidth < 960) {
        closeDrawer();
      }
    });
  }

  /**
   * Trigger click event key enter
   */
  function addKeyboardEnterKey() {
    $(document).on("keydown", function (e) {
      if (e.keyCode === 13) {
        $(this).click();
      }
    });
  }

  /**
   * Find the next closest row break for injecting the quickview template
   * @param currentContainerIndex
   * @param itemsPerRow
   * @returns {number} Index number of the next row break
   */
  function findNextRowBreak(currentContainerIndex, itemsPerRow) {

    var nextRowBreakIndex;

    //First row
    if (currentContainerIndex <= itemsPerRow) {
      // need to check to see if we even have itemsPerRow number of products
      if ($('.product-list-item').length > itemsPerRow) {
        nextRowBreakIndex = itemsPerRow;
      } else {
        nextRowBreakIndex = $('.product-list-item').length;
      }
    }
    else {
      if (currentContainerIndex % itemsPerRow === 0) {
        nextRowBreakIndex = currentContainerIndex;
      }
      else {
        nextRowBreakIndex = (itemsPerRow - currentContainerIndex % itemsPerRow) + currentContainerIndex;
      }
    }
    return nextRowBreakIndex;
  }

  if ($('.js-product-detail-module').length > 0) {
    // TODO: Re-write this so that it happens automagically.
    ['buttonset-component', 'submit-button-component', 'tooltip-component', 'dropdown-component', 'numeric-stepper-component'].forEach(function (template) {
      citiShare.util.getHandlebarPartials(template);
    });

    openDrawer();
    closeDrawerWindowResize();
    addKeyboardEnterKey();
    positionQuickViewWindowResize();
  }

  return {
    addKeyboardEnterKey: addKeyboardEnterKey,
    closeDrawerWindowResize: closeDrawerWindowResize,
    lockQuickViewToPlaceholder: lockQuickViewToPlaceholder,
    openDrawer: openDrawer,
    positionQuickViewWindowResize: positionQuickViewWindowResize
  };
})();

citiShare.reinstateCurrency = (function () {

  "use strict";

  var config = {
    $container: $(".reinstate-points-container"),
  };

  var setupCheckboxes = function setupCheckboxes() {
    config.$container.on("keypress", "input[type=checkbox]", function (event) {
      if (event.which === 13) {
        event.preventDefault();
        $(this).prop("checked", !$(this).prop("checked"));
        $(this).trigger("change");
      }
    });

    config.$container.on("change", "input[type=checkbox]", function () {
      var $options = config.$container.find("input[type=checkbox]"),
        enableSubmit = false;

      $options.each(function () {
        if ($(this).is(':checked')) {
          enableSubmit = true;
        }
      });

      if (enableSubmit) {
        config.$container.find("input[type=submit]").removeAttr("disabled");
      } else {
        config.$container.find("input[type=submit]").get(0).disabled = true;
      }
    });
  };

  var init = function init() {
    setupCheckboxes();
    config.$container.on("click", "input[type=submit]", function (event) {
      event.preventDefault();
      config.$container.find("form").trigger("form:reinstate");
    });
  };

  if ($('.my-profile')) {
    init();
  }

})();
citiShare.search = (function() {
    'use strict';

    var templatePartials = [
        {
            dataProperty: 'travelResults',
            template: 'travel-results-header'
        },
        {
            dataProperty: 'suggestionTerms',
            template: 'search-suggestions'
        },
        {
            dataProperty: 'shopWithPoints',
            template: 'shop-with-points-result'
        },
        {
            dataProperty: 'tabs',
            template: 'filter-tabs'
        }
    ];

    var templates = [];

    templatePartials.forEach(function(partialData) {
        templates.push(partialData.template);
    });

    function showSearchResults(){

    	$.ajax({
    		url: window.citiConfig.endPointHost + window.citiConfig.searchResultsEndPointPath + window.searchEndpoint,
    		type: 'GET',
    		dataType: 'json'
    	})
    	.done(function(data) {
            var $contentWrapper = $('.js-search-page-header-content-wrapper');

            templatePartials.forEach(function(partial){
                if(data.hasOwnProperty(partial.dataProperty)) {
                    $contentWrapper.append(citiShare.util.renderTemplate(window.Handlebars.partials[partial.template], data));

                    if(partial.dataProperty === 'tabs') {
                        //needed for variant where travel results + tabs are displayed together
                        $contentWrapper.addClass('js-search-page-header-content-wrapper--has-tabs');
                        $(window).trigger(citiShare.filterTabs.Events.RENDERED);
                    }
                }
            });

    	})
    	.fail(function() {
    		console.log("error");
    	})
    	.always(function() {
    		console.log("complete");
    	});

    }


    // TODO: Re-write this so that it happens automagically.
    function defineSearchPartials(){
		templates.forEach(function(template){
	        citiShare.util.getHandlebarPartials(template);
	    });
    }


	if($('.js-search-page-header-content-wrapper').length > 0){
        defineSearchPartials();
		showSearchResults();
    }

    return {
        defineSearchPartials: defineSearchPartials
    };
})();

/**
 * @fileoverview Line clamper item for CitiBank.
 * @author Nathan Buchar
 */

'use strict';

/**
 * Clamp.js 0.7.0
 *
 * Copyright 2011-2013, Joseph Schmitt http://joe.sh
 * Released under the WTFPL license
 * http://sam.zoy.org/wtfpl/
 */
function $clamp(element, options) {
  options = options || {};

  var win = window,
    opt = {
      clamp: options.clamp || 2,
      useNativeClamp: typeof(options.useNativeClamp) !== 'undefined' ? options.useNativeClamp : true,
      splitOnChars: options.splitOnChars || ['.', '-', '–', '—', ' '], //Split on sentences (periods), hypens, en-dashes, em-dashes, and words (spaces).
      animate: options.animate || false,
      truncationChar: options.truncationChar || '&#8230;',
      truncationHTML: options.truncationHTML
    },

    sty = element.style,
    originalText = element.innerHTML,

    supportsNativeClamp = typeof(element.style.webkitLineClamp) !== 'undefined',
    clampValue = opt.clamp,
    isCSSValue = clampValue.indexOf && (clampValue.indexOf('px') > -1 || clampValue.indexOf('em') > -1),
    truncationHTMLContainer;

  if (opt.truncationHTML) {
    truncationHTMLContainer = document.createElement('span');
    truncationHTMLContainer.innerHTML = opt.truncationHTML;
  }


  // UTILITY FUNCTIONS __________________________________________________________

  /**
   * Return the current style for an element.
   * @param {HTMLElement} elem The element to compute.
   * @param {string} prop The style property.
   * @returns {number}
   */
  function computeStyle(elem, prop) {
    if (!win.getComputedStyle) {
      win.getComputedStyle = function(el) {
        this.el = el;
        this.getPropertyValue = function(prop) {
          var re = /(\-([a-z]){1})/g;
          if (prop === 'float') {
            prop = 'styleFloat';
          }
          if (re.test(prop)) {
            prop = prop.replace(re, function() {
              return arguments[2].toUpperCase();
            });
          }
          return el.currentStyle && el.currentStyle[prop] ? el.currentStyle[prop] : null;
        };
        return this;
      };
    }

    return win.getComputedStyle(elem, null).getPropertyValue(prop);
  }

  /**
   * Returns the maximum number of lines of text that should be rendered based
   * on the current height of the element and the line-height of the text.
   */
  function getMaxLines(height) {
    var availHeight = height || element.clientHeight,
      lineHeight = getLineHeight(element);

    return Math.max(Math.floor(availHeight / lineHeight), 0);
  }

  /**
   * Returns the maximum height a given element should have based on the line-
   * height of the text and the given clamp value.
   */
  function getMaxHeight(clmp) {
    var lineHeight = getLineHeight(element);
    return lineHeight * clmp;
  }

  /**
   * Returns the line-height of an element as an integer.
   */
  function getLineHeight(elem) {
    var lh = computeStyle(elem, 'line-height');
    if (lh === 'normal') {
      // Normal line heights vary from browser to browser. The spec recommends
      // a value between 1.0 and 1.2 of the font size. Using 1.1 to split the diff.
      lh = parseInt(computeStyle(elem, 'font-size')) * 1.2;
    }
    return parseInt(lh);
  }


  // MEAT AND POTATOES (MMMM, POTATOES...) ______________________________________
  var splitOnChars = opt.splitOnChars.slice(0),
    splitChar = splitOnChars[0],
    chunks,
    lastChunk;

  /**
   * Gets an element's last child. That may be another node or a node's contents.
   */
  function getLastChild(elem) {
    //Current element has children, need to go deeper and get last child as a text node
    if (elem.lastChild.children && elem.lastChild.children.length > 0) {
      return getLastChild(Array.prototype.slice.call(elem.children).pop());
    }
    //This is the absolute last child, a text node, but something's wrong with it. Remove it and keep trying
    else if (!elem.lastChild || !elem.lastChild.nodeValue || elem.lastChild.nodeValue === '' || elem.lastChild.nodeValue === opt.truncationChar) {
      elem.lastChild.parentNode.removeChild(elem.lastChild);
      return getLastChild(element);
    }
    //This is the last child we want, return it
    else {
      return elem.lastChild;
    }
  }

  /**
   * Removes one character at a time from the text until its width or
   * height is beneath the passed-in max param.
   */
  function truncate(target, maxHeight) {
    if (!maxHeight) {
      return;
    }

    /**
     * Resets global variables.
     */
    function reset() {
      splitOnChars = opt.splitOnChars.slice(0);
      splitChar = splitOnChars[0];
      chunks = null;
      lastChunk = null;
    }

    var nodeValue = target.nodeValue.replace(opt.truncationChar, '');

    //Grab the next chunks
    if (!chunks) {
      //If there are more characters to try, grab the next one
      if (splitOnChars.length > 0) {
        splitChar = splitOnChars.shift();
      }
      //No characters to chunk by. Go character-by-character
      else {
        splitChar = '';
      }

      chunks = nodeValue.split(splitChar);
    }

    //If there are chunks left to remove, remove the last one and see if
    // the nodeValue fits.
    if (chunks.length > 1) {
      lastChunk = chunks.pop();
      applyEllipsis(target, chunks.join(splitChar));
    }
    //No more chunks can be removed using this character
    else {
      chunks = null;
    }

    //Insert the custom HTML before the truncation character
    if (truncationHTMLContainer) {
        target.nodeValue = target.nodeValue.replace(opt.truncationChar, '');
        element.innerHTML = target.nodeValue + opt.truncationChar + ' ' + truncationHTMLContainer.innerHTML ;
    }

    //Search produced valid chunks
    if (chunks) {
      //It fits
      if (element.clientHeight <= maxHeight) {
        //There's still more characters to try splitting on, not quite done yet
        if (splitOnChars.length >= 0 && splitChar !== '') {
          applyEllipsis(target, chunks.join(splitChar) + splitChar + lastChunk);
          chunks = null;
        }
        //Finished!
        else {
          return element.innerHTML;
        }
      }
    }
    //No valid chunks produced
    else {
      //No valid chunks even when splitting by letter, time to move
      //on to the next node
      if (splitChar === '') {
        applyEllipsis(target, '');
        target = getLastChild(element);

        reset();
      }
    }

    //If you get here it means still too big, let's keep truncating
    if (opt.animate) {
      setTimeout(function() {
        truncate(target, maxHeight);
      }, opt.animate === true ? 10 : opt.animate);
    } else {
      return truncate(target, maxHeight);
    }
  }

  function applyEllipsis(elem, str) {
    elem.nodeValue = str + opt.truncationChar;
  }


  // CONSTRUCTOR ________________________________________________________________

  if (clampValue === 'auto') {
    clampValue = getMaxLines();
  } else if (isCSSValue) {
    clampValue = getMaxLines(parseInt(clampValue));
  }

  var clampedText;
  if (supportsNativeClamp && opt.useNativeClamp) {
    sty.overflow = 'hidden';
    sty.textOverflow = 'ellipsis';
    sty.webkitBoxOrient = 'vertical';
    sty.display = '-webkit-box';
    sty.webkitLineClamp = clampValue;

    if (isCSSValue) {
      sty.height = opt.clamp + 'px';
    }
  } else {
    var height = getMaxHeight(clampValue);
    if (height < element.clientHeight) {
      clampedText = truncate(getLastChild(element), height);
    }
  }

  return {
    'original': originalText,
    'clamped': clampedText
  };
}

/**
 * SeeMoreItem
 */
var SeeMoreItem = function (element, options) {

  /**
   * The base element for this item.
   *
   * @type {HTMLElement}
   * @private
   */
  this._element = element;

  /**
   * The clamp options.
   *
   * @type {Object}
   * @private
   */
  this._options = options;

  /**
   * The clamp Object.
   *
   * @type {Object}
   * @default null
   * @private
   */
  this._clamp = null;

  /**
   * The see more button.
   *
   * @type {HTMLElement}
   * @default null
   * @private
   */
  this._seeMoreButton = null;
  
  /**
   * The see less button.
   *
   * @type {HTMLElement}
   * @default null
   * @private
   */
  this._seeLessButton = null;

  /**
   * Called when "see more" is pressed and delegates to the appropriate method
   * with the proper lexical scope.
   *
   * @type {Object}
   * @private
   */
  this._onSeeMoreClick = this._handleSeeMoreClick.bind(this);
  
  /**
   * Called when "see less" is pressed and delegates to the appropriate method
   * with the proper lexical scope.
   *
   * @type {Object}
   * @private
   */
  this._onSeeLessClick = this._handleSeeLessClick.bind(this);

  this._init();
};

/**
 * Initializes the SeeMoreItem instance.
 *
 * @private
 */
SeeMoreItem.prototype._init = function () {
  this._stripTags();
  this._clampItem();
};

/**
 * Strip tags from the content. $clamp will not work as intended if there's more
 * than one child per target node.
 *
 * @private
 */
SeeMoreItem.prototype._stripTags = function () {
  this._element.textContent = this._element.innerHTML.replace(/(<([^>]+)>)/ig, '');
};

/**
 * Re-clamps the SeeMoreItem instance. This is destructive.
 *
 * @private
 */
SeeMoreItem.prototype._update = function () {
  this._clampItem();
};

/**
 * Clamps the SeeMoreItem instance.
 *
 * @private
 */
SeeMoreItem.prototype._clampItem = function () {
  this._resetSeeMoreButton();

  this._clamp = $clamp(this._element, {
    clamp: this._options.numLines,
    useNativeClamp: false,
    splitOnChars: ['.', '-', '–', '—', ' '],
    truncationChar: '&#8230;',
    truncationHTML: SeeMoreItem.TruncationHTML,
    animate: false
  });

  this._registerSeeMoreButton();
};

/**
 * Caches a reference to the see more button pointer and adds a click event
 * listener.
 *
 * @private
 */
SeeMoreItem.prototype._registerSeeMoreButton = function () {
  this._seeMoreButton = this._element.querySelector(SeeMoreItem.Selectors.BUTTON_MORE);

  if (this._seeMoreButton) {
    this._seeMoreButton.addEventListener('click', this._onSeeMoreClick);
  }
};

SeeMoreItem.prototype._registerSeeLessButton = function () {
  this._seeLessButton = this._element.querySelector(SeeMoreItem.Selectors.BUTTON_LESS);

  if (this._seeLessButton) {
    this._seeLessButton.addEventListener('click', this._onSeeLessClick);
  }
};

/**
 * Called when the "see more" button is pressed.
 *
 * @param {Event} evt
 * @private
 */
SeeMoreItem.prototype._handleSeeMoreClick = function (evt) {
  evt.preventDefault();

  this._element.innerHTML = this._clamp.original + ' ' + SeeMoreItem.ReverseTruncationHTML;
  this._resetSeeMoreButton();
  this._registerSeeLessButton();
};

/**
 * Called when the "see less" button is pressed.
 *
 * @param {Event} evt
 * @private
 */
SeeMoreItem.prototype._handleSeeLessClick = function (evt) {
  evt.preventDefault();

  this._element.innerHTML = this._clamp.clamped;
  this._resetSeeLessButton();
  this._registerSeeMoreButton();
};

/**
 * Resets the "see more" button by removing the event listener and setting the
 * internal pointer to null. This assumes that the "see more" button has been
 * destroyed after being clicked.
 *
 * @private
 */
SeeMoreItem.prototype._resetSeeMoreButton = function () {
  if (this._seeMoreButton !== null) {
    this._seeMoreButton.removeEventListener('click', this._onSeeMoreClick);
    this._seeMoreButton = null;
  }
};

/**
 * Resets the "see less" button by removing the event listener and setting the
 * internal pointer to null. This assumes that the "see less" button has been
 * destroyed after being clicked.
 *
 * @private
 */
SeeMoreItem.prototype._resetSeeLessButton = function () {
  if (this._seeLessButton !== null) {
    this._seeLessButton.removeEventListener('click', this._onSeeLessClick);
    this._seeLessButton = null;
  }
};


/**
 * The see more button HTML.
 *
 * @readonly
 */
SeeMoreItem.TruncationHTML =
  '<a class="see-more-button" href="#" style="font: inherit;" title="See More">Show More +</a>';

SeeMoreItem.ReverseTruncationHTML =
  '<a class="see-less-button" href="#" style="font: inherit;" title="See Less">Show Less -</a>';

/**
 * Related Selectors for SeeMoreItem.
 *
 * @enum {string}
 * @readonly
 */
SeeMoreItem.Selectors = {
  BUTTON_MORE : '.see-more-button',
  BUTTON_LESS : '.see-less-button'
};

citiShare.clampItem = SeeMoreItem;

/**
 * @fileoverview "See More" for CitiBank.
 * @author Nathan Buchar <nathan@odopod.com>
 */

'use strict';

var SeeMore = {

  /**
   * All added "see more" items.
   *
   * @type {SeeMoreItem[]}
   * @private
   */
  _items: [],

  /**
   * Updates all added SeeMore items.
   *
   * @access public
   */
  update: function () {
    this._items.forEach(function (item) {
      item._update();
    });
  },

  /**
   * Registers the given elements with our instance.
   *
   * @param {HTMLElement[]} elements
   * @param {Object} options
   * @returns {SeeMoreIrem[]}
   * @access public
   */
  add: function (elements, options) {
    return elements.map(function (element) {
      var item = new citiShare.clampItem(element, options);

      this._items.push(item);

      return item;
    }.bind(this));
  },

  /**
   * Initializes all clamped elements within the given context (or the document
   * body if no context is specified).
   *
   * @param {Object} [options]
   * @param {Object} [context=document.body]
   * @returns {SeeMoreIrem[]}
   * @access public
   */
  initializeAll: function (options, context) {
    var ctx = context || document.body;
    var opts = $.extend({}, SeeMore.Defaults, options || {});
    var elements = ctx.querySelectorAll(SeeMore.Selectors.BASE);

    return SeeMore.add(SeeMore.toArray(elements), opts);
  }
};

/**
 * Static helper that will convert a NodeList into a proper Array.
 *
 * @param {NodeList} nodeList
 * @returns {HTMLElement[]}
 * @static
 */
SeeMore.toArray = function (nodeList) {
  return Array.prototype.slice.call(nodeList);
};

/**
 * Related class names for SeeMore.
 *
 * @enum {string}
 * @readonly
 */
SeeMore.ClassNames = {
  BASE: 'see-more'
};

/**
 * Related Selectors for SeeMore.
 *
 * @enum {string}
 * @readonly
 */
SeeMore.Selectors = {
  BASE: '.see-more'
};

/**
 * @enum {mixed} Defaults
 * @readonly
 */
SeeMore.Defaults = {
  numLines: 5
};

/**
 * CitiBank SeeMore public API.
 *
 * @enum {Object}
 * @readonly
 */
citiShare.seeMore = {
  initAll: SeeMore.initializeAll,
  update: SeeMore.update
};

citiShare.seeMore.initAll();

citiShare.showMore = (function () {
  'use strict';

  function checkStartString(string, stringToFind) {
    return string.indexOf(stringToFind, 0) === 0;
  }

  function checkEndString(string, searchString) {
    var subjectString = string,
      position = subjectString.length;
    position -= searchString.length;
    var lastIndex = subjectString.lastIndexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  }

  var config = {
    $showMoreComponent: $('.show-more-component'),
    minCopyLength: 160
  };

  function _initShowMore() {
    $.each(config.$showMoreComponent, function () {
      var $this = $(this),
        textSelector = $this.siblings(".message-more");
      $this.data("more", truncate(textSelector));
      $this.data("less", textSelector.html());


      if (textSelector.html().replace(/<!--[\s\S]*?-->/g, "").trim().length > config.minCopyLength) {
        $this.show();
        $this.addClass("open");
        detectTrunc($this, textSelector);
        $this.on('click', function (e) {
          e.preventDefault();
          e.stopPropagation();
          detectTrunc($this, textSelector);
        });
      }
    });
  }

  function detectTrunc(link, selector) {
    if (link.hasClass('open')) {
      link.removeClass('open');
      selector.html(link.data("more"));
      link.html(link.data("more-action"));
      link.attr("aria-expanded", "false");
    } else {
      link.addClass('open');
      selector.html(link.data("less"));
      link.html(link.data("less-action"));
      link.attr("aria-expanded", "true");
    }
    checkColumnHeight(selector.parents("ul"));
  }

  function checkColumnHeight(list) {
    var heightToUpdate = 0;
    $.each(list.find(".my-account-accessible-list-column1"), function () {
      heightToUpdate += $(this).outerHeight(true);
    });
    list.css("height", heightToUpdate);
    list.find(".reset1").css("margin-top", heightToUpdate * -1);
  }

  function _resetHeights() {
    $.each(config.$showMoreComponent, function () {
      checkColumnHeight($(this).parents("ul"));
    });
  }

  function truncate(selector) {
    var truncatedText = selector.html(),
      truncatedTextTrimmed = truncatedText.replace(/<!--[\s\S]*?-->/g, "").trim();

    truncatedText = truncatedTextTrimmed.substring(0, config.minCopyLength) + '...';
    if (checkStartString(selector.html().trim(), "<!-- Data Start -->")) {
      truncatedText = "<!-- Data Start -->" + truncatedText;
    }
    if (truncatedTextTrimmed.slice(-1) === "]") {
      truncatedText += "]";
    }
    if (checkEndString(selector.html().trim(), "<!--- Data End ---->")) {
      truncatedText = truncatedText + "<!--- Data End ---->";
    }
    return truncatedText;
  }

  setTimeout(function () {
    _initShowMore();
  }, 300);

  return {
    resetHeights: _resetHeights
  };

})();

'use strict';

var Tabs = function(element) {
  /**
   * Base element
   * @type {Element}
   */
  this._element = element;

  /**
   * Base element
   * @type {jQuery}
   */
  this.$el = $(element);

  /**
   * Filter tabs
   * @type {jQuery}
   */
  this._$tabs = $('.' + Tabs.ClassName.TABS);

  /**
   * Filter tabs
   * @type {Array}
   */
  this._tabs = Tabs.toArray(this._$tabs);

  /**
   * Tab panes
   * @type {Array}
   */
  this._panes = this._tabs.map(function(tab) {
    return document.querySelector('.tabs-pane[data-for="'+ tab.getAttribute('data-id') +'"]');
  });

  this._clickListener = this._handleClickEvent.bind(this);
  this._keydownListener = this._handleKeyPress.bind(this);
  this._activeTab = null;
  this.tabId = '';

  this._init();
};

Tabs.toArray = function(arrayLike) {
  return Array.prototype.slice.call(arrayLike);
};

/**
 * Initializes the Tabs component
 */
Tabs.prototype._init = function() {
  this._processTabs();
  this._bindEvents();

  //hard-coded first value
  this.setActiveTab(this._$tabs.eq(0)[0]);
};

Tabs.prototype.setActiveTab = function(tab) {
  this._$tabs.removeClass(Tabs.ClassName.ACTIVE_TAB);
  this._$tabs.attr('aria-selected', 'false');
  this._activeTab = tab;
  $(this._activeTab).addClass(Tabs.ClassName.ACTIVE_TAB);
  $(this._activeTab).attr('aria-selected', 'true');
  this.tabId = this._activeTab.getAttribute('data-id');
  this._showPane();
};

/**
 * Adds aria states for screen readers
 */
Tabs.prototype._processTabs = function() {
  this.$el.attr('role', 'tablist');

  this._$tabs.attr({
    role: 'tab',
    tabIndex: 0
  });

  this._panes.forEach(function(el) {
    el.setAttribute('aria-hidden', true);
  });
};

/**
 * Binds window, click, and keypress events to tabs
 */

Tabs.prototype._bindEvents = function() {
  $(window).on('resize.tabs orientationchange.tabs', this._resizeListener);
  this._$tabs.on('click.tabs', this._clickListener);
  this._$tabs.on('keydown.tabs', this._keydownListener);
};

/**
 * Registers the active tab
 * @param {Event} jQuery Event
 */
Tabs.prototype._handleClickEvent = function(e) {
  e.preventDefault();

  if (this._activeTab !== e.currentTarget) {
    this.setActiveTab(e.currentTarget);
  }
};

/**
 * Registers the active tab on `ENTER` keypress
 * and move between tabs on `LEFT` or `RIGHT` keypress
 * @param {Event} jQuery Event
 */
Tabs.prototype._handleKeyPress = function(e) {

  var focusedTab = this._clamp(this._getFocusedTabIndex());

  switch(e.which) {
    case Tabs.Keys.ENTER:
      this._handleClickEvent(e);
      break;

    case Tabs.Keys.LEFT:
      focusedTab--;
      this._focusTab(focusedTab);
      break;

    case Tabs.Keys.RIGHT:
      focusedTab++;
      this._focusTab(focusedTab);
      break;
  }
};

/**
 * Focus on a tab.
 * @param {number} index Tab index to focus on.
 */
Tabs.prototype._focusTab = function(index) {
  this._$tabs.eq(index).focus();
};

/**
 * Clamp a value between valid indexes of the tabs.
 * @param {number} index Index to clamp.
 * @return {number} Clamped index.
 */
Tabs.prototype._clamp = function(index) {
  return Math.min(Math.max(index, 0), this._tabs.length - 1);
};

/**
 * Find the index of the currently focused tab.
 * @return {number}
 */
Tabs.prototype._getFocusedTabIndex = function() {
  var $focusedTab = $(document.activeElement).closest('.' + Tabs.ClassName.TABS);
  return this._$tabs.index($focusedTab);
};

Tabs.prototype._showPane = function() {
  var _this = this;

  var activePane = this._panes.filter(function(pane) {
    return pane.getAttribute('data-for') === _this.tabId;
  })[0];

  var inactivePanes = this._panes.filter(function(pane) {
    return pane.getAttribute('data-for') !== _this.tabId;
  });

  this._hidePanes(inactivePanes);

  $(activePane).addClass(Tabs.ClassName.ACTIVE_PANE);
  $(activePane).removeClass('hidden');
  activePane.setAttribute('aria-hidden', false);
};

Tabs.prototype._hidePanes = function(panes) {
  panes.forEach(function(el) {
    el.setAttribute('aria-hidden', true);
    $(el).addClass('hidden');
    $(el).removeClass(Tabs.ClassName.ACTIVE_PANE);
  });
};

Tabs.Keys = {
  ENTER: 13,
  LEFT: 37,
  RIGHT: 39,
};


Tabs.ClassName = {
  BASE: 'tabs',
  TABS: 'tabs-tab',
  ACTIVE_TAB: 'tabs-tab-is-active',
  ACTIVE_PANE: 'tabs-pane-is-active'
};

Tabs.initializeAll = function() {
  Tabs.toArray($('.tabs.faq-tabs')).forEach(function(el) {
    return new Tabs(el);
  });
};

Tabs.init = function(element) {
  return new Tabs(element);
};

citiShare.tabs = (function(){

  return {
    init: Tabs.init,
    initAll: Tabs.initializeAll,
    Events: Tabs.Events,
    ClassName: Tabs.ClassName
  };

})();

var siteTags = [
    {
        "class": ".omniture-accordion-toggle",
        "opts" : ""
    },
    {
        "class": ".omniture-add-to-cart",
        "opts" : ""
    },
    {
        "class": ".omniture-breadcrumb-item",
        "opts" : ""
    },
    {
        "class": ".omniture-breadcrumb-link",
        "opts" : ""
    },
    {
        "class": ".omniture-buttonset",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-billing-address-edit",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-header-cancel",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-gift-cards-shipping-faq",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-gift-cards-in-store-pickup-faq",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-shipping-address-edit",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-shipping-address-type-change",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-change-recipient",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-change-recipient-edit-message",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-change-recipient-cancel",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-change-recipient-apply",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-item-add",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-item-remove",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-summary-continue",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-checkout-summary-cancel",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-confirmation-order-history",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-confirmation-continue-shopping",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-confirmation-print",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-confirmation-gift-cards-shipping-faq",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-confirmation-in-store-pickup-faq",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-review-gift-cards-shipping-faq",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-review-gift-cards-in-store-pickup-faq",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-review-header-cancel",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-review-header-return",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-review-summary-submit",
        "opts" : ""
    },
    {
        "class": ".omniture-cart-review-summary-cancel",
        "opts" : ""
    },
    {
        "class": ".omniture-category-cta",
        "opts" : ""
    },
    {
        "class": ".omniture-category-index-link",
        "opts" : ""
    },
    {
        "class": ".omniture-category-item",
        "opts" : ""
    },
    {
        "class": ".omniture-delivery-terms",
        "opts" : ""
    },
    {
        "class": ".omniture-dropdown-menu",
        "opts" : ""
    },
    {
        "class": ".omniture-dropdown-option",
        "opts" : ""
    },
    {
        "class": ".omniture-account-dropdown-menu",
        "opts" : ""
    },
    {
        "class": ".omniture-account-dropdown-option",
        "opts" : ""
    },
    {
        "class": ".omniture-footer-facebook",
        "opts" : ""
    },
    {
        "class": ".omniture-footer-link",
        "opts" : ""
    },
    {
        "class": ".omniture-footer-sitemap",
        "opts" : ""
    },
    {
        "class": ".omniture-footer-twitter",
        "opts" : ""
    },
    {
        "class": ".omniture-footer-youtube",
        "opts" : ""
    },
    {
        "class": ".omniture-filter-done",
        "opts" : ""
    },
    {
        "class": ".omniture-filter-reset",
        "opts" : ""
    },
    {
        "class": ".omniture-filter-tab",
        "opts" : ""
    },
    {
        "class": ".omniture-header-cart",
        "opts" : ""
    },
    {
        "class": ".omniture-header-check-balance",
        "opts" : ""
    },
    {
        "class": ".omniture-header-citi",
        "opts" : ""
    },
    {
        "class": ".omniture-header-login",
        "opts" : ""
    },
    {
        "class": ".omniture-header-logout",
        "opts" : ""
    },
    {
        "class": ".omniture-header-merchandise",
        "opts" : ""
    },
    {
        "class": ".omniture-header-search-button",
        "opts" : ""
    },
    {
        "class": ".omniture-header-search-field",
        "opts" : ""
    },
    {
        "class": ".omniture-header-travel",
        "opts" : ""
    },
    {
        "class": ".omniture-input-field",
        "opts" : ""
    },
    {
        "class": ".omniture-live-chat-btn",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-add-to-cart-launch",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-add-to-cart-close",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-add-to-cart-continue-shopping",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-add-to-cart-go-to-cart",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-ended-launch",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-ended-close",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-timeout-launch",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-timeout-close",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-timeout-no",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-timeout-yes",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-session-visitor-launch",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-visitor-close",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-visitor-continue",
        "opts" : ""
    },
    {
        "class": ".omniture-modal-visitor-sign-on",
        "opts" : ""
    },
    {
        "class": ".omniture-numeric-stepper-increase",
        "opts" : ""
    },
    {
        "class": ".omniture-numeric-stepper-input",
        "opts" : ""
    },
    {
        "class": ".omniture-pagination-next",
        "opts" : ""
    },
    {
        "class": ".omniture-pagination-previous",
        "opts" : ""
    },
    {
        "class": ".omniture-pagination-page",
        "opts" : ""
    },
    {
        "class": ".omniture-plp-detail",
        "opts" : ""
    },
    {
        "class": ".omniture-product-detail-title",
        "opts" : ""
    },
    {
        "class": ".omniture-promo-cta",
        "opts" : ""
    },
    {
        "class": ".omniture-quickview-close",
        "opts" : ""
    },
    {
        "class": ".omniture-quickview-details",
        "opts" : ""
    },
    {
        "class": ".omniture-quickview-open",
        "opts" : ""
    },
    {
        "class": ".omniture-search-suggestion",
        "opts" : ""
    },
    {
        "class": ".omniture-slider-item",
        "opts" : ""
    },
    {
        "class": ".omniture-slider-next",
        "opts" : ""
    },
    {
        "class": ".omniture-slider-previous",
        "opts" : ""
    },
    {
        "class": ".omniture-slider-pagination",
        "opts" : ""
    },
    {
        "class": ".omniture-sticky-filter",
        "opts" : ""
    },
    {
        "class": ".omniture-swp-details",
        "opts" : ""
    },
    {
        "class": ".omniture-tab",
        "opts" : ""
    },
    {
        "class": ".omniture-tab-product-info",
        "opts" : ""
    },
    {
        "class": ".omniture-tab-product-delivery",
        "opts" : ""
    },
    {
        "class": ".omniture-tooltip",
        "opts" : ""
    },
    {
        "class": ".omniture-travel-results",
        "opts" : ""
    },
    {
        "class": ".omniture-travel-results-book",
        "opts" : ""
    }
];

function fireTags(){
    'use strict';
    siteTags.forEach(function(elem) {
        $(elem.class).click(function() {
            //console.log("let's fire a tag here");
        });
    });
}

fireTags();

'use strict';

var TermsSection = function(element) {
  this.element = element;
  this.$el = $(element);

  this.trigger = this.$el.find('.js-terms-trigger');
  this._dropdown = this.element.getElementsByClassName('omniture-dropdown-menu')[0];

  this._button = $('.ui-selectmenu-button');

  this.tabsSection = null;
  this._triggerClick = this._handleTriggerClick.bind(this);

  this._init();

  this._initialized = false;

  this._determineActiveTabs();
};

TermsSection.prototype._init = function() {
  var tabs = this.$el.find('.faq-tabs')[0];
  this.tabsSection = citiShare.tabs.init(tabs);

  this.trigger.on('click', this._triggerClick);
  this._button.on('click', this._handleDropdownClick.bind(this));

  this._setFirstAccordionsOpen();
  this._setSelectUIWidth();
  this._setInnerTabIndex();
};

TermsSection.prototype._handleDropdownClick = function(e) {
  e.preventDefault();

  this._hideFirstOption();
  this._initialized = true;
};

TermsSection.prototype._handleTriggerClick = function(e) {
  e.preventDefault();
  this._determineActiveTabs();
  this._hideFirstOption();
  this._initialized = true;
};

TermsSection.prototype._hideFirstOption = function() {
  if (this._initialized) {
    return;
  }
  var dropdown = $('.ui-selectmenu-menu');
  var dropdownElements = dropdown.find('.ui-menu-item');
  var currentDropdownElement = dropdownElements.eq(0);
  
  dropdownElements.removeClass('is-hidden');
  currentDropdownElement.addClass('is-hidden');
};

TermsSection.prototype._determineActiveTabs = function() {
  var tabs;
  var index;

  var dropdown = $('.ui-selectmenu-menu');

  if(this._dropdown) {
    index = this._dropdown.selectedIndex;
    var optionSelected = this._dropdown.getElementsByTagName('option')[index];
    tabs = optionSelected.getAttribute('data-tabs').replace(/\s/g, '').split(',');
  } else {
    index = 0;
    tabs = this.tabsSection._$tabs.toArray().map(function(el) {
      return el.getAttribute('data-id');
    });
  }

  if (dropdown) {
    var dropdownElements = dropdown.find('.ui-menu-item');
    var currentDropdownElement = dropdownElements.eq(index);
    
    dropdownElements.removeClass('is-hidden');
    currentDropdownElement.addClass('is-hidden');
  }

  this._showTabs(tabs);
};

TermsSection.prototype._setSelectUIWidth = function() {
  var $selectUI = $('.ui-selectmenu-menu');
  $selectUI.addClass('terms-and-conditions-select-dropdown');
};

TermsSection.prototype._showTabs = function(tabs) {
  this.tabsSection._$tabs.addClass('tabs-tab-is-hidden');
  this.tabsSection._$tabs.removeClass('tabs-tab-is-visible');
  this.tabsSection._$tabs.attr('aria-hidden', true);

  var _this = this;
  var $el;

  var activeTabs = tabs.map(function(id) {
    return _this.$el.find('.tabs-tab[data-id="'+id+'"]')[0];
  });

  this.tabsSection.setActiveTab(activeTabs[0]);

  this._setTabWidths(activeTabs.length);

  activeTabs.forEach(function(el) {
    $el = $(el);
    $el.removeClass('tabs-tab-is-hidden');
    $el.addClass('tabs-tab-is-visible');
    $el.attr('aria-hidden', false);
  });
};

TermsSection.prototype._setTabWidths = function(numberOfTabs) {
  $(this.tabsSection._element).attr('data-tabs-count', numberOfTabs);
};

TermsSection.prototype._setInnerTabIndex = function() {
  var innerLists = this.$el.find('.terms-and-conditions-accordion-content');

  innerLists.each(function(i, el) {
    var $el = $(el);
    var item = $el.find('.terms-and-conditions-accordion-content-item').eq(0);
    item.attr('tabindex', 0);
  });
};

TermsSection.prototype._setFirstAccordionsOpen = function() {
  var $tabPanes = this.$el.find('.tabs-pane');
  $tabPanes.each($.proxy(function(index, el) {
    var accordionContent = $(el).find('.terms-and-conditions-accordion .terms-and-conditions-accordion-content-wrap')[0];
    if(accordionContent) {
      this._openAccordionMenu(accordionContent);
    }
  }, this));
};

TermsSection.prototype._openAccordionMenu = function(parentElement) {
  var firstElementHeader = parentElement.querySelector('.accordion-toggle-header');
  var firstElementContent = parentElement.querySelector('.accordionSubMenu');

  firstElementHeader.setAttribute('aria-expanded', 'true');
  firstElementContent.setAttribute('aria-expanded', 'true');

  firstElementHeader.classList.add('expanded');
  firstElementContent.classList.add('expanded');

  firstElementHeader.classList.remove('is-hidden');
  firstElementContent.classList.remove('is-hidden');
};

TermsSection.init = function() {
  var termsElement = document.querySelector('.terms-and-conditions-section');

  if (termsElement) {
    return new TermsSection(termsElement);
  }
};

citiShare.termsSection = (function() {
  TermsSection.init();
})();

citiShare.tabs = (function() {
    'use strict';

    /**
     * Toggle Tabs
     * For example, citiShare.productDetails.toggleTabs("js-toggle-details", "tab", "js-product-details");
     */
    function toggleTabs(linkClass, type, showClass){

        var $toggleTabEls = $(linkClass);

        $toggleTabEls.on("click keypress", function(e) {
            if (e.which === 13 || e.type === 'click') {
                e.stopPropagation();

                var dataAttr = $(this).data(type);

                var $showDetailsEl = $(showClass + "[data-" + type + "=" + dataAttr + "]");
                var $hideDetailsEl = $(showClass + "[data-" + type + "!=" + dataAttr + "]");
                // Set the tabindex
                $( linkClass + "[data-tab='" + dataAttr + "']").attr("tabindex", 0).focus();
                $( linkClass + "[data-tab!='" + dataAttr + "']").attr("tabindex", -1);

                //If self is clicked, do not toggle
                var isToggled = $showDetailsEl.hasClass("is-hidden");

                if ( isToggled ) {
                    $toggleTabEls.toggleClass("product-active");

                    $( linkClass + "[data-" + "tab" + "=" + dataAttr + "]" ).attr("aria-selected", true);
                    $( linkClass + "[data-" + "tab" + "!=" + dataAttr + "]" ).attr("aria-selected", false);

                    // Toggle details
                    $hideDetailsEl.toggleClass("is-hidden");
                    $showDetailsEl.toggleClass("is-hidden");
                }
            }
        });
    }

    return {
        toggleTabs: toggleTabs
    };
})();

/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

citiShare.tooltipRemove = (function() {
    "use strict";
    
    var currentlyOpenedRemoveTooltip;

    function _removeItem(argument) {
        // a function to remove an item from the cart
        console.log('in _removeItem', argument);
        _closeTooltip();
    }

    function _openTooltip($removeButton){
        $removeButton.find('.tooltip-remove-wrapper').addClass('is-active');
        currentlyOpenedRemoveTooltip = new citiShare.AccessibleModal({
          modal: $removeButton.find(".tooltip-remove-dialog-wrapper:first"),
          previousElement: $removeButton,
          closeButton: $removeButton.find(".tooltip-remove-button-cancel"),
          modalType: 'simple'
        });
    }

    function _closeTooltip(){
        $('.tooltip-remove-wrapper').removeClass('is-active');
        currentlyOpenedRemoveTooltip = undefined;
    }

    function _init() {
        $(document).on('click', '.checkout-item-remove', function(event) {
            event.preventDefault();
            _closeTooltip($('.tooltip-remove-wrapper'));

            if (!$(this).find('.tooltip-remove-wrapper').hasClass('is-active')) {
                _openTooltip($(this));
            } else {
                _closeTooltip($(this));
            }
        });

        $(document).on('click', '.oc-content', function(event) {
            if( event.target.tagName !== undefined &&
                $(event.target).closest('.tooltip-remove-wrapper').length === 0 &&
                !$(event.target).is('.checkout-item-remove')) {
                    _closeTooltip();
            }        
        });


        $(document).on('click', '.tooltip-remove-button-confirm', function(event) {
            event.stopPropagation();
            _removeItem();
        });

        $(document).on('click keypress', '.tooltip-remove-button-cancel', function(event) {
          if (event.which === 13 || event.type === 'click') {
            event.stopPropagation();
            _closeTooltip();
          }
        });
    }
    _init();
    return {
        
    };
})();


/**
 * JSHint:
 * To allow bracket notation,
 * For example, test["placeholder"] vs test.placeholder
 */

/*jshint sub:true*/

citiShare.tooltip = (function () {
  "use strict";

  var EXITER_CLASS = 'tooltip-exiter',
    TARGET_CLASS = 'tooltip-target',
    TARGET_SELECTOR = '.' + TARGET_CLASS,
    EXITER_SELECTOR = '.' + EXITER_CLASS,
    TOP_ALIGNED_CLASS = 'tooltip-top-position',
    TOOLTIP_TOP_CLASS = 'top-aligned';

  var $wrapper = null,
    $box = null,
    $content = null,
    $arrow = null,
    $currentBase = null,
    currentContent = null,
    isOpen = false,
    exiterBefore = null,
    exiterAfter = null,
    initialArrowMargin = 0,
    initialized = false;

  function _refreshAttrs($base) {
    var label = $base.attr('aria-label');
    var content = $base.attr('data-tooltip-content');
    var toShow = content ? content : label;

    $base.attr('data-tooltip-content', toShow);
    $base.attr('aria-label', label.replace(/<br ?\/>/g, ''));
    $base.attr('tabindex', '0');
  }

  //Call this if dynamic content occurs so the tips can be positioned
  function refresh() {

    if (isOpen) {
      hide();
    }

    $(TARGET_SELECTOR).each(function () {
      var $this = $(this);

      _refreshAttrs($this);

      //This may need to be modified as use-cases arise.
      if ($this.css('vertical-align') !== 'top') {
        return;
      }
      var $parent = $this.parent();
      var $prev = $this.prev();
      var $guide = null;
      var translateY = 0;

      if ($prev.length > 0) {
        $guide = $prev;
      } else {
        $guide = $parent;
      }

      var guideHeight = $guide.height();
      var tipHeight = $this.height();
      if (tipHeight > guideHeight) {
        translateY = ((tipHeight - guideHeight) / 2) * -1;
      } else {
        translateY = (guideHeight / 2) - (tipHeight / 2);
      }
    });
  }

  function show(content, $base) {

    isOpen = true;

    $currentBase.attr('title', '');
    $currentBase.addClass('tooltip-active');
    if ($base.hasClass(TOP_ALIGNED_CLASS)) {
      $wrapper.addClass(TOOLTIP_TOP_CLASS);
    }
    $wrapper.css('display', 'block');
    $content.html(content);

    var position = _getPositionForBase($base);

    if (position.offset !== 0) {
      var newMargin = initialArrowMargin;

      if (position.offset < 0) {
        newMargin += Math.abs(position.offset);
      } else {
        newMargin -= position.offset;
      }
      $arrow.css('margin-left', newMargin);
    } else {
      $arrow.css('margin-left', initialArrowMargin);
    }

    $wrapper.css({
      opacity: 1,
      top: position.top,
      left: position.left
    });

  }

  function hide() {

    isOpen = false;

    $currentBase.removeClass('tooltip-active ');
    $currentBase.attr('title', currentContent);
    $content.html('');
    $wrapper.removeClass(TOOLTIP_TOP_CLASS);
    $wrapper.css({
      display: 'none',
      opacity: 0,
      top: 0,
      left: -9999
    });
  }

  function _getPositionForBase($base) {
    var $b = $($base),
      baseOffset = $b.offset(),
      baseHeight = $b.outerHeight(),
      baseWidth = $b.outerWidth(),
      tipHeight = $wrapper.height(),
      tipWidth = $wrapper.width(),
      winWidth = $(window).width(),
      isTopPositioned = $base.hasClass(TOP_ALIGNED_CLASS);


    var top = isTopPositioned ? baseOffset.top - (tipHeight + 10) : baseOffset.top + baseHeight,
      left = baseOffset.left - (tipWidth / 2) + (baseWidth / 2),
      right = left + tipWidth,
      leftBounds = 25,
      rightBounds = winWidth - leftBounds,
      offset = 0;

    if (left < leftBounds) {
      offset = leftBounds - left;
      left = leftBounds;
    } else if (right > rightBounds) {
      offset = (right - rightBounds) * -1;
      left = rightBounds - tipWidth;
    }

    return {
      top: top,
      left: left,
      offset: offset
    };

  }

  function _unsetExiters() {
    if (exiterBefore) {
      exiterBefore.attr('tabindex', null).removeClass(EXITER_CLASS);
    }
    if (exiterAfter) {
      exiterAfter.attr('tabindex', null);
    }
    exiterBefore = null;
    exiterAfter = null;
  }

  function _setExiters() {
    _unsetExiters();

    var nextSibling = $currentBase.next();
    var previousSibling = $currentBase.prev();

    if (nextSibling.length > 0) {
      exiterAfter = nextSibling;
    } else {
      var tries = 0;
      var $thisParent = $currentBase.parent();
      exiterAfter = null;

      do {
        var $parentSibling = $thisParent.next();

        if ($parentSibling.length > 0) {
          var isHidden = $parentSibling.attr('aria-hidden') || 'false';
          if(isHidden === 'false') {

            var tag = $parentSibling[0].tagName.toLowerCase();
            if (tag !== 'div') {
              exiterAfter = $parentSibling;
            } else {
              var $firstChild = $parentSibling.find('a, td, th, input, span, p, h1, h2, h3, h4, h5, h6, button, label').first();
              var $parentSiblingNext = $parentSibling.next();
              if ($firstChild.length > 0) {
                if (!exiterAfter) {
                  exiterAfter = $firstChild;
                }
              }
              if($parentSiblingNext.length > 0) {
                if(!exiterAfter) {
                  exiterAfter = $parentSiblingNext;
                }
              }
            }
          }
        }

        tries += 1;
        $thisParent = $thisParent.parent();
      } while (tries < 6 && !exiterAfter);
    }
    if (previousSibling.length > 0) {
      exiterBefore = previousSibling;
    } else {
      exiterBefore = $currentBase.parent();
    }

    exiterBefore.attr('tabindex', '0').addClass(EXITER_CLASS);
    if (exiterAfter) {
      exiterAfter.attr('tabindex', '0').addClass(EXITER_CLASS);
    }
  }

  function _onLeave(e) {
    _unsetExiters();

    var $related = e.relatedTarget;
    var isFocused = e.currentTarget === document.activeElement;
    if ($related !== $wrapper[0] && !$.contains($wrapper[0], $related) && !isFocused) {
      hide();
    }
  }

  function _onEnter(e) {
    var $targ = $(e.currentTarget);

    if ($targ.is('body')) {
      $targ = $(e.target);
    }

    $currentBase = $targ;
    currentContent = $currentBase.attr('data-tooltip-content');

    if (currentContent && currentContent !== '') {
      show(currentContent, $currentBase);
    }

    if (Modernizr.touch) {
      _setExiters();
    } else {
      if (e.which === 0) {
        _unsetExiters();
      } else {
        _setExiters();
      }
    }

  }

  function _onClick(e) {
    e.preventDefault();
    var element = $(e.target);
    var tagName = element.prop('tagName');

    if (isOpen && tagName !== 'INPUT') {
      hide();
    } else {
      element.focus();
      _onEnter(e);
    }
  }

  function _onWrapperLeave() {
    var activeElement = $(document.activeElement).prop('tagName');
    if (isOpen && activeElement !== 'INPUT') {
      hide();
    }
  }

  function _onViewportUpdate() {
    refresh();
  }

  function _onExiterLeave(e) {
    if (!$(e.relatedTarget).is(TARGET_SELECTOR)) {
      _unsetExiters();
    }
  }

  function _bind() {
    var $body = $('body');

    if (Modernizr.touch) {
      $body[0].addEventListener('touchend', function (e) {
        var $targ = $(e.target);
        var isTip = $targ.is('.tooltip-wrapper') || $targ.closest('.tooltip-wrapper').length > 0;
        if ($targ.is(TARGET_SELECTOR) || (isOpen && !isTip)) {
          _onClick(e);
        }
      }, false);
    } else {
      $body.on('click', TARGET_SELECTOR, _onClick);
    }
    $body.on('mouseover focus', TARGET_SELECTOR, _onEnter);
    $body.on('mouseout blur', TARGET_SELECTOR, _onLeave);
    $wrapper.on('mouseleave', _onWrapperLeave);
    $body.on('blur', EXITER_SELECTOR, _onExiterLeave);

    citiShare.on('viewport:update', _onViewportUpdate);
  }

  function _createHolder() {
    if ($wrapper) {
      return;
    }

    $arrow = $('<span class="tooltip-arrow"></span>');
    $wrapper = $('<div role="tooltip" class="tooltip-wrapper"></div>');
    $box = $('<div class="ui-tooltip ui-widget ui-corner-all ui-widget-content tooltip-box"></div>');
    $content = $('<div class="ui-tooltip-content"></div>');

    $wrapper.css({
      display: 'none',
      opacity: 0
    });

    $wrapper.append($arrow);
    $wrapper.append($box);
    $box.append($content);
    $('body').append($wrapper);

    initialArrowMargin = parseInt($arrow.css('margin-left'), 10);
  }

  function _init() {
    if (initialized) {
      return;
    }

    initialized = true;

    _createHolder();
    refresh();
    _bind();
  }

  _init();

  return {
    refresh: refresh,
    show: show,
    hide: hide
  };

})();


//This is global to keep track of browser dimensions, etc.  Add functionality here as needed (i.e. scroll, hashParams, etc)
//
citiShare.viewport = (function() {
    "use strict";

    var win = {
      width:0,
      height:0
    };

    function _get() {
      return {
        win:win
      };
    }

    function _win() {
      return win;
    }

    function _onResize() {
      var w = window.innerWidth || $(window).width();
      var h = window.innerHeight || $(window).height();
      var updated = win.width !== w || win.height !== h;

      win.width = w;
      win.height = h;

      if (updated) {
        citiShare.trigger('viewport:update', win);
      }

    }

    function _bind() {
      $(window).on('resize', citiShare.util.throttle(_onResize, 50));
    }

    function _init() {
      _bind();
      $(window).trigger('resize');
    }

    _init();

    return {
      get:_get,
      win:_win
    };
})();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
